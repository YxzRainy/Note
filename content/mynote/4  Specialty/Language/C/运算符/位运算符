---
title: C 位运算符
date: 2022-04-19 6:00:00
categories:
        - 编程语言
tags:
        - C
        - 运算符
        - 学习笔记

---

# 位运算符

通过位运算符，我们可以对数据的操作精确到每一位（Bit），而不是只能精确到 每一字节。

## &

按位与，当只有一个操作数时`&i`，表示取这个操作数地址。

当有两个操作数时，它会将这两个操作数转换为二进制，再进行与运算。

### 与运算

有一个是 0 结果就是 0，两个都是 1 才算 1，不够位数补 0 。

```yaml
21  &  7 # 与运算
0 0 0 1 0 1 0 1
0 0 0 0 0 1 1 1
——————————————— # 开始与运算
0 0 0 0 0 1 0 1  # 与运算结果 1 0 1，然后转十进制为：5

# 也就是：
1 & 1 = 1
1 & 0 = 0
0 & 1 = 0
0 & 0 = 0
```

### &&

逻辑与，也叫并且，只有两个操作数都是 true，结果才是 true，否则都为 false。

```c
# include <stdio.h>

int main(void)
{
    int i = 21;
    int j = 7;
    int k;

    k = i & j;
    // 与运算结果为 101，然后转为十进制 5
    printf("%d\n",k);

    k = i && j;
    // true
    printf("%d\n",k);

    return 0;
}

```



## |

按位或，当有两个操作数时，它会将这两个操作数转换为二进制，再进行或运算。

### 或运算

有一个 1 就是 1，都是 0 结果才是 0。

```yaml
21  &  7 # 或运算
0 0 0 1 0 1 0 1
0 0 0 0 0 1 1 1
——————————————— # 开始或运算
0 0 0 1 0 1 1 1  # 或运算结果 10111，然后转为十进制 23
# 也就是说：
0 & 0 = 0
1 | 1 = 1
1 & 0 = 1
0 & 1 = 1
```

### ||

逻辑或，当两个操作数都为 false 时，结果才是 false，否则都为true。

```C
# include <stdio.h>

int main(void)
{
    int i = 21;
    int j = 7;
    int k;

    k = i | j;
    //或运算结果 10111，然后转为十进制 23
    printf("%d\n",k);

    k = i || j;
    // true
    printf("%d\n",k);

    return 0;
}

```

## ~

按位取反，将操作数转换为额二进制，再将不足位补零 ，最后全部取反。

```c
# include <stdio.h>

int main(void)
{
//    int i = 21;
//    int j = 7;
//    int k;
//
//    k = i | j;
//    //或运算结果 10111，然后转为十进制 23
//    printf("%d\n",k);
//
//    k = i || j;
//    // true
//    printf("%d\n",k);
//
//    return 0;
    int i = 123;
    int k;
    // 将 i 转换为二进制 1111011，并取反 0000100 = 4（不加 1），再将二进制转换为十进制，
    // 也就是进行补码运算：·  ·取反 1111011 = 123（首位为 1,这个数为负数），然后并 + 1，最后结果为 - 124；
    k = ~i;
    printf("%d",k);

}
```

## ^

按位异或，

### 异或运算

相同为 0，不同为 1。

```yaml
# 也就是
1 ^ 0 = 1
0 ^ 1 = 1
1 ^ 1 = 0
0 ^ 9 = 0
```

## <<

按位左移，表示将操作数的二进制数左移 N 位，右侧补零。

**一个操作数左移 N 位的结果就是将这个操作数乘以 2 的 N 次方**

```c
# include <stdio.h>

int main(void)
{
    int i = 123;
    int k;
    //  i = 123，左移 1 位，相当于乘以 2 的 1 次方 = 246
    k = i << 1;
    printf("%d",k);

}

```

。\>\>

按位右移，表示将操作数的二进制数右移 N 位，不足位左侧补零，补零有两种情况：

1. 不管不足位是 0 或是 1，都补零。
2. 最高位是 1，就补 1，最高位是 0，就补 0。

**一个操作数左移 N 位的结果就是将这个操作数除以 2 的 N 次方。**

我们用按位右移操作符的时候，因为是除，所以会使操作数不断变小，因此，我们需要注意：**不能将数据移丢失**。

```c
# include <stdio.h>

int main(void)
{
    int i = 122;
    int k;
    //  i = 123，右移 1 位，相当于除以 2 的 1 次方 = 61
    k = i >> 1;
    printf("%d",k);

}
```

