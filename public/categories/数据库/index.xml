<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据库 on Rainy · Blog</title>
    <link>https://yxzi.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Rainy · Blog</description>
    <image>
      <url>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 30 Apr 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 交叉链接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/%E4%BA%A4%E5%8F%89%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/%E4%BA%A4%E5%8F%89%E9%93%BE%E6%8E%A5/</guid>
      <description>交叉链接 </description>
    </item>
    
    <item>
      <title>MySQL 内链接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-99/%E5%86%85%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Thu, 28 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-99/%E5%86%85%E9%93%BE%E6%8E%A5/</guid>
      <description>内连接 该语法比 SQL 92 的链接查询语法的可读性要高。
SELECT 查询列表FROM 表一 别名 链接类型JOIN 表二 别名# SQL 92 用 WHERE，SQL99 用 ONON 链接条件WHERE </description>
    </item>
    
    <item>
      <title>MySQL 等值链接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E7%AD%89%E5%80%BC%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 27 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E7%AD%89%E5%80%BC%E9%93%BE%E6%8E%A5/</guid>
      <description>等值链接 判断不同表中都包含的字段是否相等，等于则显示，不等于则过滤。且一般都用的是等于符号来判断。
查询的是多张表的交集部分。
一般需要为表起别名。
注意 使用链接查询，很多时候容易出现Column &#39;字段名&#39; in ambiguousfield 错误，这种情况一般是因为不同的表中含有相同的字段名，导致系统无法知道我们到底要查询哪个表中的字段。这个时候只需要指定一下我们要查询的是哪个表中的字段即可。
查询女神名所对应的男神名 SELECT name,boyName FROM beauty,boys WHERE beauty.boyfriend_id = boys.id; 查询员工名所对应的部门名 SELECT last_name AS 员工名,department_name AS 部门名 FROM employees,departments WHERE employees.department_id = departments.department_id 查询员工名、工种号、工种名 链接查询通常比较长，因此我们可以给表定义一个别名。
注意，如果我们为一些表起了别名之后，后续的语句当中如果需要用到这些表，则只能用我们定义的别名，不能用原本的表名。
# 因为jobs 表和 employees 表中都用 job_id， # 系统不知道我们到底要查询哪一个， # 因此，这里需要指定一下我们要查询哪个表中的job_id SELECT last_name,员工表.job_id,job_title FROM employees AS 员工表, jobs AS 工种表 WHERE 员工表.job_id = 工种表.job_id; 查询城市名中第二个字符为o的部门和城市名 SELECT department_name,	city FROM departments AS 部门表,locations AS 位置表 WHERE 部门表.location_id = 位置表.</description>
    </item>
    
    <item>
      <title>MySQL 自链接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E8%87%AA%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 27 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E8%87%AA%E9%93%BE%E6%8E%A5/</guid>
      <description>自链接 判断同一张表中的不同字段是否相等，相等则显示，不相等则过滤。需要给同一张表取不同的别名，让系统分清同一张表中的不同字段。
查询员工名所对应的领导名称 SELECT 员工表.employee_id,员工表.last_name, 领导表.employee_id,领导表.last_name FROM employees AS 员工表, employees AS 领导表 WHERE 员工表.manager_id= 领导表.employee_id; </description>
    </item>
    
    <item>
      <title>MySQL 非等值链接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E9%9D%9E%E7%AD%89%E5%80%BC%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Wed, 27 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-92/%E5%86%85%E8%BF%9E%E6%8E%A5/%E9%9D%9E%E7%AD%89%E5%80%BC%E9%93%BE%E6%8E%A5/</guid>
      <description>非等值链接 新建查询并运行。
CREATE TABLE job_grades (grade_level VARCHAR(3),  lowest_sal int,  highest_sal int);  INSERT INTO job_grades VALUES (&amp;#39;A&amp;#39;, 1000, 2999);  INSERT INTO job_grades VALUES (&amp;#39;B&amp;#39;, 3000, 5999);  INSERT INTO job_grades VALUES(&amp;#39;C&amp;#39;, 6000, 9999);  INSERT INTO job_grades VALUES(&amp;#39;D&amp;#39;, 10000, 14999);  INSERT INTO job_grades VALUES(&amp;#39;E&amp;#39;, 15000, 24999);  INSERT INTO job_grades VALUES(&amp;#39;F&amp;#39;, 25000, 40000); 查询员工的工资和工资级别 SELECT salary,grade_level FROM employees AS 员工表, job_grades 工资等级表 WHERE 员工表.salary BETWEEN 工资等级表.lowest_sal AND 工资等级表.</description>
    </item>
    
    <item>
      <title>MySQL COUNT</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/count/</link>
      <pubDate>Mon, 25 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/count/</guid>
      <description>COUNT COUNT(*) 统计表的行数，在统计结果的时候，不会忽略字段值为 NULL 的行。
这种写法用的比较多，因为在一般的存储引擎下，COUNT(*)的效率通常比较高。
COUNT(1) 忽略所有字段，1 表示一个固定值，也可以用 COUNT(2)、COUNT(3) 代替，在统计结果的时候，不会忽略字段值为 NULL 的行。
COUNT(字段名) 统计指定字段名的值有多少行，字段值为 NULL 的行会被忽略统计。
COUNT(DISTINCT 字段名) 统计指定字段名的值有多少行，，字段值为 NULL 或重复的行会被忽略统计。</description>
    </item>
    
    <item>
      <title>MySQL 分组查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 25 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</guid>
      <description>分组查询 通过一定的规则将一个数据集划分为若干个小组，然后对这些小组中的数据进行处理。
语法 SELECT 字段名 FROM 表名 WHERE 分组前的筛选条件 GROUP BY 依照哪个字段进行分组 ORDER BY 排序列表 HAVING 分组后的筛选条件 查询列表必须特殊，必须实分组函数和 GROUP BY后面出现的字段。
分组查询的筛选条件被分为分组前的筛选和分组后的筛选
WHERE 和 HAVING WHERE，分组之前的筛选条件，数据来源是原始表。
HAVING，分组之后的筛选条件，数据来源是经过 WHERE 筛选后的表。
用先用 WHERE 来进行筛选的，优先考虑先用 WHERE 来进行筛选。
按单个字段分组 查询每个工种的最高工资 SELECT MAX(salary),job_id FROM employees GROUP BY job_id 查询每个部门，邮箱中包含 a 字符的平均工资 SELECT AVG(salary), department_id FROM employees WHERE email LIKE &amp;#39;%a%&amp;#39; GROUP BY department_id 查询每个领导手下有奖金的员工的最高工资 SELECT MAX(salary),manager_id FROM employees WHERE commission_pct IS NOT NULL GROUP BY manager_id 查询哪些部门的员工数 &amp;gt; 2 SELECT COUNT(*) AS 员工个数, department_id FROM employees GROUP BY department_id HAVING 员工个数 &amp;gt;2; 查询哪些工种编号的最高工资 &amp;gt; 12000 SELECT MAX(salary) AS 最高工资, job_id FROM employees WHERE commission_pct IS NOT NULL GROUP BY job_id HAVING 最高工资 &amp;gt;12000; 查询哪些领导编号 &amp;gt;102 ，且最低工资 &amp;gt; 5000 SELECT MIN(salary) AS 最低工资,manager_id FROM employees WHERE manager_id &amp;gt; 102 GROUP BY manager_id HAVING 最低工资 &amp;gt; 5000; 按表达式或函数分组 按员工姓的长度分组，查询每组员工个数 &amp;gt;5 的组 SELECT COUNT(*) AS 员工个数,LENGTH(last_name) AS 这些员工的姓名长度 FROM employees GROUP BY LENGTH(last_name) HAVING 员工个数 &amp;gt; 5 按多个字段分组 将GROUP BY后面的多个字段用,隔开即可。</description>
    </item>
    
    <item>
      <title>MySQL 外连接</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-99/%E5%A4%96%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Mon, 25 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/sql-99/%E5%A4%96%E8%BF%9E%E6%8E%A5/</guid>
      <description>外连接 左外链接 右外链接 全外链接 </description>
    </item>
    
    <item>
      <title>MySQL 链接查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 25 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2/</guid>
      <description>链接查询 当需要从多张表中查询数据，而这些表之间有关联字段的时候，需要使用连接查询。
笛卡尔乘积错误 表 1 有 N 行，表 2 有 M 行，最终的查询结果就是 M * N 行。
SELECT name,boyName FROM beauty,boys 导致的原因是因为没有添加有效的链接条件。
只需要添加有效的链接条件即可。
SELECT name,boyName FROM beauty,boys WHERE beauty.boyfriend_id = boys.id; 内连接 从结果表中删除与其他被连接表中没有匹配行的所有行。
SQL 92 只支持内链接。
SQL 99 支持内链接，外连接以及交叉链接。并且该版本的语法要比 SQL 92 的可读性要高。
外链接 交叉链接 </description>
    </item>
    
    <item>
      <title>MySQL CREATE</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/ddl/create/</link>
      <pubDate>Sun, 24 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/ddl/create/</guid>
      <description>创建表 mysql&amp;gt; create table rainy(  -&amp;gt; id int,  -&amp;gt; name varchar(20)); Query OK, 0 rows affected (0.01 sec) </description>
    </item>
    
    <item>
      <title>MySQL 其他函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 24 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0/</guid>
      <description>其他函数 查询 MySQL 版本号 SELECT VERSION(); 查询当前处于哪个数据库 SELECT DATABASE(); 查询当前用户 SELECT USER() </description>
    </item>
    
    <item>
      <title>MySQL INSERT</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dml/insert/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dml/insert/</guid>
      <description>INSERT 用于向数据库中的表插入数据。
插入数据 使用insert into TableName;来插入一些数据，TableName 是要插入数据的表的名称。
mysql&amp;gt; insert into rainy (id,name) values(1,&amp;#39;su&amp;#39;); Query OK, 1 row affected (0.00 sec) 我们插入数据后重新查询表中的数据：
mysql&amp;gt; select * from rainy; +------+------+ | id | name | +------+------+ | 1 | su | | 1 | su | +------+------+ 2 rows in set (0.00 sec) </description>
    </item>
    
    <item>
      <title>MySQL SHOW</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/show/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/show/</guid>
      <description>SHOW SHOW ENGINES 查看 MySQL 支持的存储引擎。
SHOW ENGINES; # 显示二进制文件以及文件大小（需要开启二进制日志记录功能） SHOW {BINARY | MASTER} LOGS  # 显示二进制文件的执行过程 SHOW BINLOG EVENTS [IN &amp;#39;log_name&amp;#39;] [FROM pos] [LIMIT [offset,] row_count]  # 显示MySQL当前支持哪些字符集 SHOW CHARACTER SET [like_or_where]  # 显示MySQL支持字符集的排序规则 SHOW COLLATION [like_or_where]  # 显示表的列信息（等同于DESC，需要先创建表） SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [like_or_where]  # 显示已经创建的库，创建时的语句 SHOW CREATE DATABASE db_name  # 显示已经创建的事件，创建时的语句 SHOW CREATE EVENT event_name  # 显示已经创建的函数，创建时的语句 SHOW CREATE FUNCTION func_name  # 显示已经创建的存储过程，创建时的语句 SHOW CREATE PROCEDURE proc_name  # 显示已经创建的表，创建时的语句 SHOW CREATE TABLE tbl_name  # 显示已经创建的触发器，创建时的语句 SHOW CREATE TRIGGER trigger_name  # 显示已经创建的视图，创建时的语句 SHOW CREATE VIEW view_name  # 显示mysql中所有数据库的名称 SHOW DATABASES [like_or_where]  # 显示存储引擎的详细信息 SHOW ENGINE engine_name {STATUS | MUTEX}  # 显示数据库支持的存储引擎和默认存储引擎 SHOW [STORAGE] ENGINES  # 显示最后一个执行语句所产生的错误信息 SHOW ERRORS [LIMIT [offset,] row_count]  # 显示事件信息 SHOW EVENTS  # 服务器内部调试，显示一个指定存储的内部实现的表示形式过程 SHOW FUNCTION CODE func_name  # 显示存储函数信息（需要先创建存储函数） SHOW FUNCTION STATUS [like_or_where]  # 显示指定用户拥有的权限 SHOW GRANTS FOR user  # 显示表索引信息（需要先创建索引） SHOW INDEX FROM tbl_name [FROM db_name]  # 显示Master当前正在使用的二进制信息 SHOW MASTER STATUS  # 列举在表缓存中当前被打开的非TEMPORARY表 SHOW OPEN TABLES [FROM db_name] [like_or_where]  # 显示MySQL插件信息 SHOW PLUGINS  # 服务器内部调试，显示一个指定存储的内部实现的表示形式过程 SHOW PROCEDURE CODE proc_name  # 显示存储过程信息（需要先创建存储过程） SHOW PROCEDURE STATUS [like_or_where]  # 显示MySQL所支持的所有权限，及权限可操作的对象 SHOW PRIVILEGES  # 显示系统中正在运行的所有进程，普通用户只能查看自己的进行信息 SHOW [FULL] PROCESSLIST  # 显示当前会话执行语句资源使用情况 SHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]  # 显示当前会话执行语句资源使用情况 SHOW PROFILES  # 显示relaylog事件信息（需要先做主从复制） SHOW RELAYLOG EVENTS [IN &amp;#39;log_name&amp;#39;] [FROM pos] [LIMIT [offset,] row_count]  # 显示Master主机上已注册的复制主机列表（需要先做主从复制） SHOW SLAVE HOSTS  # 显示Slave主机状态信息（需要先做主从复制） SHOW SLAVE STATUS [FOR CHANNEL channel]  # 显示MySQL状态信息 SHOW [GLOBAL | SESSION] STATUS [like_or_where]  # 显示表属性信息 SHOW TABLE STATUS [FROM db_name] [like_or_where]  # 显示当前数据库中所有表的名称 SHOW [FULL] TABLES [FROM db_name] [like_or_where]  # 显示触发器信息（需要先创建触发器） SHOW TRIGGERS [FROM db_name] [like_or_where]  # 显示MySQL变量信息 SHOW [GLOBAL | SESSION] VARIABLES [like_or_where]  # 显示最后一个执行语句所产生的警告信息 SHOW WARNINGS [LIMIT [offset,] row_count] </description>
    </item>
    
    <item>
      <title>MySQL UPDATE</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dml/update/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dml/update/</guid>
      <description>UPDATE 用于修改或更新数据库中表的数据。
修改表中的数据 mysql&amp;gt; update rainy set name=&amp;#39;zhu&amp;#39;where id=1; Query OK, 2 rows affected (0.03 sec) Rows matched: 2 Changed: 2 Warnings: 0 修改后重新查询表中的数据：
mysql&amp;gt; select * from rainy; +------+------+ | id | name | +------+------+ | 1 | zhu | | 1 | zhu | +------+------+ 2 rows in set (0.00 sec) </description>
    </item>
    
    <item>
      <title>MySQL 函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</guid>
      <description>函数 函数之间可以嵌套
语法 SELECT 函数名(实参列表,表名) 单行函数 主要用于处理数据，传入一个参数，返回一个值。
 字符函数，传入的参数为字符串类型。 数学函数，传入的参数为数字类型。 日期函数，传入的参数为日期类型。 其他函数 流程控制函数，可以实现一些分支结构。  分组函数 主要用于统计数据，传入一组参数，并返回一个值，也叫统计函数、组函数、聚合函数。</description>
    </item>
    
    <item>
      <title>MySQL 数学函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</guid>
      <description>数学函数 用于对数字进行处理，或者返回一个数值。
ROUND(X,D) 计算将 X 四舍五入后，保留 D 位小数后的值。
SELECT ROUND(45.4) CEIL(X) 计算将 X 向上取整后的值，这个值 &amp;gt;= X 的最小整数。
SELECT CEIL(1.52) # 返回 1 SELECT CEIL(1) FLOOR(X) 计算将 X 向下取整后的值，这个值 &amp;lt;= X 的最大整数。
SELECT FLOOR(1.2) # 返回 1 SELECT FLOOR(9.9) TRUNCATE(X,D) 不将 X 进行四舍五入，直接保留 D 位小数，或者说是直接截断。
SELECT TRUNCATE(1.69999,2) MOD(N,M) 计算用 N 除以 M 的余数，相当于 N % M。
但%实际上的计算过程是N - (N/M*M)。
SELECT MOD(10,3) # 相当于 SELECT 10 % 3 </description>
    </item>
    
    <item>
      <title>MySQL 日期函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>日期函数 用于对日期进行处理，或者返回一个日期的值。
日期格式符号    格式符 功能     %Y 四位的年份   %y 两位的年份   %m 月份(01 - 12)   %c 月份(1 - 12)   %d 日(01, 02, …)   %H 小时(24 小时制)   %h 小时(12 小时制)   %i 分钟(00 - 59)   %s 秒(00 - 59)   %U 星期(0 - 52)，星期天为第一天   %u 星期(0 - 52)，星期一为第一天   %W 星期英文(Sunday — Saturday)   %M 月份英文(January — December)    NOW() 返回系统当前的日期和时间。</description>
    </item>
    
    <item>
      <title>MySQL 模糊查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</guid>
      <description>模糊查询 LIKE 查询某个字段中所有包含单个或多个字符的数据
查询员工名中第三个字符为n，第五个字符为 l 的员工名和工资 _通配符，表示匹配任意单个字符。
SELECT last_name, salary FROM employees WHERE last_name LIKE # 第三个字符为 n，第五个字符为 l 的数据 &amp;#39;__n_l%&amp;#39;; 查询员工名中第二个字符为 _ 的员工名 \转义字符，表示特殊的控制意义，一般用于格式控制。
SELECT last_name, salary FROM employees WHERE last_name LIKE &amp;#39;_\_%&amp;#39;; ESCAPE关键字可以让我们自定义转义字符。
SELECT last_name, salary FROM employees WHERE last_name LIKE &amp;#39;_$_%&amp;#39; # 自定义一个转义字符 $ ESCAPE &amp;#39;$&amp;#39;; 查询员工名中包含字符 a 的员工信息 %通配符，表示匹配任意多个字符，且包含 0 个字符。
SELECT * FROM employees WHERE last_name LIKE # % 表示匹配任意内容的意思 # 这里的 % 表示匹配 a 字符前面和后面都有任意字符的数据 &amp;#39;%a%&amp;#39;; BETWEEN AND 查询某个字段中所有在&amp;hellip;和&amp;hellip;之间的数据。</description>
    </item>
    
    <item>
      <title>MySQL 流程控制函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0/</guid>
      <description>流程控制函数 IF IF(expr1,expr2,expr3) 如果 expr1 为 true，则返回 expr2 的值，否则返回 expr3 的值。
SELECT IF(10&amp;gt;5,&amp;#39;大&amp;#39;,&amp;#39;小&amp;#39;) 查询所有员工是否都有奖金 SELECT last_name,commission_pct,IF(commission_pct IS NOT NULL,&amp;#39;有奖金&amp;#39;,&amp;#39;无奖金&amp;#39;) AS 有无奖金 FROM employees CASE 它可以当成语句用，也可以当作表达式用。
他有两种用法，第一种用法类似于 switch 语句；第二种用法类似于 多重 if 语句。
查询员工的工资，要求： 部门号 = 30，显示原工资的 1.1 倍。
部门号 = 40，显示原工资的 1.2 倍。
部门号 = 50，显示原工资的 1.3 倍。
其他部门，显示原工资。
SELECT salary, department_id, # 如果 department_id 等于下面 WHEN 后面的任意值，则执行这个值对应的 THEN 后面的语句。 CASE department_id 	WHEN 30	THEN salary * 1.1 	WHEN 40 THEN salary * 1.</description>
    </item>
    
    <item>
      <title>MySQL ALTER</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/ddl/alter/</link>
      <pubDate>Fri, 22 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/ddl/alter/</guid>
      <description>ALTER 修改数据表名或者修改数据表的字段.
修改表名 ALTER TABLE 旧表名 RENAME 新表名。
ALTER TABLE rainy RENAME Su; 修改字段 ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型。
ALTER TABLE su CHANGE rainy apple VARCHAR(20); 修改字段的排列位置 ALTER TABLE 表名 MODIFY 字段名 1 VARCHAR(20) AFTER 字段名 2;
ALTER TABLE su MODIFY rainy VARCHAR(20) AFTER two; 删除字段</description>
    </item>
    
    <item>
      <title>MySQL 分组函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/</guid>
      <description>分组函数 与分组函数一同查询的字段要求是GROUP BY后的字段。
SUM 统计表中字段的和。
一般用于处理数值类型，计算时会忽略 NULL 值。
SELECT SUM(salary) FROM employees; AVG 统计表中字段的平均值。
一般用于处理数值类型，计算时会忽略 NULL 值。
SELECT AVG(salary) FROM employees; MAX 统计表中字段的最大值，可以处理任何数据类型，计算时会忽略 NULL 值。
SELECT MAX(salary) FROM employees; MIN 统计表中字段的最小值，可以处理任何数据类型，计算时会忽略 NULL 值。
SELECT MIN(salary) FROM employees; COUNT 统计表的行数，可以处理任何数据类型，计算时会忽略 NULL 值。
查询总行数 SELECT COUNT(*)FROM employees </description>
    </item>
    
    <item>
      <title>MySQL 字符函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0/</guid>
      <description>字符函数 用于对字符进行处理，并返回一个字符串值。
字符串的索引都是从 1 开始的。
LENGTH(str) 返回 str 的字节长度。
在不同的字符集中，一个汉字和一个英文字母的字节长度都是不一样的。
SELECT # 在 uft-8 字符集中，一个英文和一个空格只占一个字符，一个汉字占三个字节 LENGTH(&amp;#39;Rainy 是憨憨&amp;#39;) AS 字符长度; CONCAT(str1,str2,&amp;hellip;) 将 str 1 与 str2 拼接起来，支持多个字符串。
SELECT CONCAT(last_name,&amp;#39;-&amp;#39;,first_name) AS 姓名 FROM employees; UPPER(str) 将 str 中的小写字母转为大写字母。
SELECT UPPER(&amp;#39;rainy&amp;#39;) AS 转大写 LOWER(str) 将 str 中的大写字母转为小写字母。
SELECT LOWER(&amp;#39;RAINY&amp;#39;) AS 转小写 SUBSTR(str FROM pos FOR len) 指定一个 str，从索引为 pot 的字符开始截取，一直截取到索引 len 的字符为止。若只有 pot ，则截取到最后，
SELECT SUBSTR(&amp;#39;臣世雨是个憨憨&amp;#39;,6) AS 截取至最后, SUBSTR(&amp;#39;臣世雨是个憨憨&amp;#39;,4,6) AS 截取至指定位置 INSTR(str,substr) 返回 substr 在 str 中第一次出现的索引，如果 str 中不存在 substr，则返回 0。</description>
    </item>
    
    <item>
      <title>MySQL 排序查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 22 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/</guid>
      <description>排序查询 语法 SELECT 查询列表 FROM 表名 WHERE 筛选条件 ORDER BY 排序列表 ASC DESC 升序/降序 特点  ASC 代表升序，DESC 代表降序，如果不写，则默认是升序。 支持单个字段、多个字段、表达式、函数、别名等。 一般放在查询语句的最后面，limit 语句除外。  按字段排序 查询员工信息，并按工资从高至低排序 SELECT * FROM employees WHERE salary # 降序 用 DESC ，升序用 ASC ORDER BY salary DESC; 按多个字段排序 查询员工信息，并先按工资升序，再按员工编号降序 如果有两种排序规则，若第一种排序规则中有相同的数据，那么这两个数据应该哪个在前，哪个在后呢？这时候会按照第二种排序规则进行排序，决定第一种排序规则中的相同数据的先后顺序。
SELECT *, salary AS 工资, employee_id AS 员工编号 FROM employees ORDER BY salary ASC,employee_id DESC; 按表达式排序 查询部门编号 &amp;gt;= 90 的员工信息，并按入职的先后顺序排序 SELECT * FROM employees WHERE department_id &amp;gt;= 90 # 降序 用 DESC ，升序用 ASC ORDER BY salary ASC; 按表达式排序 SELECT *, # 因为表中没有年薪这个字段，所以我们需要用表达式来计算每个员工的年薪 salary * 12*(1 + IFNULL(commission_pct,0)) AS 年薪 FROM employees ORDER BY salary * 12*(1 + IFNULL(commission_pct,0)) DESC; 按别名排序 查询员工的信息和年薪，并按年薪的高低排序 SELECT *, # 因为表中没有年薪这个字段，所以我们需要用表达式来计算每个员工的年薪 salary * 12*(1 + IFNULL(commission_pct,0)) AS 年薪 FROM employees # 用表达式所对应的别名来替代表达式，使得语句更好理解 ORDER BY 年薪 DESC; 按函数排序 查询远东的姓名和工资，并按姓的字节长度从多到少排序 SELECT LENGTH(last_name) AS 字节长度, last_name,salary FROM employees ORDER BY LENGTH(last_name) DESC;  </description>
    </item>
    
    <item>
      <title>启动 MySQL</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%90%AF%E5%8A%A8-mysql-/</link>
      <pubDate>Thu, 21 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E5%90%AF%E5%8A%A8-mysql-/</guid>
      <description>启动 MySQL 使用命令行 Window 操作系统中 Ctrl + Alt 打开 CMD，通过下面两条命令启动或关闭MySQL
net start mysql # 启动 MySQL net stop mysql # 关闭 MySQL 提示服务名无效 C:\Windows\system32&amp;gt;net start mysql 服务名无效。  请键入 NET HELPMSG 2185 以获得更多的帮助。 在 MySQL 安装目录下的 bin 目录下打开管理员的 cmd，并输入命令**.\mysqld.exe install**，回车即可：
D:\AppInstallPath\PhpStudy\phpstudy_pro\Extensions\MySQL5.7.26\bin&amp;gt;.\mysqld.exe install Service successfully installed. 使用 PHPStudy 首页，直接启动 MySQL即可，如果提示端口被占用，修改端口号即可。
登录服务端 隐藏密码登录 MySQL -h localhost -P 3306 -u root -p -h表示主机。
-P表示端口号。
-u表示用户名。
-p表示密码。
输入命令后 Enter。
MySQL -h localhost -P 3306 -u root -p Enter password: 输入密码，登录成功。</description>
    </item>
    
    <item>
      <title>MySQL 基础查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 06 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</guid>
      <description>基础查询 我们用的是名为 MyEmployees.sql 和 Girls.sql 的 SQL 文件。
语法 select 查询列表 from 表名 特点  查询列表可以是表中的字段、常量、表达式、函数。 查询的结果是一个虚拟的表格。  查询表中的单个字段 SELECT last_name FROM employees; 查询表中的多个字段 会以特定的顺序显示我们查询的字段。
SELECT last_name,first_name,email FROM employees; 查询表中的所有字段 会以表原本的字段顺序显示我们查询的字段
SELECT * FROM employees; 区分关键字和字段名 MySQL 中，我们可以用一对着重号**``**来区 MySQL 中的分字段和关键字
SELECT `NAME` FROM rainy; 查询常量 SELECT &amp;#39;john&amp;#39;; 查询表达式 SELECT 100 * 57; 起别名 自定义字段名（列名），起别名可以使我们更好的理解表。
有时候，字段名可能会是一些表达式，会让输出的虚拟表达中的字段名难以理解，这时候，我们可以为其设置一个便于理解的字段名。
表达式可以用这个表达式的别名来代替该表达式 当我们为一个表达式定义了一个别名，如果后续我们需要用到这个表达式，那么我们可以不用再重复书写表达式，直接写别名即可。
SELECT *, # 因为表中没有年薪这个字段，所以我们需要用表达式来计算每个员工的年薪 salary * 12*(1 + IFNULL(commission_pct,0)) AS 年薪 FROM employees # 用表达式所对应的别名来替代表达式，使得语句更好理解 ORDER BY 年薪 DESC; 如果要查询的字段中有重名的情况，也可以使用别名来区分。</description>
    </item>
    
    <item>
      <title>MySQL 条件查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 06 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</guid>
      <description>条件查询 语法 select # 3、查询 	QueryList from # 1、寻找库中有无指定名 TableName WHERE # 2、筛选满足条件的字段 	Conditional Expression; 分类  按条件表达式查询，主要用条件运算符 按逻辑表达式查询，主要用逻辑运算符 模糊查询，主要用模糊关键字  &amp;gt; 大于。
查询工资大于 12000 的员工信息 SELECT * FROM employees WHERE salary &amp;gt; 12000; &amp;lt; 小于。
= 等于。
&amp;lt;&amp;gt; 不等于，也可以用 !=，但是在 MySQL 中 建议中 &amp;lt;&amp;gt;。
查询部门编号不等于 90 号的员工名和部门编号 SELECT last_name, department_id FROM employees WHERE department_id &amp;lt;&amp;gt; 90; &amp;gt;= 大于等于。
&amp;lt;= 小于等于。</description>
    </item>
    
    <item>
      <title>MySQL 语法规范</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 06 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</guid>
      <description>语法规范   MySQL 的 SQL语法不区分大小写，但建议关键i大写，表名，列名小写。
  每条命令结尾必须使用英文的分号;结尾，当然也可以用其他的，比如\g。
  每条命令根据需要，可以进行缩进或换行。
mysql&amp;gt; show  -&amp;gt; databases;   注释
# 单行注释 -- 单行注释 /* 多行注释 */覆   </description>
    </item>
    
    <item>
      <title>MySQL 逻辑查询</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E9%80%BB%E8%BE%91%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 06 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dql/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/%E9%80%BB%E8%BE%91%E6%9F%A5%E8%AF%A2/</guid>
      <description>逻辑查询 AND 与运算符，也可以用 &amp;amp;&amp;amp;，但是在 MySQL 中，建议用 and。
当表达式都为 true 时，结果才为 true，否则结果为 false。
查询工资在 10000-20000 之间的员工名、工资以及奖金 SELECT last_name, salary, commission_pct FROM employees WHERE salary &amp;gt;= 12000 AND  salary &amp;lt;= 20000; OR 或运算符，但也可以用 ||，但是在 MySQL 中，建议用 or。
当表达式都为 false 时，结果才为 false，否则结果为 true。
查询部门编号不在 90 - 100 之间，或者工资高于 15000 的员工信息 SELECT * FROM employees WHERE # 筛选部门 id 小于 90 或 大于 100 d department_id &amp;lt; 90 OR department_id &amp;gt; 110 OR  salary &amp;gt; 15000; NOT 非运算符，但也可以用 !</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/mysql/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/mysql/</guid>
      <description>MySQL MySQL 属于 Oracle。
MySQL 的优点  成本低：开源数据库，完全免费，社区庞大。 性能高：执行速度快。 简单：体积小，简单易用。 跨平台：支持多种操作系统。  </description>
    </item>
    
    <item>
      <title>MySql DBMS</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/dbms/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/dbms/</guid>
      <description>DBMS 数据库管理系统（Datebase Management System），我们可以通过 DBMS 来创建或操作数据库。
常见的数据库管理系统：MySQL、Oracle、DB2、SqlServer
基于共享文件系统 比如微软的 Access
基于C/S架构 基于客户机/服务器的 DBMS。需要安装客户端和服务端
比如 MySQL、Oracle、SqlSever。</description>
    </item>
    
    <item>
      <title>MySQL SQL</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/sql/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/sql/</guid>
      <description>SQL 结构化查询语言（Structure Query Language），专门用来对数据库进行一些操作的语言。
SQL 的优点 SQL 语言不是某个特定 DBMS 所专有的语言，相反，近乎所有的 DBMS 都支持 SQL。
SQL的语言分类 DQL 数据查询语言 select。
DML 数据操作语言，用于对数据库表中的数据进行操作。
SELECT、INSERT、UPDATE、DELETE、CALL、EXPLAIN PLAN、LOCK TABLE
DDL 数据定义语言，用于对数据库、表层面进行操作。
CREATE、ALTER、DROP、TRUNCATE、COMMENT、GRANT、REVOKE
DCL 事务控制语言COMMIT、SAVEPOINT、ROLLBACK、SET TRANSACTION</description>
    </item>
    
    <item>
      <title>MySQL 配置文件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>配置文件 在 MySQL 根目录中，有一个my.ini配置文件。
客户端配置 [mysql]是MySQL客户端的配置。
[mysql] default-character-set=utf8 服务端配置 [mysqld] port=3306 # MySQL 服务运行时的端口号 basedir=D:/AppInstallPath/PhpStudy/phpstudy_pro/Extensions/MySQL5.7.26/ # MySQL 程序所存放路径,常用于存放 MySQL 启动、配置文件、日志等 datadir=D:/AppInstallPath/PhpStudy/phpstudy_pro/Extensions/MySQL5.7.26/data/ # MySQL数据存放文件(极其重要) character-set-server=utf8 # 数据库和数据库表的默认字符集。(推荐utf8,以免导致乱码) default-storage-engine=MyIsam # MySQL 的存储引擎  # ...... </description>
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://yxzi.xyz/mynote/4-specialty/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>What is 数据库 数据库（Database），通俗的说，它存储了一系列有组织的数据，像一个“仓库”，简称 DB。
为什么要学习数据库？ 数据库可以实现数据的持久化。
使用完整的管理系统对数据进行同意管理，易于查询。
数据库的特点  数据不是直接放到数据库中的，而是先将数据放到表中，再将表放到库中。 一个数据库中可以有多个表，每个表都有一个的名字，用来标识自已，且表名具有唯一性。 表具有一些特性，这些特性定义了数据在表中如何存储。 表由列（字段）组成，每个表都有一个或多个列组成。 表中的数据是按行储存的。  </description>
    </item>
    
  </channel>
</rss>
