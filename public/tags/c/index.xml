<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Rainy · Blog</title>
    <link>https://yxzi.xyz/Sub/Blog/tags/c/</link>
    <description>Recent content in C on Rainy · Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 03 Oct 2021 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/Sub/Blog/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C break</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/break/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/break/</guid>
      <description>break 用于终止循环或退出 switch.
不能直接用于if，除非if是循环的一个子句。</description>
    </item>
    
    <item>
      <title>C printf</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/printf/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/printf/</guid>
      <description>printf 用于将变量的内容输出到显示器.
直接输出 1printf(&amp;#34;字符串&amp;#34;); print(&amp;ldquo;输出控制符&amp;rdquo;,参数) 1int i = 10;//将数值 10 的二进制代码储存到变量 i 中 。 2printf(&amp;#34;%o&amp;#34;, a);//将变量 i（数值 10） 的二进制代码以八进制输出，a 为参数。 printf(&amp;ldquo;输出控制符1 输出控制符2&amp;rdquo;,参数1,参数2) 1 int a = 10; 2 int i = 15; 3 printf(&amp;#34;%d %d\n&amp;#34;, a, i);//控制符和参数必须一一对应。 printf(&amp;ldquo;输出控制符 非输出控制符&amp;rdquo;,参数) 1int a = 10;//将数值 10 的二进制代码储存到变量 i 中 。 2printf(&amp;#34;%o\n&amp;#34;,a);//将变量 i（数值 10 的二进制代码以八进制输出；\n 为非输出控制符。 </description>
    </item>
    
    <item>
      <title>C scanf</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/scanf/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/scanf/</guid>
      <description>scanf 通过键盘将数据输入到变量中。
将从键盘输入的字符转化为输入控制符所规定类型的数据，然后存入以输入参数的值为地址的变量中。
使用 scanf 之前先使用 printf 提示用户以什么样的方式输入内容。
scanf 中使用非输入控制符时，尽量使用空格，不建议使用其他的符号。
scanf(&amp;ldquo;输入控制符&amp;rdquo;,输入参数) 1int i; 2scanf(&amp;#34;%d&amp;#34;,&amp;amp;i);//i&amp;amp; 表示变量 i 的地址，&amp;amp; 是一个取地址符，也就是将输入的整数类型的值放入到变量 i 中。 3printf(&amp;#34;%d\n&amp;#34;,i); scanf(&amp;ldquo;非输入控制符 输入控制符&amp;rdquo;,输入参数) 1int i; 2scanf(&amp;#34;z%d&amp;#34;,&amp;amp;i);//非输入控制符 z （z 可以是任意值）必须同输入控制符一起输入 。 3printf(&amp;#34;i = %d\n&amp;#34;,i); </description>
    </item>
    
    <item>
      <title>C 循环控制</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/</guid>
      <description>循环控制 某些代码被重复执行。
for 执行 1，判断 2，当 2 为 true 时则执行 A，之后再执行 3，此后一直判断 2，直到 2 为 false 时并结束循环；如果 2 为 false，则直接结束循环。
1for(1; 2; 3) 2{ 3 A; 4} 其中 1 只执行一次。
3 执行完后才意味着一次 for 循环执行完毕。
3 执行完后一定会再执行一次 2，且不管表达式2的结果为 true 或 false 都会执行一次 2。
1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3	int sum = 0; 4	for (int i = 1;i &amp;lt; 10;i++) 5	printf(&amp;#34;%d\n&amp;#34;, i); 6	//0 - 10 的自然数。 7} 1 - 10 所有奇数之和 1#include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>C 自增与自减</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E8%87%AA%E5%A2%9E%E4%B8%8E%E8%87%AA%E5%87%8F/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E8%87%AA%E5%A2%9E%E4%B8%8E%E8%87%AA%E5%87%8F/</guid>
      <description>自增与自减 前自增**++i**与后自增**i++**.
异同 相同 最终都会使 i 的值加 1.
不同 i++ 返回原来的值，
++i 返回加 1 后的值。
1#include &amp;lt;stdio.h&amp;gt;2 3int main() 4{ 5 int a,b,c,d; 6 a = b = 3; 7 c = a++; 8 // return 3 9 d = ++b; 10 // return 4 11 printf(&amp;#34;c = %d\nd = %d&amp;#34;,c,d); 12 return 0; 13} </description>
    </item>
    
    <item>
      <title>C 运算符</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>运算符 三目运算符 a ? b : c
相当于 if 语句
1 if (a) 2 b; 3 else 4 c 5 return 0; 逗号表达式 (a,b,c,d)
从左向右执行，表达式最终的值是d 的值。
1 int i; 2 int c = 2; 3 i = (c++, ++c, c + 2, c - 3); 4 // 执行了 c++ 与 ++c 后，c 变为了 4，然后执行 c + 2， 5 // 但此时并没有将 c + 2 的结果赋给 c，因此此时的 c 依旧为 4， 6 // 再 c - 3，则 i = 1.</description>
    </item>
    
    <item>
      <title>C 选择控制</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%80%89%E6%8B%A9%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%80%89%E6%8B%A9%E6%8E%A7%E5%88%B6/</guid>
      <description>选择控制 某些代码可能执行，也可能不执行，有选择的执行某些代码。
if 在程序当中,并不是所有的语句都是自上而下依次的执行，有时候会依据条件来选择性的执行某段代码，这个时候就需要用到 if 语句。
如果 1 为真，则执行 A；如果 1 为假，则不执行 A。
1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3	if (1) 4	A； 5} 1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3	if (2 &amp;gt; 1) 4	printf(&amp;#34;if 语句为 true\n&amp;#34;); 5} if 语句默认只能控制 A，不能控制B（即无论 1 为 true 还是 false， B 都会执行）。
1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3	if (1) 4	A; 5	B; 6} 1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3	if (2 &amp;gt; 1) 4	printf(&amp;#34;被 if 语句控制\n&amp;#34;); 5	printf(&amp;#34;不被 if 语句控制\n&amp;#34;); 6} if 语句默认只能控制一个 A，如果想控制多个语句（A 和 B），就必须将 A 和 B 用 {} 括起来。</description>
    </item>
    
    <item>
      <title>C 顺序控制</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>顺序控制 从上到下的执行代码，中间没有任何判断或跳转。</description>
    </item>
    
    <item>
      <title>C 预备知识</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-%E4%B8%93%E4%B8%9A/%E8%AF%AD%E8%A8%80/c/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</guid>
      <description>预备知识 六大硬件的关系 双击（操作系统给用户提供的一个操作）打开一个存放在硬盘中的视频。
因为 CPU 并不能直接处理硬盘上的数据，所以会将硬盘上的视频数据拷贝到内存中。
CPU 再对内存中的数据进行处理。
因为 CPU、内存、显卡（控制显示器的正确显示）、硬盘都是安装在主板上的，因此主板是一个组织它们如何有效运行的硬件。
程序是如何运行的 编译 —— 建立链接（生成一个格式为 exe 的可执行文件）—— 调用操作系统，操作系统再调用 CPU 并执行这个 exe 文件，最后会在显示器上看到这个软件的运行结果 。
软件不能直接控制硬件。
什么是变量 变量的本质是将一个空闲的内存空间与某个变量产生联系。
1int a; 2//调用操作系统在内存条中创建一个空的内存空间，并将变量 a 自动分配到该内存空间中，使得变量 a 与该内存空间的地址编号产生一个一一对应的关系 3a = 3; 4//将 3 放入变量 a 的内存空间内。 变量为什么要初始化 释放 指的是某个内存空间可以被另外的程序使用。
垃圾值 垃圾值（随机值）指的是其他程序使用某个储存空间所遗留下来的值。VC++ 若发现某个变量的内存空间内有垃圾值（即该变量没进行初始化），它会将该垃圾值替换为填充值，也就是 -858993460。目的是为了避免开发者将垃圾值当做一个正常值来使用，也就是提醒开发者这个变量没进行初始化。因此，变量若未进行初始化，该变量的内存空间内存放的是一个垃圾值。
软件运行与内存的关系 一个软件在运行前需要请求操作系统将硬盘中的数据拷贝到内存中，并使用 CPU 启动该软件。
一个软件运行时，它所占的储存空间不会再分配给其他程序使用。
当软件运行完毕后，操作系统将释放该储存空间，（但操作系统并不会清空该内存空间中软件残留下来的数据，所以下次使用该内存空间时，很可能该内存空间中存在着其他软件所残留的垃圾数据。），以便再次分配给其他软件使用。
进制 B 表示二进制、O 表示八进制、D 表示十进制、H 表示十六进制。
N 进制表示逢 N 进一。
用几种不同的进制表示同一个数，虽然使用的进制不一样，但都表示的同一个数，只是外部的表现形式不一样而已。
二进制的规律  1 = 1 10 = 21 100 = 22 1000 = 23 10000 = 24  给定一个 N 进制的数 25，转换为十进制为：5 + 2 * N。</description>
    </item>
    
  </channel>
</rss>
