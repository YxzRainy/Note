<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PFP on Rainy · Blog</title>
    <link>https://yxzi.xyz/tags/pfp/</link>
    <description>Recent content in PFP on Rainy · Blog</description>
    <image>
      <url>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 May 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/tags/pfp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP 转换数据类型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>转换数据类型 在很多的条件下，需要将指定的数据类型，转换成目标数据类型。
自动转换 系统根据需求判定并转换（用的比较多，效率偏低）。
$a = &amp;#39;abc1.1.1&amp;#39;; $b = &amp;#39;1.1.1abc&amp;#39;;  // 0 + 1.1 echo $a + $b; 强制转换 它会先复制一份需要被转换的数据，然后在对这份被复制的数据进行处理（不会处理实际的数据，它处理的是自己拷贝的）。
() 在变量之前增加一个 ()，括号中的参数为目标数据类型。
$a = &amp;#39;我是字符串呀&amp;#39;; $b = 123;  // 强制转换，使 a 中的数据变为浮点型 // 但 a 本身的数据并没有变为 float echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;, (float)$a; echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; // 0 echo &amp;#39;a = &amp;#39; . $a; //string echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;;  echo &amp;#39;此时 a 的数据类型依旧为：&amp;#39; . gettype($a); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#39;&amp;lt;hr/&amp;gt;&amp;#39;; settype() 设定数据类型，但与前面的强制转换()不同，它会直接改变数据本身。
&amp;lt;?php $a = &amp;#39;我是字符串呀&amp;#39;; $b = 123;  // 强制设置数据类型 //true var_dump(settype($a, &amp;#39;int&amp;#39;)); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; // a 的数据类型直接被设置成了 integer，和强制转换大不一样 echo &amp;#39;a 的数据类型为：&amp;#39; .</description>
    </item>
    
    <item>
      <title>PHP 判断数据类型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>判断变量类型 is_XX() 判断一个变量是否为指定数据类型，最终返回这个变量所保存数据的数据类型。
Bool 类型不能用 echo 来查看，需要使用 var_dump() 查看。
// true var_dump(is_int($a)); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;;  // false var_dump(is_int($b)); echo &amp;#39;&amp;lt;hr/&amp;gt;&amp;#39;; gettype() 获取变量的类型，得到的是该类型对应的字符串。
// string echo &amp;#39;a 的数据类型为：&amp;#39; . gettype($a); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; // integer echo &amp;#39;b 的数据类型为：&amp;#39; . gettype($b);  echo &amp;#39;&amp;lt;hr/&amp;gt;&amp;#39;; </description>
    </item>
    
    <item>
      <title>PHP 文件包含</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</guid>
      <description>文件包含 在一个 PHP 脚本中，将另一个文件的代码插入到当前文件，并使用另一个文件中的方法、变量等等。
用于实现代码模块化
包含方式 include() 一般放在程序的流程控制中，当程序执行时碰到才会引用，简化程序的执行流程。
include 引入的文件有错误时，会继续执行，并返回一个警告。
include once() 检查文件有没有已经在前面引入过了，如果有了就不再引入了
require() 一般放在 PHP 文件的最前面，程序在执行前就会先导入要引用的文件。
require 引入的文件有错误时，执行会中断，并返回一个致命错误；
require onec() </description>
    </item>
    
    <item>
      <title>PHP 流程控制代替语法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%BB%A3%E6%9B%BF%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%BB%A3%E6%9B%BF%E8%AF%AD%E6%B3%95/</guid>
      <description>流程控制代替语法 代替 for PHP 本身是嵌入到 HTML 中的脚本语言，因此，我们可以这样书写：
// 生成了九个一级标题元素。 &amp;lt;?php for ($i = 1; $i &amp;lt; 10; $i++) { ?&amp;gt;&amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt; &amp;lt;?php } ?&amp;gt; 但是，如果我们以上面这种方式将 PHP 代码嵌入到 HTML 中，那么{}给我们所带来的观感是非常不好的。
因此， PHP 提供了一种代替{}的机制：
&amp;lt;?php for ($i = 1; $i &amp;lt; 10; $i++) : ?&amp;gt;&amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt; &amp;lt;?php endfor; ?&amp;gt; 同样的，除了for，PHP 还支持 if、switch、while、foreach：
&amp;lt;?php if (1 &amp;lt; 2) : ?&amp;gt;&amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt; &amp;lt;?php endif; ?&amp;gt; </description>
    </item>
    
    <item>
      <title>PHP 运算符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>运算符 错误抑制符 在 PHP中 有一些错误可以提前预知，但是这些错误可能无法避免，但又不希望报错给用户看，可以使用错误抑制符@()处理。
&amp;lt;?php $a = 10; $b = 0; @($c = $a / $b);  echo $c; 错误抑制符通常在生产环境（上线）会用到，在开发的时候不会用系统本身最好没有任何。</description>
    </item>
    
    <item>
      <title>PHP 变量</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/php/%E5%8F%98%E9%87%8F/</link>
      <pubDate>Thu, 10 Mar 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/php/%E5%8F%98%E9%87%8F/</guid>
      <description>变量 预定义变量 指的是系统提前定义的变量，存储许多需要用到的数据，并且，预定义变量都 是数组。 $_ GET：获取所有表单以 get 方式提交的数据。 $_ POST：POST 提交的数据都会保存在此。 $_ REQUEST：GET 和 POST 提交的都会保存。 $GLOBALS：PHP 中所有的全局变量。 $_ SERVER：服务器信息。 $_ SESSION：session 会话数据。 $_ COOKIE：cookie 会话数据。 $_ ENV：环境信息。 $_ FILES：用户上传的文件信息。
可变变量 // 找到 $a，将其赋值为 b， // 将 $$a 前面的 $ 符号与前面的结果结合，得到了 $b， $a = &amp;#39;b&amp;#39;; // 最后再将 $b 赋为 bb $b = &amp;#39;bb&amp;#39;; echo $$a; 变量传值 指的是将一个变量的值赋给另外一个变量。
变量传值一共有两种方式：值传递和引用传递。 值传递：将一个变量的值复制一份， 然后将新的值赋给另外一个变量（两个变量没有关系）。 引用传递：将一个变量的值的内存地址，传递给另外一个变量，两个变量的内存地址所指向的是同一块内存空间（两个变量所指向的都是同一个值，他们互相影响，其中一个变量被改变，另一个也会跟着被改变）。
//值传递 $a = 10; $b = $a; $b = 66; echo $a, &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;, $b, &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;;  echo &amp;#39;&amp;lt;hr&amp;gt;&amp;#39;;  // 引用传递 $c = 3; $d = &amp;amp;$c; $c = 5; echo $c, &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;, $d, &amp;#39;&amp;lt;br/&amp;#39;; 在内存中，通常有以下几个分区：</description>
    </item>
    
  </channel>
</rss>
