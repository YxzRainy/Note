<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Rainy · Blog</title>
    <link>http://yxzi.xyz/Sub/Blog/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Rainy · Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Apr 2022 06:00:00 +0000</lastBuildDate><atom:link href="http://yxzi.xyz/Sub/Blog/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue What is Vue</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/frame/vue/vue-2/what-is-vue/</link>
      <pubDate>Sun, 10 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/frame/vue/vue-2/what-is-vue/</guid>
      <description>What is Vue 官方答复</description>
    </item>
    
    <item>
      <title>JavaScript DOM</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/dom/dom/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/dom/dom/</guid>
      <description>DOM DOM （文档对象模型）中提供了一系列的方法，DOM 是这一些列方法的统称。这些方法使得我们可以操作 HTML 和 XML。
DOM 就像一棵节点树一样，从文档的根（document），依次分支展开，每一个元素，都可以看作是树的一个节点，每一个元素都是一个对象。
使用 DOM 操作文档中的元素时，必须先加载整个 HTML 文档（/body 之前的代码 ），再加载 JS 文件；因为没有完整的 DOM 模型，所以 DOM 的一些操作就无法完成，会导致报错。</description>
    </item>
    
    <item>
      <title>JavaScript ES5 严格模式</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/es5-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/es5-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid>
      <description>ES5 严格模式 ECMAScript 是 JavaScript 的一个标准。
ES5 严格模式指的是：我们应该对 ES3 和 ES5 产生冲突的部分使用哪个版本的规则？
当我们开启 ES5 严格模式后，那么 ES3 和 ES5 产生冲突的部分会遵循 ES5 的规则，否则会使用 ES3（浏览器默认遵循 ES3 的规则）
&amp;ldquo;use strict&amp;rdquo; 使某一作用域内的代码不在兼容 ES3 中的一些不规则的语法，使用全新的 ES5 的语法。
如何启用 ES5 严格模式 在作用域顶端添加语句&amp;quot;use strict&amp;quot;即可，启用之后，ES3 中的一些方法就无法使用了。比如arguments的callee属性：
&amp;#39;use strict&amp;#39;; function test() { 	console.log(arguments.callee); } test(); 浏览器会出现以下错误：
Uncaught TypeError: &amp;#39;caller&amp;#39;, &amp;#39;callee&amp;#39;, and &amp;#39;arguments&amp;#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them 同样，也可以使某一局部作用域支持 ES5，而其他作用域支持 ES3：</description>
    </item>
    
    <item>
      <title>JavaScript Try Catch</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%8E%A7%E5%88%B6%E6%B5%81/try-catch/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%8E%A7%E5%88%B6%E6%B5%81/try-catch/</guid>
      <description>Try Catch 为了容错，防止程序报错后引起整个程序的终止运行
try 中有错误信息 就会执行 catch 中的代码，没有这不会执行 catch 之中的代码
catch 有一个参数，参数名自定义 比如 e
那么这个 e 就会有两个参数 e.name 和 e.message
Error.name EvalError：eval()的使用与定义不一致
RangeError：数值越界
ReferenceError：非法或不能识别的引用数值，比如当一个变量未经声明就使用或者一个函数未定义就调用的时候，会出现 ReferenceError。
SyntaxError：语法解析错误
TypeError：操作数类型错误
URlError：URI 处理函数使用不当</description>
    </item>
    
    <item>
      <title>JavaScript with</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%85%B6%E4%BB%96/with/</link>
      <pubDate>Mon, 04 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%85%B6%E4%BB%96/with/</guid>
      <description>with with(ogj)函数可以改变自身代码块中的代码的作用域链，它会将 obj 放到它自己代码块中的代码的作用域链的最顶端，也就是会先去 obj 的作用域中去寻找变量。
ES5 中不支持 with 函数。
 var obj = {  age: &amp;#34;456&amp;#34;,  name: &amp;#34;your&amp;#34;, }  function test() {  var age = &amp;#39;123&amp;#39;;  var name = &amp;#39;my&amp;#39;;  with (obj) {  // 下面的输出不会返回自身作用域（test 函数的作用域）下的 age 和 name。  // 只会返回全局作用域下的 obj 对象的 age 和 name，因为作用域被 with 函数改变了。  console.log(age);  console.log(name);  } } test(); 替代链式调用 with (document) {  write(&amp;#34;with 调用&amp;#34; + &amp;#34;&amp;lt;br/&amp;gt;&amp;#34;) }  //等同于 document.</description>
    </item>
    
    <item>
      <title>Echarts 文字样式</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sat, 13 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F/</guid>
      <description>文字样式 fontSize: 11, color: &amp;#34;#eee&amp;#34;, textShadowColor: &amp;#34;rgba(0, 0, 0, 1)&amp;#34;, textShadowBlur: 10, textShadowOffsetX: 1, textShadowOffsetY: 1, 图形样式 barBorderRadius: 2, shadowColor: &amp;#34;rgba(0, 0 0, 0.3)&amp;#34;, shadowBlur: 3, shadowOffsetX: 1, shadowOffsetY: 1, </description>
    </item>
    
    <item>
      <title>快速使用 Echarts</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 13 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>快速使用 Echarts  // 快速使用 Echcarts (function () {  // 1. 实例化对象  var myChart = echarts.init(document.querySelector(&amp;#34;&amp;#34;));  // 2.配置   // 3. 把配置给实例对象  myChart.setOption(option);  // 4. 让图表跟随屏幕自动的去适应  window.addEventListener(&amp;#34;resize&amp;#34;, function () {  myChart.resize();  }); })(); </description>
    </item>
    
    <item>
      <title>Echarts 遇到的错误</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 06 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
      <description>遇到的错误 今天使用 Echarts 绘制地图时，浏览器控制台出现以下错误：
Uncaught DOMException: Failed to execute &amp;#39;drawImage&amp;#39; on &amp;#39;CanvasRenderingContext2D&amp;#39;: The image argument is a canvas element with a width or height of 0. 如何解决
只需要给需要被绘制的元素设置width和height Css 属性即可。</description>
    </item>
    
    <item>
      <title>Echarts 地图</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Tue, 02 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%9C%B0%E5%9B%BE/</guid>
      <description>地图 常用配置 地图样式 配置 option —&amp;gt; geo —&amp;gt; itemStyle 下的normal .
normal: {  //面积区域颜色  areaColor: &amp;#34;#008C8C&amp;#34;,  // 区域分界线颜色  borderColor: &amp;#34;rgba(43, 196, 243, 1)&amp;#34;,  //区域分界线  borderWidth: 1 }, </description>
    </item>
    
    <item>
      <title>Echarts 折线图</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%8A%98%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%8A%98%E7%BA%BF%E5%9B%BE/</guid>
      <description>Echarts 折线图 图表类型 在series下配置type.
type: &amp;#39;line&amp;#39;, 常用配置 标注图表区域 标记图表中某个范围的数据。
在series下配置markArea
markArea: {  data: [  [  {  xAxis: &amp;#39;李宁&amp;#39;  },  {  xAxis: &amp;#39;安踏&amp;#39;  }  ],  [  {  xAxis: &amp;#39;耐克&amp;#39;   },  {  xAxis: &amp;#39;阿迪&amp;#39;  }  ],  ], }, 线条是否平滑显示 在series下配置smooth
smooth: true, 线条样式 在series下配置lineStyle
lineStyle: {  color: &amp;#39;red&amp;#39;,  type: &amp;#39;dashed&amp;#39; } 线条区域样式 在series下配置areaStyle</description>
    </item>
    
    <item>
      <title>Echarts 柱状图</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%9F%B1%E7%8A%B6%E5%9B%BE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E6%9F%B1%E7%8A%B6%E5%9B%BE/</guid>
      <description>Echarts 柱状图 特点 柱状图描述的是分类数据，呈现的是每一个分类中有多少，
通过柱状图，可以很清晰的看出每个分类数据的排名情况。
基本结构 引入 echarts.js 文件, DOM 容器，初始化对象，设置 option。
var myChart = echarts.init(document.getElementById(&amp;#39;main&amp;#39;)); var xArr = [&amp;#39;李宁&amp;#39;, &amp;#39;安踏&amp;#39;, &amp;#39;耐克&amp;#39;] var yArr = [30, 25, 55] var option = {  title: {  text: &amp;#39;运动品牌科技水平&amp;#39;,  link: &amp;#39;https://yxzi.xyz/&amp;#39;  }, }; myChart.setOption(option) X 轴数据 在option下配置 X 轴类型和数据。
xAxis: {  type: &amp;#39;category&amp;#39;,  data: xArr }, Y 轴数据 在option下配置 Y 轴的类型。
yAxis: {  type: &amp;#39;value&amp;#39;, }, 图表类型 在series下配置type.</description>
    </item>
    
    <item>
      <title>Echarts 通用配置</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 30 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>Echarts 通用配置 title 图表的标题。
标题的样式 在title下配置textStyle、
textStyle: {  color: &amp;#39;#008c8c&amp;#39;, }, 标题的边框 在title下配置：
borderWidth: 5, borderColor: &amp;#39;#008c8c&amp;#39;, borderRadius: 3, 标题的位置 在title下配置：
left: 10, top: 20, tooltip 提示框组件
用于配置鼠标滑过或点击图表时的提示框。
显示框的触发范围 在tooltip下配置trigger
trigger: &amp;#39;axis&amp;#39;, 显示框触发方式 在tooltip下配置triggerOn
triggerOn: &amp;#39;click &amp;#39;, 自定义提示框内容 字符串模板
formatter: &amp;#39;{b} 的科技水平是 {c}&amp;#39; 回调函数
formatter: function (arg) {  return arg[0].name + &amp;#39;的运动科技水平是&amp;#39; + arg[0].data } toolbox 图表的工具栏。
打开工具栏配置项 feature: {} 导出图片 以图片的形式导出图表
saveAsImage: {}, 数据视图工具 可以展现当前图表所用的数据，编辑后可以动态更新。
dataView: {}, 还原所有配置项 restore: {}, 数据区域的缩放 dataZoom: {}, 图表类型的动态切换 magicType: {  type: [&amp;#39;bar&amp;#39;, &amp;#39;line&amp;#39;] } legend 图表的图例组件。它展现了不同系列所对应不同的颜色和名字。可以通过点击某个图例来控制对应的系列显示与否。</description>
    </item>
    
    <item>
      <title>var 和 let 的区别</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%A3%B0%E6%98%8E/var-%E5%92%8C-let-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 28 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%A3%B0%E6%98%8E/var-%E5%92%8C-let-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>var 和 let 的区别 作用域不同 var 是函数作用域，let 是块作用域。
在函数中声明了 var，整个函数内都是有效的，比如说在 for 循环内定义的一个 var 变量，实际上其在 for 循环以外也是可以访问的
而 let 由于是块作用域，所以如果在块作用域内定义的变量，比如说在 for 循环内，在其外面是不可被访问的，所以 for 循环推荐用 let
let 不能在定义之前访问该变量，但是 var 可以。 let 必须先声明，在使用。而 var 先使用后声明也行，只不过直接使用但没有定义的时候，其值是 undefined。var 有一个变量提升的过程，当整个函数作用域被创建的时候，实际上 var 定义的变量都会被创建，并且如果此时没有初始化的话，则默认为初始化一个 undefined
let 不能被重新定义，但是 var 是可以的 </description>
    </item>
    
    <item>
      <title>Echarts 基本配置</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 27 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>初始化 初始化一个 Echarts 实例，参数是一个 dom，它决定了图表最终呈现的位置。
var myChart = echarts.init(document.getElementById(&amp;#39;main&amp;#39;)); 绘制图表 用一个对象作为配置项，绘制整个图表。
var option = {} 标题 title: {  text: &amp;#39;运动品牌科技水平&amp;#39;,  //标题文本点击tiao超链接  link: &amp;#39;https://yxzi.xyz/&amp;#39; }, X轴 xAxis: {  // 轴类型为类目轴  type: &amp;#39;category&amp;#39;,  // 类目轴的类别名称  data: [&amp;#39;李宁&amp;#39;, &amp;#39;安踏&amp;#39;, &amp;#39;匹克&amp;#39;, &amp;#39;迪卡侬&amp;#39;, &amp;#39;耐克&amp;#39;, &amp;#39;阿迪达斯&amp;#39;] }, Y轴 yAxis: {  // 轴类型为数值轴，数值轴是不需要设置data属性，  // 因为数值轴针对xAxis的data中的类别名称去series的data中去寻找对应的数据  type: &amp;#39;value&amp;#39;, }, series 一个系列配置。
series: [  {  // 表示下面data中的数据表示的是哪一方面的数据，这里表示的是科技水平  name: &amp;#39;科技水平&amp;#39;,  // 定义图标的类型，这里是柱状图  type: &amp;#39;bar&amp;#39;,  // xAxis 中与类目相对应的数据  data: [22, 15, 12, 15, 80, 40]  }  ] 将配置项设置给 Echarts 实例对象 myChart.</description>
    </item>
    
    <item>
      <title>Echarts 是什么</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/echarts-%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 27 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/echarts/echarts-%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>Echarts 是什么 ECharts 是一个使用 JavaScript 实现的开源可视化库，兼容性强，
底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。
使用 Echarts 的时候，只需要更改配置项即可。</description>
    </item>
    
    <item>
      <title>JavaScript arguments</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/arguments/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/arguments/</guid>
      <description>arguments 它是一个与函数的实参有映射关系的数组类对象。
arguments 的属性 Callee 该属性包含当前正在执行的函数。在哪个函数中调用的方法 arguments.calle，该 calle 中就包含这个函数的函数体。
注意 arguments 对象是所有（非箭头）函数中都可用的局部变量。你可以使用 arguments 对象在函数中引用函数的实参；此对象包含传递给函数的每个实参，第一个实参的索引为 0。
arguments 对象不是一个 Array ；但它类似于 Array，但除了有 length 属性和索引的特性之外没有任何其他 Array 属性。</description>
    </item>
    
    <item>
      <title>JavaScript eval</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/eval/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/eval/</guid>
      <description>eval eval()函数会将传入的字符串当做 JavaScript 代码来执行。
在 JavaScript 中，有一句话叫：
eval 是魔鬼。
console.log(eval(&amp;#39;2 + 2&amp;#39;)); </description>
    </item>
    
    <item>
      <title>JavaScript function</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/function/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/function/</guid>
      <description>function 地方</description>
    </item>
    
    <item>
      <title>JavaScript isNaN</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isnan/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isnan/</guid>
      <description>isNaN isNaN(value) 用于判定 value 是否为 NaN，是则返回 true，否则返回 false。
如果 value 不是 Number 类型，那么该函数会用 Number() 方法将 value 隐式转换，然后再判断转换后的结果是否为 NaN。因此，被测试的值在被强制转换成数值时会不会返回 IEEE-754 中所谓的不是数值，隐式转换调用的都是显式转换方法。
返回 false 的值  0 除以 0 NaN undefined {}（空对象）  </description>
    </item>
    
    <item>
      <title>JavaScript Math</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/math/</guid>
      <description>Math 它是一个内置对象，它拥有一些数字常数属性和数学函数方法，它不是一个函数对象。
引用圆周率的写法是 Math.PI，调用正余弦函数的写法是 Math.sin(x)，x 是要传入的参。
计算时精度不准 0.14 * 100 = 14.000000000000002；0.1 + 0.2 = 0.30000000000000004；这些运算后的值都是因为 js 计算精度不准的导致。
在 js 中整数和浮点数都属于 Number 数据类型，所有数字都是以 64 位浮点数形式储存。JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数，计算机进行计算的时候，会把数字转换为二进制，进行运算之后再转换为十进制，但是运算过程中小数部分最多支持 52 位，就会出现运算精度不准的问题。
1000000000000001 + 1000000000000001 = 2000000000000002，即在 JavaScript 中，可正常计算范围在小数点前 16 位与后 16 位。
function One() { 	for (var c = 0; c &amp;lt; 18; c++) { 	var d = Math.random().toFixed(2) * 100; 	// 首先取 0-1 的随机数，然后取这个数小数点后的两位数，最后乘 100，并赋给变量 d 	var e = Math.</description>
    </item>
    
    <item>
      <title>JavaScript new</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%B7%A6%E4%BE%A7%E8%A1%A8%E8%BE%BE%E5%BC%8F/new/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%B7%A6%E4%BE%A7%E8%A1%A8%E8%BE%BE%E5%BC%8F/new/</guid>
      <description>new 用于创建一个对象类型的实例或具有构造函数的内置对象的实例。
调用构造函数 创建或返回一个新的对象实例，并将构造函数的作用域赋给新的对象实例（因此构造函数中的 this 的指向就变为了这个新的对象实例）。</description>
    </item>
    
    <item>
      <title>JavaScript Number</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/number/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E6%95%B0%E5%AD%97%E5%92%8C%E6%97%A5%E6%9C%9F/number/</guid>
      <description>Number 该对象是经过封装的能被处理数字值的对象；该对象由 Number() 构造器创建。
Number 的方法 toString() NumObj.toString(radix)
 将 NumObj 转为为 radix 进制的数，若 NumObj 无法被转换为 radix 进制的数，则返回 string 类型的 NaN；rRadix 的取值范围为 2 - 36，如果未指定 radix 参数，则默认值为 10。 当在 NumObj 中，遇到不在 radix 中的字符，则将忽略该字符以及所有后续字符，并返回在这之前已解析的整数值。 因为 Number 对象覆盖了 Object 对象上的 toString() 方法（系统将 Number 对象的 toString 方法重写了），因此它并不继承自 Object.prototype.toString()。  十进制转十六进制 var a = 1971; var b = 10; var c = 16; var d = parseInt(a, b); // 将变量 a 当做 b 进制的数，并将 b 转换为十进制的数。 var e = d.</description>
    </item>
    
    <item>
      <title>JavaScript Object</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1/object/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1/object/</guid>
      <description>Object 创建一个对象包装器；它的每个值都是对象的属性，且每个属性必须要有属性值，属性值的类型可以是任何数据类型。
创建 Object 的方式 对象字面量 var n = &amp;#39;世雨&amp;#39;; var a = &amp;#39;&amp;#39;; var object = { 	//var obj ={} 相当于 var obj = new Object()，一般情况都使用前者。 	b: &amp;#39;臣&amp;#39;, 	// b 为属性名，臣为属性值 	c: n, }; a = object.b + object.c; // 用变量 a 接收对象 object 的属性 b 与 c 的值。 console.log(a); // 返回臣世雨 工厂模式 function ThreeOne(color) { 	this.color = color; 	// color为可选参数 	this.name = &amp;#39;bird&amp;#39;; 	this.</description>
    </item>
    
    <item>
      <title>JavaScript parseFloat</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parsefloat/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parsefloat/</guid>
      <description>parseFloat parseFloat(string)，将 string 显式转换为 number 类型浮点数（小数）。若 string 无法被转换为浮点数，则返回 number 类型的 NaN。</description>
    </item>
    
    <item>
      <title>JavaScript parselnt</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parselnt/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parselnt/</guid>
      <description>parselnt parseInt(string, radix) 该函数解析一个字符串并返回指定基数的十进制整数。
将 string 看作 radix 进制的数，并将 string 显式转换为十进制且为 number 类型的整数（radix 为介于 2-36 之间的数，它是可选值，表示被解析字符串的基数），若 string 无法被转换为整数，则返回 number 类型的 NaN。
当在 string 中，遇到不在 radix 中的字符，则将忽略该字符以及所有后续字符，并返回在这之前已解析的整数值。
若 radix 为 0 时，部分浏览器（比如 IE）会报错，部分浏览器会将 0 当做 10 进行转换。
// n 进制转十进制-------------------------------------------------- var n = 10010; var c = 2; // 变量 n 可为 8，16，32。 var a = parseInt(n, c); // 将 n 当作 c 进制的数，并将 n 显式转换为十进制的整数。 console.log(a); </description>
    </item>
    
    <item>
      <title>JavaScript this</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/this/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%B8%BB%E8%A6%81%E8%A1%A8%E8%BE%BE%E5%BC%8F/this/</guid>
      <description>this 在全局中，无论是否在严格模式下，this 指的都是全局对象（window）。
通常情况，函数的调用方式决定了 this 的值；非严格模式下， this 一般指向一个调用它的对象（即 this 指向调用者，即哪个对象中的方法调用的 this，这个 this 就指向调用这个方法的对象 ），即第一人称我，严格模式下可以指向任意值。</description>
    </item>
    
    <item>
      <title>JavaScript Window 对象</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/window-%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/window-%E5%AF%B9%E8%B1%A1/</guid>
      <description>Window 对象 Window 对象表示浏览器中打开的窗口。
如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。
Window 对象的方法 setInterval() 用于每隔一段时间调用一个函数或一个代码片段。
setTimeout() 使函数或代码在经过一段指定的时间才开始执行。
clearInterval 取消先前通过 setInterval() 设置的重复定时任务。</description>
    </item>
    
    <item>
      <title>JavaScript XMLHttpRequest</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/xmlhttprequest/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/xmlhttprequest/</guid>
      <description>XMLHttpRequest 该对象用于与服务器交互；通过它可以在不重新刷新页面的情况下请求特定 URL，获取数据，这样就可以使得网页在不影响用户操作的情况下，更新页面的局部内容。
XMLHttpRequest 的属性 readyState 返回 XMLHttpRequest 的当前所处状态的 状态码。
状态码  0 表示 XHR 对象已经被创建，但尚未调用 open() 方法。 1 表示 XHR 对象的 open 方法已经被调用。 2 表示 XHR 对象的 send 方法已经被调用，并且头部和状态已经可获得。 3 表示 XHR 对象的服务端的文本正在下载中，且 responseText 属性已经包含部分数据。 4 表示 XHR 对象的服务端的文本下载操作已完成。  status 返回了 XMLHttpRequest 响应时的数字状态码。
responseText 当一个请求被发送后，该属性会返回服务器端的文本。
onreadystatechange 该属性会在属性 readyState 发生改变的时候被调用。
XMLHttpRequest 的方法 open 用于初始化一个请求。
send 用于向服务端发送一个 HTTP 请求。
注意 如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回（不会等待响应返回）；如果是同步请求，则此方法会直到响应返回到达后才会返回。</description>
    </item>
    
    <item>
      <title>JavaScript 作用域</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>作用域 作用域（scope）定义了代码在运行时的某些特定的变量、函数、对象的可调用范围。
每个函数都会创建 scope（作用域对象），scope 中储存是一个个的全局作用域与局部作用域），即 scope 中存储的是作用域的集合（作用域链）。
父函数不能调用子函数的变量 当调用一个变量时，调用者会去作用域链（scope）的顶端依次向下寻找这个变量；又因为子函数的 AO 中含有父函数 AO 的引用地址，所以子函数可以调用父函数的变量；反之，因为父函数的 AO 不能含有子函数 AO 的引用，所以父函数不能调用子函数的变量。
作用域都是独立的 声明多个同级函数时，这些函数的作用域链都是独立的，即每个同级函数中的局部变量不可以公用，但它们都可以使用全局中的变量；这些作用域链会随着对应函数的执行完毕而依次释放。
全局作用域 在全局作用域（GO 对象）中的变量为全局变量，全局变量的的作用域为整个脚本，这类变量在脚本中的任何地方（包括函数内部）能被调用。
它们通常指在全局中定义的变量或没有使用 var 声明的暗示全局变量。
这些变量都在全局作用域中：  函数外声明的变量。 函数中没有使用 var 声明的变量。  局部作用域 局部作用域（AO 对象）中的变量为局部变量，局部变量的作用域仅限于某个特定的函数，这类变量可以在特定的函数中调用。
每个函数内部都会创建一个局部作用域，当一个函数（父函数）中包含另一个函数（子函数），则父函数不能调用子函数的变量，但子函数可以调用父函数的变量；并且两个独立且同级的函数中的局部变量不能公用，只能各用各的局部变量。
这些变量都在局部作用域中：  它们通常指在函数中定义的变量或函数的形式参数。 函数中使用 var 声明的变量。 函数中的形式参数。  累加器 function One() { 	var b = 0; 	function Two() { 	b++; 	console.log(b); 	} 	a = Two; 	// 变量 a 是一个暗示全局变量，用变量 a 接收函数 Two } One(); //调用函数 One，使暗示全局变量 a 可以执行 a(); // 执行变量 a，相当于执行函数 Two，每执行一次变量 a，就会使 b 在原来的的结果上自增一次。 a(); a(); 作用域链 function One() { 	// 声明函数 One 时，系统会隐式创建 One.</description>
    </item>
    
    <item>
      <title>JavaScript 函数</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0/</guid>
      <description>函数 函数又叫方法，它是用来执行某些特定功能的代码；且允许我们在程序中随时进行调用。
每一个函数其实都是一个 Function 类型的对象。
函数中若没有使用 return 语句，则它默认返回 undefined；要想返回一个指定的值，则需使用 return 语句来指定一个返回值（使用 new 关键字调用一个构造函数除外）。
声明方式 基本方式 直接通过 function 关键字进行声明。
function demo(a, b) { 	// 声明一个函数，demo 为函数名，a 与 b为形式参数（形参）。 	console.log(a + b); 	// 返回形参 a 与 b 的和 3。 } demo(1, 2); // 使用执行符 () 调用函数 demo，1 与 2 为实际参数（实参） var c = demo.name; // 函数 demo 的属性 name 为指定函数的（这里为 demo）名字， // 该属性的值永远等于跟在 function 关键字后面的标识符（变量名），匿名函数的属性 name 为空。 console.log(c); // 返回函数 demo 的函数名  //匿名函数方式-------------------------------------------------- var demo = function () { 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 函数的参数</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</guid>
      <description>函数的参数 形参 形式参数，由于它不是实际存在变量，所以又称虚拟变量；它是指在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传入的实际参数。
在调用函数时，实参将赋值给形参；因而，必须使实参的个数与类型应与形参一一的对应，且传入的实参必须要有确定的值。
函数的形参比实参数量多的情况 若形参比实参的数量多，则多余的形参会返回 undefined（默认参数）。
函数运行结束的时候形参被释放，而实参内容不会改变。
实参 实际参数，是在调用函数时传递给函数的参数， 实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参， 因此应预先用赋值，输入等办法使实参获得确定值。
function demo(a, b) { 	// 定义两个形参。 	var f, 	g = &amp;#39;&amp;#39;; 	for (var e = 0; e &amp;lt; arguments.length; e++) { 	// arguments 对象的属性 length 表示实参（实参列表）的数量。 	f = arguments[e]; 	// 遍历所有实参 	console.log(&amp;#39;遍历的实参:&amp;#39; + f); 	} 	g = arguments.length; 	// 返回实参的数量 	// arguments 对象类似数组，但却不是数组。 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 分支与循环</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</guid>
      <description>分支与循环 if 单一的 if 语句 if (条件) { 	要执行的语句块; } if else 语句 if (条件) { 	要执行的语句块; } else { 	要执行的语句块; } 多重 if 语句嵌套 if (条件) { 	要执行的语句块; } else if (条件) { 	要执行的语句块; } else { 	要执行的语句块; } 为什么 if 语句中不能进行函数声明 因为程序执行时，程序会在本页代码之内寻找函数声明，并进行函数声明提升，而不会去查找需要条件的 if 之内的内容，
另外，可以用函数表达式定义函数？
switch 将表达式的值与 case 的子表达式匹配，并执行与之匹配成功后相关联的语句。
n = &amp;#39;老虎&amp;#39;; switch (n) { 	// 将表达式 n 与下面的 case 后的子表达式匹配，匹配成功后会执行与其关联的代码块， 	// 且会执行该代码块之后的的所有代码块，为了减少代码请求， 	// 可以使用 break 语句终止执行该代码块之后代码块。 	case &amp;#39;老虎&amp;#39;: 	case &amp;#39;虎&amp;#39;: 	case &amp;#39;白虎&amp;#39;: 	case &amp;#39;母老虎&amp;#39;: 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 包装类</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8C%85%E8%A3%85%E7%B1%BB/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8C%85%E8%A3%85%E7%B1%BB/</guid>
      <description>包装类 在 JavaScript 中，因为原始值不能有属性和方法，所以当给原始值添加属性与方法时，系统会自动且隐式的将原始类型的数据转换为对象，然后再调用这个对象的属性和方法，调用完以后，在将其转换为原始值，这个过程叫做包装类。
因为 undefined 与 null 不能有属性，所以它们不能进行包装类。
Number 将原始类型的数值，转换为 Number 对象，它的原型是 Number.prototyp。
数字类型的对象可以进行学运算，但运算的结果，这个对象会变回原始类型的数值。
String 将原始类型的字符串，转换为 String 对象，它的原型是 String.prototyp。
当原始值字符串直接调用属性 length 时，系统会对这个原始值字符串进行包装类，使之变为对象字符串，又因为字符串对象自带属性 length，因此系统不会将这个属性 delete 删掉，所以最终将属性 length 的值返回。
Boolean 将原始类型的布尔值，转换为 boolean 对象，它的原型是 Boolean.prototyp。
注意 因为 Number、String、boolean 它们本身重写了（用一个同名不同功能的方法覆盖系统自带的方法）一个 xxx.prototype.toString 方法，所以它们不会用原型上 Object.prototype 的 toString 方法。
var a = new Number(123); var b = new String(&amp;#39;yxz&amp;#39;); var c = new Boolean(&amp;#39;true&amp;#39;); console.log(typeof a); console.log(typeof b); console.log(typeof c); // 返回三个 object 数值包装类运算 var num = new Number(123); //原始值 num 被进行包装类，因此它变成了 对象 123。 console.</description>
    </item>
    
    <item>
      <title>JavaScript 区分对象与数组</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8C%BA%E5%88%86%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8C%BA%E5%88%86%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84/</guid>
      <description>区分对象与数组 Constructor var arr = []; var obj = {}; var a = arr.constructor; console.log(a); // 返回数组。 var b = obj.constructor; console.log(b); // 返回对象。 Instanceof var arr = [];  var obj = {};  var a = arr instanceof Array; console.log(a); // 返回 true，因为变量 arr 是一个数组。 var a = arr instanceof Object; console.log(a); // 返回 true，因为变量 arr 是一个数组类对象。 var b = obj instanceof Array; console.log(b); // 返回 flase，因为变量 obj 不是一个数组。 var b = obj instanceof Object; console.</description>
    </item>
    
    <item>
      <title>JavaScript 原型</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B/</guid>
      <description>原型 原型对象（prototype），它是只有函数才拥有的系统隐式属性（使用 null 作为构造函数的原型的情况下，原型不能通过自定义进行添加）；通过原型这种机制，JavaScript 中的对象可以从其他的对象那里继承一些功能。
__proto__  每一个对象都有一个属性 proto，指定该对象的原型对象。 该属性 proto 的指向（值）可以修改，即一个用构造函数创建出的对象实例的原型是可以通过该属性修改的。 当调用一个对象的属性时，如果这个对象没有这个属性，那么就会到构造该对象的构造函数的原型所指向的对象（可以称之为父对象）中去寻找这个属性，如果父对象也没有这个属性，则到该父对象的构造函数的原型所指向的对象（可以称之为为爷爷对象）里去寻找这个属性，如果还没找到，则继续往上找…，直到原型链终端为 Object.prototype；Object.prototype 中有一个 null，相当于到 null 中去取值，即调用一个对象所没有的值，会返回 undefined；这种通过属性 proto 连接原型对象直到 Object.prototype（null）的一条链为原型链。 通常情况，大部分对象最终都会继承自 Object.prototype，因为 Object.create() 方法中可以将 null 放进去当做原型。 在 JavaScript 中，null 与 undefined 没有原型且不是对象。  作用 可以让一个构造函数所创建的多个对象都可以使用公用的属性和方法。
声明一个构造函数之后，该构造函数中会有一个属性 prototype，这个属性指向的就是该构造函数对应的原型对象。
原型对象中有一个属性 constructor，该属性用于指向这个对象的构造函数。
// Demo.prototype = {} 是构造函数 Demo 的原型，它默认是一个空对象（原型对象） // 当构造函数 Demo 被定义完成时，同时该函的原型对象 Demo.prototype = {} 也被定义完成； // Demo.prototype.name = &amp;#34;原型的名字&amp;#34;; // Demo.prototype.size = &amp;#34;500&amp;#34;; // Demo.prototype.height = &amp;#34;1400&amp;#34;; // Demo.prototype.width = &amp;#34;800&amp;#34;; //上面代码可以简化为： Demo.</description>
    </item>
    
    <item>
      <title>JavaScript 原型链</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>原型链 每个实例对象（ object ）都有一个私有属性（ proto ），用于指向它的构造函数的原型对象（prototype）；该原型对象也有一个自己的私有属性（proto ），层层向上直到原型对象 Object.prototype 为 null；而 null 没有原型，它作为这个原型链的终端，它的值为 undefined。
几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。
可以使用对象的属性 proto 实现继承。</description>
    </item>
    
    <item>
      <title>JavaScript 原始值和引用值</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8%E5%80%BC/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8%E5%80%BC/</guid>
      <description>原始值和引用值 在 ECMAScript 中，变量有两种类型的值，即原始值和引用值。
原始值 一种非对象也没有方法和属性的数据类型，也叫基本类型（基本数值或基本数据类型）。所有的原始值都是不可改变的。
Number 数值，用整数或浮点数表示，它允许任意位的小数。
String 字符串，由零个或多个字符构成，它必须被包含在双引号或双引号内。
与数组一样的是，字符串中的每个字符都有一个下标，这些下标从 0 开始。因此，它有属性 length。
Boolean 布尔，表示一个逻辑值，只有 true 或 false 两个值。
BigInt 任何精度格式的整数，是一种比 Number 数据类型支持的范围更大的整数值。用于安全地存储和操作大整数。
Symbol 符号，它是唯一的并且是不可修改的。
undefined 未定义，它只有一个值 undefined，指一个声明未描述的变量的初始值或一个变量直接赋值为 undefined，或没有实际参数的形式参数
Null 空指针，它也只有一个值 null，表示一个不存在的或无效 object 和地址引用。因为历史遗留性问题，它是的数据类型为 Object。
原始值的储存原理 a = 10; // 在栈内存第一层创建一个变量 a ，然后将数值 10 放进变量 a 中。 // 栈内存： // a ： 10 var b = a; // 在栈内存第二层创建一个变量 b，然后将变量 a 中的数值 10 拷贝到变量 b 中。 // 栈内存： // a ：10 // 拷贝变量 10 // b ：10 a = 20; // 在栈内存第三层重新创建一个变量 a，然后将数值 10 放入这个第三层的变量 a 中，之后关闭在第一层的变量 a。 // 栈内存： // a ：10（已关闭） // b ：10 // a ：20 （新的变量 a） 引用值 引用值都是对象，每个对象都有属性和方法。它指的是存储在堆内存中的实际对象。每一个引用变量中都存放着指针，这个指针指向其堆内存中的实际对象。</description>
    </item>
    
    <item>
      <title>JavaScript 变量的声明方式</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%A3%B0%E6%98%8E/%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%A3%B0%E6%98%8E/%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/</guid>
      <description>变量的声明方式 变量 变量名也叫标识符，它用于储存程序中各种类型的数据。
var var 可以声明局部变量与全局变量。
使用 var 声明的遍变量，无论在何处进行的声明，都将在执行任何代码之前进行预编译处理。
若用 var 声明一个变量，但没有进行赋值，则变量的默认值为 undefined。</description>
    </item>
    
    <item>
      <title>JavaScript 命名空间</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>命名空间 命名空间（package），它可以帮助我们更好地整理代码，并可避免变量命名冲突。
简单地说，我们可以创建一个简单对象字面量来打包所有的相关函数和变量。这个简单对象字面量模拟了命名空间的作用。
作用 私有化变量 function Demo() { 	var healthy = 0; 	// 该变量为私有化变量，这个变量只能通过构造函数的指定方法进行调用， 	// 不能直接作为对象的属性或变量进行调用。 	this.cure = function () { 	healthy++; 	};  	this.injured = function () { 	healthy--; 	};  	this.view = function () { 	console.log(healthy); 	}; }  var demo = new Demo();  demo.view(); // 返回 0，调用构造函数的属性 view。 demo.cure(); // 调用构造函数的属性 cure。，使变量 healthy 自增 1。 demo.</description>
    </item>
    
    <item>
      <title>JavaScript 字符串截取</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</guid>
      <description>字符串截取 Str.slice(n) 从指定字符串 Str 的第 n 位字符开始截取，一直截取到字符串最末。</description>
    </item>
    
    <item>
      <title>JavaScript 属性调用</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%B1%9E%E6%80%A7%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%B1%9E%E6%80%A7%E8%B0%83%E7%94%A8/</guid>
      <description>属性调用 通常调用属性的格式一般为 fun.arr，实际上系统会隐式将 fun.arr 变为 fun[&amp;ldquo;arr&amp;rdquo;]，因为前者调用更加灵活且简洁。
var demo = { 	wife1: { name: &amp;#39;lei&amp;#39; }, 	wife2: { name: &amp;#39;zheng&amp;#39; }, 	wife3: { name: &amp;#39;xing&amp;#39; }, 	wife4: { name: &amp;#39;zhu&amp;#39; }, 	fun: function (num) { 	var a = [&amp;#39;wife&amp;#39; + num]; 	console.log(a); 	return this[&amp;#39;wife&amp;#39; + num]; 	// 看不太懂 	}, };  demo.fun(1); demo.fun(2); demo.fun(3); demo.fun(4); </description>
    </item>
    
    <item>
      <title>JavaScript 开发原则</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/</guid>
      <description>开发原则 渐进增强 不要使用 JavaScript 代码添加网页的核心内容，应该先保证核心内容脱离与 CSS 与 JavaScript 代码之外。
平稳退化 确保网页在没有 JavaScript 与 CSS 的情况下也能使用核心功能，而且渐进增强的实现必然支持平稳退化。
向后兼容 使用对象检测的方式来检测浏览器对 JavaScript 的支持程度，确保老版本的浏览器不会因为不支持某些 JavaScript 代码而报错。
性能考虑 减少访问 DOM 的和文档中标记的元素；过多的页面元素只会增大 DOM 树的规模。
将多个 JavaScript 文件合并为一个；减少加载页面时发送的请求数量。
压缩已完成的 JavaScript 脚本；将文件中的不必要的字节（空格、注释、回车符）统统删除，从而减少整体文件大小。</description>
    </item>
    
    <item>
      <title>JavaScript 立即执行函数</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</guid>
      <description>立即执行函数 立即执行函数（IIFE），指一个在被定义后就会立即执行的函数，不需要被调用，执行完毕后就会被立即释放。
用于创建一个独立的作用域，主要用于初始化功能。这个作用域中的变量，外面的任何位置访问不到，用于避免变量污染和命名冲突。
它具有普通的函数一样的功能（参数、返回值、执行期上下文等等）。
只有函数表达式可以被执行符 () 执行，被执行符所执行的函数表达式的函数名会被自动忽略，即该函数表达式变为了 IIFE。
多个 IIFE 之间要加分号。
var demo = (function (a, b) { 	// 用变量 demo 接收 IIFE 的返回值 	a = Number(a); 	b = Number(b); 	var c = (a + b) * 10; 	// 将变量 a 与 b 的和乘 10 的结果赋给变量 c 	return c; 	// 将变量 c 作为该 IIFE 的返回值 })(10, 20); // 10 与 20 为实参 console.log(demo); IIFE 的立即释放的特性 var a = (function demo() { 	// 用变量 a 接收函数 demo，因函数 demo 执行一次后就会被释放，则会导致变量 a 的值变为 undefined 	// 因此再次调用变量 a 会返回 undefined 	console.</description>
    </item>
    
    <item>
      <title>JavaScript 继承方式</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</guid>
      <description>继承方式 原型链继承 缺点 会使一个对象过多继承一些没用或不需要的属性，则会导致代码的执行效率大大降低。反对反对反对法大幅度发反对发的
Grand.prototype.blue = &amp;#39;blue&amp;#39;; function Grand() {}  var grandfather = new Grand();  Father.prototype = grandfather;  function Father() { 	this.red = &amp;#39;red&amp;#39;; 	this.money = { 	card: &amp;#39;pencil&amp;#39;, 	}; 	this.value = &amp;#39;100&amp;#39;; }  var father = new Father();  Son.prototype = father;  function Son() { 	this.orange = &amp;#39;orange&amp;#39;; } var son = new Son();  console.log(son.orange); // 返回 orange。 console.</description>
    </item>
    
    <item>
      <title>JavaScript 节点</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/dom/%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/dom/%E8%8A%82%E7%82%B9/</guid>
      <description>节点 在文档中，几乎每一样东西都是一个节点（Node），包括空格和换行符都会被解释为节点。
元素节点 指文档中的元素。
文本节点 指文档中元素所包含着的文本。
属性节点 指文档中元素的属性；属性都被包含在元素中。
节点的属性 childNodes 返回一个指定节点所包含的所有子节点的集合。
nodeValue 返回或设置当前节点的值。
注意 一个元素节点的 nodeValue 是一个空值 null ，若需要获取这个元素节点所包含的文本内容，则需要属性 childNodes 来获取这个元素节点所包含的文本节点的文本内容。
nodeName 返回指定节点的大写字母形式的节点名。
nextSibling 返回紧跟在指定节点后面的节点，如果指定节点为最后一个节点，则返回 null。</description>
    </item>
    
    <item>
      <title>JavaScript 运算符</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>运算符 算数运算符 算术运算符都会将操作数用 Number() 方法隐式转换，然后再进行运算；若遇到无法转换的值，则会返回 number 类型的 NaN。
++ a++ 或 ++a，自增（递增）。使操作数加 1，并返回自增后的值。
操作数前置或后置
若位于数值的之后（a++），则会自增之前返回数值。
若位于数值的之前（++a），则会自增之后返回数值。
&amp;ndash; a&amp;ndash; 或 &amp;ndash;a， 递减（自减）。使操作数减 1，并返回自减后的值。
操作数前置或后置
若位于数值的之后（a&amp;ndash;），则会递减之前返回数值。
若位于数值的之前（&amp;ndash;a），则会递减之后返回数值。
比较运算符 JavaScript 有两种比较方式：严格比较和转换类型比较。
对于严格比较运算符（===）来说，仅当两个操作数的类型相同且值相等为 true。
对于比较运算符（==）来说，会先将将两个操作数转换成相同的类型，再进行值的比较运算。
对于关系运算符（ &amp;lt;=）来说，会先将操作数转为原始值，使它们类型相同，再进行值的比较运算。
字符串比较则是使用基于标准字典的 Unicode 值来进行比较的。
原始值比较的是值，引用值比较的是引用地址。
In 用于判断一个对象的指定的属性是否在该对象或其原型链中，在则 in 运算符返回 true，不在则返回 false。
Instanceof 通常用于判断一个对象是否是由指定构造函数构造出来的，是则返回 true，否则报错。但也用于判断一个实例对象的原型链中有没有另一个变量的原型，并返回一个布尔值。
2 &amp;gt; 3 &amp;lt; 1
先对 2 &amp;gt; 3 进行比较，比较完成之后返回 false，又因为 false = 0，在用 0 与 1 比较，因 0 &amp;lt; 1 ，会返回 true，所以最终返回 true。</description>
    </item>
    
    <item>
      <title>JavaScript 递归</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92/</guid>
      <description>递归  找规律（符合人的思维过程）。 找出口（用已知的条件当做终止条件，用实际性的数去返回结果），避免无限递归（无限循环），导致浏览器崩溃。 一般格式为 return + 规律公式。 特别复杂的程序一定不能使用递归。  递归的优缺点 优点：使代码更加简洁。
缺点：影响程序的效率与性能。
递归实现阶乘 var n = 5; function OneOne(n) { 	if (n == 1) { 	//将当 n 等于 1 时作为结束条件 	return 1; 	// 返回值为 1 	} 	return (n = n * OneOne(n - 1)); 	// 用公式将阶乘的规律表示出来，因为会无限的循环并且计算，所以需要找到结束条件 	// 使用递归计算 5 的阶乘的过程： 	// OneOne(5); 5 = 5 * (4 * 6);(OneOne(5 - 1)); 	// OneOne(4); 4 = 4 * (2 * 3);(OneOne(4 - 1)); 	// OneOne(3); 3 = 3 * (2 * 1);(OneOne(3 - 1)); 	// OneOne(2); 2 = 2 * (1 * 1);(OneOne(2 - 1)); 	// OneOne(1); 当 n 等于 1 时，直接返回 1; } console.</description>
    </item>
    
    <item>
      <title>JavaScript 链式调用</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</guid>
      <description>链式调用 模仿一个 jQuery 链式调用的方式。
var demo = { 	a: function () { 	console.log(123); 	return this; 	// 将函数自身返回。 	},  	b: function () { 	console.log(456); 	return this; 	// 将函数自身返回。 	},  	c: function () { 	console.log(789); 	return this; 	//将函数自身返回。 	}, }; demo.a().b().c(); // 呈链式(连续)的调用对象 demo 的属性。 </description>
    </item>
    
    <item>
      <title>JavaScript 闭包</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%97%AD%E5%8C%85/</guid>
      <description>闭包 在函数（父函数）中创建另一个函数（子函数）时；当子函数被父函数 return 到了外部时，会生成闭包。
生成了闭包后，虽然父函数的 AO 已经被释放了，但子函数却保存了父函数的 AO，且这个 AO 不会因为父函数的执行完毕而被完全释放，因为父函数的 AO 已经被子函数给保存了起来，且可以随意调用。
闭包的优缺点 优点 避免全局变量的污染。
使变量长期储存在内存中。
缺点 使用不当会导致原有的作用域链不释放，造成内存泄露（过多占用内存的剩余空间，导致可用空间越来越少）。
function demo() { 	function test() { 	var d = 345; 	console.log(c); 	// 虽然函数 test 中没有变量 c，但因为函数 test 可以使用函数 demo 的 AO， 	// 所以它会到函数 demo 的作用域中去寻找变量 c，然后返回 123 	} 	var c = 123; 	return test; 	// 将函数 test 返回，即将函数 test 与它的作用域一起保存到了外部， 	// 使的函数 demo 可以使用函数 test 的 AO } var e = demo(); // 用变量 e 接收函数 demo 的返回值，也就是接收函数 test 以及它的 AO e(); // 调用变量 e，即相当于执行函数 demo 的返回值 // 父函数 demo 执行完毕后，释放了自己的 AO，但子函数 test 在这之前已经将父函数 demo 的 AO 保存了起来， // 所以它会到函数 demo 的作用域中去寻找变量 c，然后返回 123 function demo() { 	var b = &amp;#39;apple&amp;#39;; 	var obj = { 	c: function () { 	// 给对象 obj 添加一个属性 c ，属性值为一个函数 	if (b !</description>
    </item>
    
    <item>
      <title>JavaScript 预编译</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/js/%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>预编译 JavaScript 是脚本语言，因此不会进行传统的预编译，但它会经过一个特殊的预编译过程，这个预编译过程发生在代码执行前的极短时间内。
预编译发生在代码执行之前的一瞬间，用于在内存中创建一些空间来存储一些变量与函数；预编译时，会无视 if 语句中的条件，会直接将 if 语句中的代码块内的变量的声明与函数声明进行提升。
函数声明提升 定义一个函数时，该函数会被提升到当前作用域链的顶端，即调用该函数时，不管在哪调用该函数，都可以调用成功；但函数表达式并不会。
变量声明提升 使用 var 声明的变量，不管在这之前还是之后调用该变量，并不会报错，会返回 undefined。
暗示全局变量 暗示全局变量（imply global），一个变量未声明就赋值，那么此变量就是 window（全局对象）的属性； 任何全局变量，都是 window 的属性，即可以通过 window 对象调用全局变量。window 就是全局的域，它包括了全局变量和全局函数。
暗示全局变量不会进行变量声明提升。
a = 10; // 一个变量未声明就赋值，那么此变量就是 window（全局对象）的属性，也叫暗示全局变量 // 相当于 window.a = 10; // 相当于 window = { 	a: 10, };  //一切声明了的全局变量，都是 window 的属性 var b = 20; // 相当于 window.b = 20; // 相当于 window = { 	b: 20, }; // 调用变量 b，相当于调用全局对象 window 的属性 b，即 console.</description>
    </item>
    
    <item>
      <title>Css 实现居中</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AE%9E%E7%8E%B0%E5%B1%85%E4%B8%AD/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AE%9E%E7%8E%B0%E5%B1%85%E4%B8%AD/</guid>
      <description>实现居中 绝对定位 兼容性不错的主流 css 绝对定位居中的用法：
.conter { 	width: 600px; 	height: 400px; 	position: absolute; 	left: 50%; 	top: 50%; 	margin-top: -200px; /* 高度的一半 */ 	margin-left: -300px; /* 宽度的一半 */ } 绝对定位 css3 的出现，使得有了更好的解决方法，就是使用 transform 代替 margin. transform 中 translate 偏移的百分比值是相对于自身大小的，可以这样实现 css 绝对定位居中，给子元素应用以下样式，将子元素居于父元素正中间，有 bug。
position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); 弹性布局 给父元素应用以下样式，将子元素居于父元素正中间。
display: flex; flex-direction: row; justify-content: center; align-items: center; display: flex; flex-direction: column; justify-content: center; align-items: center; 文本实现垂直居中 display: flex; align-items: center; </description>
    </item>
    
    <item>
      <title>Css 盒子类型</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid>
      <description>盒子类型 行盒   display 属性为 inline 的元素是行盒，也叫行级元素；如 span、strong、button、em、a、img、video、audio。
  文字一定是行盒（文字会产生匿名行盒将其包裹）。
  内部产生参考线：一个元素中包含行盒，通常会给行盒设置 vertical-align:baseline，这会导致两个元素的参考线对齐。
  同一个包含块中，连续多个行盒水平依次排列，剩余空间排列不下，才会换行。
  行盒不能包含块盒（a 元素除外）。
  设置 width 和 height 无效；调整行盒的 width 与 height 应使用字体大小、行高、字体类型等间接调整。
  产生空白合并：代码中的连续空白字符，在页面显示时，会被合并为一个空格。
  设置内外边距及边框，水平方向有效，垂直方向只会影响元素的背景，不会影响其他盒子。
  内部包含行块盒或可替换元素，行盒的高度只和文字内容的字体大小有关系，和行块盒或可替换元素无关。
  块盒  display 属性为 block 的元素，也叫块级元素；如 div、h1~h6、pre、ul、li、p。 同一个包含块中，每个块盒独占一行。 p 元素不能包含 div 元素。  行块盒  display 属性为 inline-block 的元素，也叫行块级元素；没有默认值为 inline-block 的元素。 同一个包含块中，连续的多个行块盒水平依次排列。 行块盒内部一定会产生参考线。 产生空白合并  </description>
    </item>
    
    <item>
      <title>Css 高斯模糊</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</link>
      <pubDate>Sat, 16 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</guid>
      <description>高斯模糊 backdrop-filter: blur(0.5rem); </description>
    </item>
    
    <item>
      <title>Css 字体</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AD%97%E4%BD%93/</link>
      <pubDate>Thu, 14 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AD%97%E4%BD%93/</guid>
      <description>字体 参考线 当制作文字时，会出现几根参考线。不同的文字类型，参考线位置、距离都不一样，同一种文字类型，参考线一致。
组成
 text_top ascent，顶线 super，上基线 baseline，基线 sub，下基线 text_bottom descent，底线  决定因素
 font-family：定义参考线的相对距离。 font-size：定义参考线之间的距离。 line-height：定义参考线的顶部空隙与底部空隙。  元素的基线 img：基线位置位于 img 的下外边距的最底边。
from：基线位于其内容的底边。
行块盒：父元素内部包含行块盒（高度自适应） ，会因为行块盒最后一行有 line-box，则会导致行块盒用最后一行的基线作为整个父元素的基线。若父元素中没有行盒，则使用父元素的下外边距作为基线。
font-size 用该属性设置字体大小时，改变的是文字的相对大小，也叫字体框大小。
制作文字时，文字外面会有一个字体框，不同的文字的字体框，大小也不一样；即设置文字的小大，本质改变的是文字的相对大小。
相对大小
若一个文字的相对大小（字体框大小）为 2048 时，那么它顶线到基线的距离为 1884，底线到基线的距离为 514，则顶线到底线的距离为 1884 + 514 = 2398。（可以拙见为一个字体的高为 2048，那么该字体占的实际区域是 2390，因此某些字体会有默认边距）
文字顶线到底线的距离，叫做文字的实际大小（content-area），也叫内容区。即行盒的背景，填充的是文字的实际大小。因此当我们给行盒设置背景时，会导致行盒上下有留白。即上部分留白 + 行盒背景 + 下部分留白 = 文字的相对大小。
line-height 用于设置多行元素的空间量。
top：文字顶线向上延申的空间。
bottom：文字底线向下延申的空间。
空隙  这两个空间（top 与 bottom）的空间量一定相等，这两个空间叫做空隙（line gap）。 通常，空隙是字体设计者决定的，因此有些字体没有空隙，但有的字体有空隙，有的字体空隙是负数。  虚拟区  top 到 botoom 的距离，叫做虚拟区（virtual-area），有的虚拟区和内容区相等，有的虚拟区比内容区小，但大部分虚拟区都比内容区大；因此设置行高大小就等于设置虚假区的大小。 因为虚拟区上下两边都相等，所以字体的实际大小在虚拟区之间。  line-box  line-box（行框）是承载文字内容的必要条件，如果没有行框，文字将无法显示。 当有多行行盒排列时，每一行的区域就叫做 line-box，line-box 的顶边是该行所有行盒的最顶边，底边是该行行盒的最低底边。即一个行盒的实际占用高度是通过 line-box 计算的。  不生成 line-box 的情况</description>
    </item>
    
    <item>
      <title>Css 文本溢出处理</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 13 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</guid>
      <description>文本溢出处理 实现单行文本的溢出显示省略号可以直接用 text-overflow:ellipsis 属性来实现，当然还需要加宽度width属来兼容部分浏览。
overflow: hidden; text-overflow: ellipsis; white-space: nowrap; </description>
    </item>
    
    <item>
      <title>Css 媒体查询</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Tue, 12 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</guid>
      <description>媒体查询 @media screen and (min-width: 720px) { 	/* 当浏览器宽度大于 value 时所应用的样式 */ }  @media screen and (max-width: value) { 	/* 当浏览器宽度小于 value 时所应用的样式*/ } </description>
    </item>
    
    <item>
      <title>Css 渐变</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E6%B8%90%E5%8F%98/</link>
      <pubDate>Tue, 12 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E6%B8%90%E5%8F%98/</guid>
      <description>渐变 background-image: linear-gradient(rgb(48, 47, 47), rgb(177, 177, 175)); </description>
    </item>
    
    <item>
      <title>Css table 空隙</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/table-%E7%A9%BA%E9%9A%99/</link>
      <pubDate>Mon, 11 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/table-%E7%A9%BA%E9%9A%99/</guid>
      <description>table 空隙 如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。
border-collapse: collapse; </description>
    </item>
    
    <item>
      <title>Css 修改网页滚动条样式</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 10 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</guid>
      <description>修改网页滚动条样式 属性描述 /* 整个滚动条*/ ::-webkit-scrollbar { }  /* 滚动条两端的按钮 */ ::-webkit-scrollbar-button { }  /* 滚动条的滚动轨道 */ ::-webkit-scrollbar-track { }  /* 内层轨道 */ ::-webkit-scrollbar-track-piece { }  /* 滑块 */ ::-webkit-scrollbar-thumb { }  /* 边角 */ ::-webkit-scrollbar-corner { }  /* 右下角拖动块的样式 */ ::-webkit-resizer { } 使用 一般我们这样设置这几个主要属性就 OK 了。
/*定义整个滚动条高宽及背景：高宽分别对应横竖滚动条的尺寸*/ ::-webkit-scrollbar { 	width: 10px; 	background-color: #f5f5f5; } /*定义滚动条轨道：内阴影 + 圆角*/ ::-webkit-scrollbar-track { 	background-color: #f5f5f5; } /*定义滑块：内阴影 + 圆角*/ ::-webkit-scrollbar-thumb { 	border-radius: 10px; 	background-color: #555; } 更多相关属性 :horizontal //水平方向的滚动条 :vertical //垂直 方向的滚动条 :decrement //应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。) :increment //decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。) :start //伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。 :end //类似于start伪类，标识对象是否放到滑块的后面。 :double-button //该伪类以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。 :single-button //类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。 :no-button //用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。 :corner-present //用于所有滚动条轨道，指示滚动条圆角是否显示。 :window-inactive //用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。 </description>
    </item>
    
    <item>
      <title>Css Body 背景图</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/body-%E8%83%8C%E6%99%AF%E5%9B%BE/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/body-%E8%83%8C%E6%99%AF%E5%9B%BE/</guid>
      <description>Body 背景图 画布 它是一块区域，也叫视口（可视窗口）。
它的最小宽度为视口宽度，最小高度为视口高度。
Html 的背景图 该元素的背景覆盖画布。即给该元素设置背景，相当于设置画布的背景。
Body 的背景图 若根元素有背景，body 元素的背景正常显示。
若根元素没有设置背景，则 body 元素的背景覆盖画布，则会出现不正常的现象，原因为若没有这个规则，就无法给整个网页设置背景。
背景图覆盖画布时 高度：纵向位置百分比、预设值，相对于根元素高度。
宽度：横向位置百分比、预设值，相对于视口。</description>
    </item>
    
    <item>
      <title>Css keyframes</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/keyframes/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/keyframes/</guid>
      <description>Css keyframes 持续旋转 选中文档中的元素。
.map2 {  width: 8.0375rem;  height: 8.0375rem;  background-image: url(../images/lbx.png);  opacity: 0.6;  animation: rotate 15s linear infinite;  z-index: 2; } keyframes @keyframes rotate { 	/* 从 0° 开始旋转 */ 	from { 	transform: translate(-50%, -50%) rotate(0deg); 	} 	/* 旋转到 360 ° */ 	to { 	transform: translate(-50%, -50%) rotate(360deg); 	} } </description>
    </item>
    
    <item>
      <title>italic 和 oblique</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/italic-%E5%92%8C-oblique/</link>
      <pubDate>Sat, 09 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/italic-%E5%92%8C-oblique/</guid>
      <description>italic 和 oblique italic：浏览器会显示一个斜体的字体样式。
oblique：浏览器会显示一个倾斜的字体样式。
可以发现关键之处为斜体和倾斜。
Italic 是使用了文字本身的斜体属性，
oblique 是让没有斜体属性的文字做倾斜处理。
因为有少量的不常用字体没有斜体的属性，
如果我们使用 Italic 就会没有效果，只能 Oblique 使用才能使文字倾斜。</description>
    </item>
    
    <item>
      <title>Css 语法</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 08 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E8%AF%AD%E6%B3%95/</guid>
      <description>语法 选择器的组成 选择器：位于语法开始，用于选中 HTML 文档中的元素。
声明：以 { 开始，以 } 结束。{ 与 } 必须成对出现。
声明块：由属性与属性值组成。
.selector { 	color: #000; } 调用方法 内联式：将 CSS 语法书写到元素的 style 属性中，仅对当前元素生效，也叫行内式。
内嵌式：首先将 style 元素书写到 head 元素中，然后将 CSS 语法书写到 style 元素中，也叫内部样式表。
外链式：将 CSS 语法书写到独立的 CSS 文件中，并在 HTML 文档中使用 link 元素引入，也叫外部样式表。
优先级：内联式 &amp;gt; 内嵌式 &amp;gt; 外链式。</description>
    </item>
    
    <item>
      <title>Css 块格式化上下文</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Thu, 07 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>块格式化上下文 格式化上下文（Block Formatting Context），它是一块 独立的渲染区域，它规定了在该区域中，普通流块盒的布局。
触发 BFC 的元素  根元素 html，该元素创建的 BFC 覆盖了文档中的所有元素。 浮动元素，float 的值不为 none 的元素。 绝对定位元素，position 的值为 absolute 或 fixed 的元素。 overflow 的值不为 visible 的块盒。 行块盒，display 的值为 inline-block 的元素。 表格单元格，display 的值为 table-cell 的元素，表格单元格默认为该值。 表格标题，display 的值为 table-caption 的元素，表格标题默认为该值。  正常布局流块盒的渲染区域  每个块盒都会参与块格式化上下文的创建。 不同的 BFC，它们进行渲染时互不干扰。 创建 BFC 的元素，隔绝了它内部和外部的联系，内部的渲染不会影响到外部区域。 创建 BFC 的元素，它的所有内容都会被包含在它所创建的 BFC 中  BFC 的作用 解决高度塌陷
创建 BFC 的元素，它的自动高度会计算浮动元素；若只是为了创建 BFC 一般使用副作用最小的方式：设置块盒的 overflow 的属性值为 hidden。仅仅是为了解决高度坍塌，建议使用伪元素 after。
原理：因为它要隔绝内部与外部的关系，而高度坍塌会使元素不在其包含块内，所以它的自动高度必须计算浮动元素，因此创建 BFC 可以解决高度坍塌的问题。
解决浮动流脱离文档流</description>
    </item>
    
    <item>
      <title>Css 盒子模型</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 06 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</guid>
      <description>盒子模型 前言 在 CSS 中，每一个元素都可以看作是一个盒子，这个盒子由以下几个方面组成。目前常用的有两种盒模型，分别是标准盒模型和怪异盒模型。
一个盒子的组成  内容（content） 内边距（padding） 边框（border） 外边距（margin）  标准盒模型 box-sizing 的值为 content-box 的元素；且浏览器将采用标准模式解析。
盒子总宽度 = width + padding（左右）+ border（左右）+ margin（左右）。
盒子总高度 = height + padding（上下）+ border（上下）+ margin（上下。
怪异盒模型 box-sizing 的值为 border-box 的元素；且浏览器将采用怪异模式（兼容模式）解析，也叫 IE 盒模型。
盒子总宽度 = width + margin（左右），其 width 包含了 padding（左右）和 border（左右）的宽度。
盒子总高度 = width + margin（上下），其 height 包含了 padding（上下）和 border（上下）的高度。</description>
    </item>
    
    <item>
      <title>Css 层叠上下文</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Tue, 05 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>层叠上下文 它是一块区域，它由某个元素创建，它规定了该区域中的内容在 Z 轴上排列的先后顺序。
它是一种 三维概念。所有的 HTML 元素都根据其元素的属性按照优先级顺序占据这个空间。
规则 只有定位元素设置 z-index 有效。
设置 z-index 值为负数的元素，会被正常流、浮动流覆盖。
z-index 的值，该值越大，则越靠近用户。
所有元素都处于 html 元素的层叠上下文中。
如遇到 z-index 一样的层叠上下文，则比较元素的书写顺序。
层叠上下文的元素，它本身永远被父级包含内，哪怕该元素设置了 z-index:-9999，它也只能包含于自身父元素的层叠上下文中。
每一个层叠上下文的元素，它们都完全独立于同级的元素，当处理层叠上下文时只会考虑自己的子元素。
创建层叠上下文的元素  根元素（html）。 Position 值为 absolute 或 relative 且 z-index 值不为 auto 的元素。 Opacity 的值小于 1 的元素。  优先级  同一个层叠上下文中，元素从底部到顶部的优先级 创建层叠上下文元素的背景和边框。 z-index 的值为负的层叠上下文元素。 常规流非定位元素的块盒。 非定位的浮动流。 常规流非定位行盒。 任何 z-index 属性值为 auto 的定位子元素，以及 z-index 为 0 的元素。 z-index 的值为正的元素。  </description>
    </item>
    
    <item>
      <title>Css 层叠</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0/</link>
      <pubDate>Mon, 04 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B1%82%E5%8F%A0/</guid>
      <description>层叠 层叠是 CSS 的一个基本特征，浏览器通过 优先级 来判断哪些属性值对一个元素最为重要，从而在这个元素上应用这些属性值。
确定声明值 找出样式表中没有冲突的声明，并应用到 CSS 属性，样式声明不冲突则不会发生层叠。
层叠 对样式表中有冲突（同一个元素在样式表中设置了多个相同的属性）的声明使用层叠规则。
比较重要性
 重要性由高到低为 样式表中的 !imliortant 样式（尽量不使用）。 样式表中的普通样式（内联式 &amp;gt; 内嵌式 &amp;gt; 外链式）。 浏览器中的默认样式。  比较优先级
 选择器选中的范围越窄，优先级越高。 通过选择器，计算出一个四位数（xxxx），该四位数越大越则优先级越高。这个四位数的进制为逢 256 进一。  四位数的取值
  千位：内联样式，记作 1，否则记为 0。
  百位：所有 id 选择器的数量。
  十位：所有类选择器、属性选择器、伪类选择器的数量。
  个位：元素选择器、伪元素选择器的数量。
  零：通配符选择器。
  比较源次序
CSS 样式书写靠后的属性最终会应用到元素。
继承 使用继承，对仍然没有值的属性，若可以继承（部分属性是不能继承的，通常情况下，只有跟文字内容有关的属性可以被继承。），则继承其父元素的属性。
当元素的属性有默认值时，该元素一般不会继承父元素的属性。
使用默认值 每个 CSS 在属性都会有默认值，当继承结束后，对于仍然没有值的属性，会使用默认值。</description>
    </item>
    
    <item>
      <title>Css 布局</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/css/%E5%B8%83%E5%B1%80/</guid>
      <description>布局 正常流布局  默认情况下，所有元素都属于正常流。 块盒独占一行。 行盒水平依次排列。 包含块：每个盒子都有它的包含块，包含块决定了该盒子的排列范围。 在正常布局流中，元素的包含块，都是该元素父元素的内容盒。  常见问题 Margin 合并
多个同级且相邻的正常布局流块盒，当它们的上下外边距相邻，会合并为一个外边距，两个外边距值都是正数，则取较大值；两个值都是负数，则取较大值；一正一负则取两个值的和，该情况抗可以触发 BFC 解决。
Margin 塌陷
正常布局流中的呈父子关系的块盒，如果父元素没有设置上下内边距或上下边框，子元素的上下边距就会和父元素的上边距重合，两个外边距值都是正数，则取较大值；两个值都是负数，则取较大值；一正一负则取两个值的和，该情况抗可以触发 BFC 解决。
浮动流布局  使元素向左上或向右上排列。 通常情况，浮动元素会无视正常布局元素，它会将正常布局元素覆盖。 在一行浮动元素中，若父元素装不下所有的浮动元素，则多余的浮动元素会自动向下移动，直到具备足够的空间能容纳这些多余的浮动元素，才向左或向右移动。 行盒在排列时，默认会避开浮动元素（单独的文字也是行盒，因为浏览器会自动生成一个行盒包裹单独的文字，该行盒为匿名行盒）。 浮动元素一定是块盒。 不会发生 margin 合并。 脱离正常布局流。  常见问题 高度塌陷 正常布局流元素高度自适应，它的子元素浮动后，该元素在计算高度时，不会考虑浮动后的子元素的高度，则会导致该元素高度为 0，这种情况称为高度塌陷。
解决方式： 利用伪元素 after 清除浮动即可解决。
定位流布局 使一个元素从它原本在正常布局流中应该在的位置移动到另一个位置。
相对定位   使元素在原来位置上进行偏移；若没有设置偏移量，对元素本身没有任何影响。
  提升元素层级（z-index）。
  盒子的偏移不会对其他盒子造成任何影响。
  脱离正常布局流。
  尽管元素被偏移了，但它仍然占据着它没偏移前的空间。
  绝对定位   它相对于 static 定位以外的第一个父元素进行定位；若没有，则它的包含块为整个网页（初始化包含块），原位置不会被保留。
  一定是块盒且不是浮动元素。
  提升元素层级。</description>
    </item>
    
    <item>
      <title>Html img 的常见问题</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/img-%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/img-%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>img 的常见问题 关于无法设置宽高 如果该元素的图像链接失效，则该元素的特性会与行盒一样，无法设置宽高；如果想要图像链接失效后仍具有宽高，可以将该元素设置为块盒或者行块盒。
关于图像底部的留白 当任何一个元素（例如 div）内包含行盒（例如 img）时，该 img 行盒就会在这个 div 元素的内部创建参考线，即这个 div 元素在没有设置下外边距的情况下，img 元素的基线（下外边距的底部）会与父元素的基线对齐（即留白部分就是 img 元素的下外边距），因此导致图像底部有留白。
解决方法：
 第一种是将父元素的字体大小设置为零，则父元素的内部就不会产生参考线。 第二种是将 img 元素设置为块盒，因此其父元素的内部就没有包含行盒，因此不会在其父元素内部产生参考线。  </description>
    </item>
    
    <item>
      <title>Html 元素语义化</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/%E5%85%83%E7%B4%A0%E8%AF%AD%E4%B9%89%E5%8C%96/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/%E5%85%83%E7%B4%A0%E8%AF%AD%E4%B9%89%E5%8C%96/</guid>
      <description>元素语义化 前言 在 HTML 5 中，新增了许多元素，这些不同的元素都有不同的含义，因此语义化指的是用最合理、最恰当的元素来标记网页内容，使得机器也可以知道页面中有哪些元素，比如，文章、标题、或是段落。
语义化的优点  使文档在没有 CSS 样式的条件下，也能很好地呈现出内容结构。 使文档结构变的清晰，更具可读性，且利于后期的代码维护。 方便其他设备解析（屏幕阅读器、盲人阅读器、移动设备等）。 有利于 SEO。  </description>
    </item>
    
    <item>
      <title>htm、html、shtml 后缀的区别</title>
      <link>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/htmhtmlshtml-%E5%90%8E%E7%BC%80%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 03 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>http://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/html/htmhtmlshtml-%E5%90%8E%E7%BC%80%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>htm、html、shtml 后缀的区别 首先 htm、html、shtml 都是静态网页的后缀，三者也可以说都是只是扩展名不同，其他一样，都是静态的网页。
Htm 和 html 是完全静态的网页不通过服务器编译解释直接送出给浏览器读取的静态网页，以 htm 和 html 伪静态 Request 除外。
html、htm、shtml、shtm 均是静态 html 网页，都是网页文件后缀名不同的 html 网页扩展名。
htm html 与 htm 均是静态网页后缀名，网页文件没有区别与区分，html 与 htm 后缀网页后缀可以互换，对网页完全没有影响同时也没有区别。可以认为 html 与 htm 没有本质区别，只是两者适用于不同的运行环境（DOS 和 UNIX）之下。
shtml shtml 命名的网页文件里，使用了 ssi 的一些指令，就像 asp 中的指令，你可以在 SHTML 文件中写入 SSI 指令，当客户端访问这些 shtml 文件时，服务器端会把这些 SHTML 文件进行读取和解释，把 SHTML 文件中包含的 SSI 指令解释出来。</description>
    </item>
    
  </channel>
</rss>
