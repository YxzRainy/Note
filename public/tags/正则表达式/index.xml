<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on Rainy · Blog</title>
    <link>https://yxzi.xyz/Sub/Blog/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on Rainy · Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 09 May 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/Sub/Blog/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>正则表达式 修饰符</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Mon, 09 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>修饰符 i 不区分大小写，即 A 和 a 没有区别。
var reg = /abcde/i;  var str = &amp;#39;abCDE&amp;#39;;  var result = reg.test(str); console.log(result); g 全局匹配。查找字符串中所有的匹配项。
匹配到一个后，还会继续匹配字符串，找出字符串中所有的匹配项。
var reg = /ab/g; var str = &amp;#39;abababababab&amp;#39;;  var result = str.match(reg); console.log(result); m 多行匹配，通常需要配合g来用。用边界字符^表示只匹配每一行的开头，用$匹配每一行的结尾，注意时是多行匹配，而不是整个字符串的开头和结尾。
var reg = /^a/gm;  var str = &amp;#39;abcababa\nabab&amp;#39;;  var result = str.match(reg); console.log(result); s 默认情况下的圆点 . 是 匹配除换行符 \n 之外的任何字符，加上 s 之后, . 中包含换行符 \n。</description>
    </item>
    
    <item>
      <title>正则表达式 元字符</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%85%83%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Mon, 09 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%85%83%E5%AD%97%E7%AC%A6/</guid>
      <description>元字符 \w 匹配字母、数字、下划线。等价于[A-Za-z0-9_]。
var reg = /\wcd2/g;  var str = &amp;#39;bcd2&amp;#39;;  var result = str.match(reg); console.log(result); \W 匹配非字母、数字、下划线。等价于 [^A-Za-z0-9_]。
var reg = /\Wcd2/g;  var str = &amp;#39;b*cd2&amp;#39;;  var result = str.match(reg); console.log(result); \d 匹配一个数字字符。等价于 [0-9]。
\D 匹配一个非数字字符。等价于 [^0-9]。
\s 匹配任何空白字符，包括空格符、制表符\t、回车符\r、换行符\n、垂直制表符\v、换页符\f。
等价于 [ \f\n\r\t\v]。
\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\b 匹配一个单词边界，也就是指单词和空格间的位置。
例如， er\b可以匹配 never 中的 &amp;rsquo;er&amp;rsquo;，但不能匹配 verb 中的 er。
var reg = /\bname/g;  var str = &amp;#39;my name is rainy&amp;#39;;  var result = str.</description>
    </item>
    
    <item>
      <title>正则表达式 普通字符</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Mon, 09 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%99%AE%E9%80%9A%E5%AD%97%E7%AC%A6/</guid>
      <description>普通字符 [] 它是一个表达式，一个[]就表示一个字符，比如[ab][ab]就表示匹配两个相连的字符，并且这个两个字符必须是sd。
它匹配[]中所含有的字符，[]中是一个要匹配的区间。
[]可以写元字符
例子   [str]，匹配包含 str 的字符。
  [A-Z]，匹配 A-Z 的字符。
  [a-z]，匹配 a - z 的字符。
  [0-9]，匹配 0 - 9 的字符。
  [A-z] = 匹配[A-Z] + [a-z]的字符
  [^rainy]，匹配除 rainy 之外的任意字符。
  var reg = /[0-9][A-z][a-z]/gm;  var str = &amp;#39;111Exg54gGfg000&amp;#39;;  var result = str.match(reg); console.log(result); ()</description>
    </item>
    
    <item>
      <title>正则表达式 普通字符</title>
      <link>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Mon, 09 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/Sub/Blog/mynote/4-specialty/language/javascrip/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>普通字符 () 标记一个子表达式的开始和结束位置。
var reg = /(abc|bcd)[0-9]/g;  var str = &amp;#39;bcd2&amp;#39;;  var result = str.match(reg); console.log(result); </description>
    </item>
    
  </channel>
</rss>
