<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rainy · Blog</title>
    <link>https://yxzi.xyz/</link>
    <description>Recent content on Rainy · Blog</description>
    <image>
      <url>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yxzi.xyz/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 21 May 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://yxzi.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>递推</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E9%80%92%E6%8E%A8/</link>
      <pubDate>Sat, 21 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E9%80%92%E6%8E%A8/</guid>
      <description>递推 从初值出发反复进行某一运算得到所需的结果。
从已知到未知，从小到大（比如每年长高 9cm，20则长高年 180 cm，30年后则长高 270 cm）
function Recursion(n) { 	let start = 0; 	let fn = 1; 	for (let i = 0; i &amp;lt; n; i++) { 	let t = fn; 	console.log(t); 	fn = fn + start; 	start = t; 	} 	return fn; }  console.log(Recursion(5)); </description>
    </item>
    
    <item>
      <title>App Recommend</title>
      <link>https://yxzi.xyz/blog/essay/app-recommend/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/app-recommend/</guid>
      <description>App Recommend 推荐一些 PC 端好用的软件。
Advanced Renamer 批量重命名工具。
Photoshop 处理图片。
Audition 剪辑音频。
Premiere 剪辑视频。
After Effects 制作视频特效。
Git 管理项目的版本。
Nodejs Javascript 的运行环境，能够使得 javascript 脱离浏览器运行。
Python Python 的运行环境。
VsCode 全能代码编辑器。
360 Zip 简洁无广告的解压工具。
Everything 快速的文件搜索工具。
Oulu 好用的词典。
Typora markdown 编辑器。
PotPlayer 功能强大的视频解码器。
XiaoYaoEmulator Android 模拟器。
VMware 虚拟机。安装完成后会弹出一个对话框让你输入密钥
密钥 ZF3R0-FHED2-M80TY-8QYGC-NPKYF
YF390-0HF8P-M81RQ-2DXQE-M2UT6
ZF71R-DMX85-08DQY-8YMNC-PPHV8
IntelliJ IDEA Java
PyCharm Python
CodeBlock 免费的 C/C++ 和 Fortran IDE
Win SCP 服务器文件管理器
Xshell 服务器终端，登录 Linux 虚拟服务器
Notepad++ 轻量、快速的文本编辑器</description>
    </item>
    
    <item>
      <title>笔记和博客的区别</title>
      <link>https://yxzi.xyz/blog/essay/%E7%AC%94%E8%AE%B0%E5%92%8C%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 18 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/%E7%AC%94%E8%AE%B0%E5%92%8C%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>笔记和博客的区别 笔记 笔记是给自己看的，是自己知识的沉积，更是自己思考的结果。
笔记是工具，而非目的，不应该追求美观完善，而是要简洁、清晰、成体系。方便自己查找和复习。
记笔记时，更不应该局限于某个软件，或局限于某些方式。比如有的人只喜欢用纯文本记笔记。
从而忽略了其他方式所带来的优势，比如思维导图。
博客 博客是给其他人看的，是自己知识的升华，更是思想的交汇之所。
博客说白了就是个人网站、或者个人的网络笔记本，别人也可以去看，但需要别人很主动的去看。
因此，博客不能写的太随意，要把来龙去脉说清楚，尽可能让别人理解你想表达的东西。毕竟，要把一件事情讲明白，讲道理挺难的。
对自己来说，博客不适合构建知识体系，因为博客的结构是松散的，不适合快速查找知识。
但是，博客可以是一个表达自己、展示自己的平台。</description>
    </item>
    
    <item>
      <title>哈夫曼树</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</link>
      <pubDate>Sat, 14 May 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</guid>
      <description>哈夫曼树 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;  typedef struct node{ 	int data; 	struct node *lchild, *rchild; } n;  //创建一个节点 node * get_a_node(int data){ 	node *c = (node *)malloc(sizeof(node)); 	c-&amp;gt;data = data; 	c-&amp;gt;lchild = 0; 	c-&amp;gt;rchild = 0; 	return c; }   int main(){ 	queue&amp;lt;node *&amp;gt;q; 	//构建一棵树 	node *t = get_a_node(1); 	t-&amp;gt;lchild = get_a_node(2); 	t-&amp;gt;rchild = get_a_node(3); 	t-&amp;gt;lchild-&amp;gt;rchild = get_a_node(5); 	t-&amp;gt;rchild-&amp;gt;rchild = get_a_node(7); 	t-&amp;gt;rchild-&amp;gt;rchild-&amp;gt;lchild = get_a_node(14);  	q.</description>
    </item>
    
    <item>
      <title>二叉树的最大深度</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Tue, 26 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid>
      <description>二叉树的最大深度 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; typedef struct node {  int data;  struct node *lchild, *rchild; } n;  // 创建一个节点 node * get_a_node(int data) {  node *c = (node *)malloc(sizeof(node));  c-&amp;gt;data = data;  c-&amp;gt;lchild = 0;  c-&amp;gt;rchild = 0;  return c; }  //二叉树的最大深度 int max_depth(node *p) {  int left = 0;  int right = 0;  if (p-&amp;gt;lchild)  {  left = max_depth(p-&amp;gt;lchild);  }  if (p-&amp;gt;rchild)  {  right = max_depth(p-&amp;gt;rchild);  }  if (left &amp;gt; right)  return left + 1;  else  return right + 1; }  int main(void) {  // 构建树  node *t = get_a_node(1);  t-&amp;gt;lchild = get_a_node(2);  t-&amp;gt;rchild = get_a_node(3);  t-&amp;gt;lchild-&amp;gt;rchild = get_a_node(5);  t-&amp;gt;rchild-&amp;gt;rchild = get_a_node(7);  t-&amp;gt;rchild-&amp;gt;rchild-&amp;gt;lchild = get_a_node(14);   // 二叉树的最大深度  int depth = max_depth(t);  printf(&amp;#34;二叉树的深度为：%d\n&amp;#34;,depth);  return 0; } </description>
    </item>
    
    <item>
      <title>判断是否为完全二叉树</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 26 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>判断是否为完全二叉树 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; typedef struct node {  int data;  struct node *lchild, *rchild; } n;  //创建一个节点 node * get_a_node(int data) {  node *c = (node *)malloc(sizeof(node));  c-&amp;gt;data = data;  c-&amp;gt;lchild = 0;  c-&amp;gt;rchild = 0;  return c; }  /* //5 判断一棵树是否是完全二叉树，如果是返回1，如果否返回0 int is_complete(node *p){ //请完善这里 } */ int main(void) {  //构建一棵树  node *t = get_a_node(1);  t-&amp;gt;lchild = get_a_node(2);  t-&amp;gt;rchild = get_a_node(3);  t-&amp;gt;lchild-&amp;gt;rchild = get_a_node(5);  t-&amp;gt;rchild-&amp;gt;rchild = get_a_node(7);  t-&amp;gt;rchild-&amp;gt;rchild-&amp;gt;lchild = get_a_node(14);   return 0; } </description>
    </item>
    
    <item>
      <title>判断是否为对称二叉树</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 26 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>判断是否为对称二叉树 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; typedef struct node {  int data;  struct node *lchild, *rchild; } n;  // 创建一个节点 node * get_a_node(int data) {  node *c = (node *)malloc(sizeof(node));  c-&amp;gt;data = data;  c-&amp;gt;lchild = 0;  c-&amp;gt;rchild = 0;  return c; }  bool isSymHeper(node* left,node* right); //3 判断是否是对称的二叉树，如果是返回1，如果否返回0 bool isSym(node* p) {  if(p == NULL)  return true;  return isSymHeper(p-&amp;gt;lchild,p-&amp;gt;rchild); } bool isSymHeper(node* left,node* right) {  if(left == NULL &amp;amp;&amp;amp; right == NULL)  return true;  if(left == NULL || right == NULL || left-&amp;gt;data !</description>
    </item>
    
    <item>
      <title>翻转二叉树</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 26 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>翻转二叉树 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt;  typedef struct node {  int data;  struct node *lchild, *rchild; } n;  // 创建一个节点 node * get_a_node(int data) {  node *c = (node *)malloc(sizeof(node));  c-&amp;gt;data = data;  c-&amp;gt;lchild = 0;  c-&amp;gt;rchild = 0;  return c; }  //4 翻转二叉树，返回树根 node *node_reverse(node* p) {  if (p == NULL)  return NULL;  node_reverse(p-&amp;gt;lchild);  node_reverse(p-&amp;gt;rchild);  node * t = p-&amp;gt;lchild;  p-&amp;gt;lchild = p-&amp;gt;rchild;  p-&amp;gt;rchild = t;   return p; }  int main(void) {  //构建一棵树  node *t = get_a_node(1);  t-&amp;gt;lchild = get_a_node(2);  t-&amp;gt;rchild = get_a_node(3);  t-&amp;gt;lchild-&amp;gt;rchild = get_a_node(5);  t-&amp;gt;rchild-&amp;gt;rchild = get_a_node(7);  t-&amp;gt;rchild-&amp;gt;rchild-&amp;gt;lchild = get_a_node(14);    // 翻转二叉树  node* newt = node_reverse(t);  printf(&amp;#34;翻转后的二叉树根节点：%d\n&amp;#34;,newt-&amp;gt;lchild-&amp;gt;lchild-&amp;gt;rchild-&amp;gt;data );    return 0; } </description>
    </item>
    
    <item>
      <title>二叉树的节点数量</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F/</link>
      <pubDate>Thu, 21 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F/</guid>
      <description>二叉树的节点数量 递归法  判断根节点是否有左右子节点，有则递归调用NodeNum()，则子节点 + 1。 左右子节点数量加上根节点数量。  ·include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; // 定义节点 typedef struct node {  int data;  struct node *lchild, *rchild; } n;  // 创建一个节点 node * get_a_node(int data) {  node *c = (node *)malloc(sizeof(node));  c-&amp;gt;data = data;  c-&amp;gt;lchild = 0;  c-&amp;gt;rchild = 0;  return c; }   // *p：根节点 int NodeNum(node *p) {  // 节点总数  int nums;   // 左节点数量  int left = 0;   // 右节点数量  int right = 0;   // 有左节点  if (p-&amp;gt;lchild)  {  // 左节点 + 1  left = NodeNum(p-&amp;gt;lchild);  }  // 有右节点  if (p-&amp;gt;rchild)  {  // 右节点 + 1  right = NodeNum(p-&amp;gt;rchild);  }  // 左右节点数量加上根节点数量  // 这个 + 1 很重要，因为每次调用 NodeNum()，就说明有节点，则 nums + 1。  nums = left + right + 1;  return nums; }   int main(void) {  // 构建二叉树  node *t = get_a_node(1);  t-&amp;gt;lchild = get_a_node(2);  t-&amp;gt;rchild = get_a_node(3);  t-&amp;gt;lchild-&amp;gt;rchild = get_a_node(5);  t-&amp;gt;rchild-&amp;gt;rchild = get_a_node(7);  t-&amp;gt;rchild-&amp;gt;rchild-&amp;gt;lchild = get_a_node(14);   int num = NodeNum(t);  printf(&amp;#34;二叉树的结点个数为：%d\n&amp;#34;,num);  return 0; } </description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 18 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构 数据结构是指计算机存储和组织数据的一种的结构。
将现实中大量而复杂的问题以特定的数据类型和特定的存储结构存储到内存中，以此来实现某个功能（删除、查找、排序）而执行相应的操作，这个相应的操作也叫算法。
数据结构定义数据将以什么样的形式存储到内存中，而算法定义的是我们如何对内存中的数据结构进行操作。
程序 = 数据的存储（数据结构） + 数据的操作（算法） + 可以被程序执行的语言（变成语言）</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 18 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E7%AE%97%E6%B3%95/</guid>
      <description>算法 算法是为了解决一个问题而设计的一种操作。
算法目的就是为了解决问题，它是一系列解题步骤，一个计算过程。因此，我们描述算法，通常可以使用伪代码。
定义 通俗定义 解题的方法和步骤。
狭义定义 对存储数据的操作。
对不同的数据结构，要完成某一个功能所执行的操作是不一样的。
比如，输出数组所有的元素和输出链表中所有的元素的操作是不一样的。这说明，算法是依附于数据结构，不同的数据结构，所执行的算法是不一样的。
广义定义 广义的算法也叫泛型。无论数据是如何存储的，对该数据的操作都是一样的。
我们至少可以通过两种结构来存储数据：
 数组 链表  衡量算法的标准 时间复杂度 程序执行的大概次数，而非执行时间。
为什么不是执行呢？
 这是因为在不同的机器上，同一个程序的执行时间是不同的（机器的性能不一样）。  空间复杂度 算法的执行过程中，大概所占用的最大内存。
可读性 算法是否容易让人理解。
健壮性 一个算法对不合理数据输入的反应能力和处理能力，也称为算法容错性。</description>
    </item>
    
    <item>
      <title>补码</title>
      <link>https://yxzi.xyz/blog/technology/computer/%E8%A1%A5%E7%A0%81/</link>
      <pubDate>Mon, 18 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/computer/%E8%A1%A5%E7%A0%81/</guid>
      <description>补码 在计算机中，数值一律用补码来表示和存储。
补码是现代计算机使用的编码格式，同时解决了原码和反码的瑕疵。
已知十进制求二进制的补码 求正整数的二进制补码 除 2 取余，直至商为 0，余数倒序即可
求负整数的二进制补码 先求与该负数的相反数的二进制数，然后将所有位取反，末尾位加 1，不够位数，左侧补 1。
（-3）—&amp;gt; 011 —&amp;gt; 100 —&amp;gt; 101 — 11111111,11111111,11111111,11111101 — &amp;gt; FFFFFFFD
求零的二进制补码 全是 0。
已知二进制补码求十进制 如果二进制补码首位是 0，则表示这个数是正整数。
直接转十进制即可。
如果二进制补码首位是 1，则表示这个数是负整数。
将所有位取反，末位加 1，所得数字就是该负数的绝对值加 1。
1001010 —&amp;gt; 0110101 —&amp;gt; 0110110 —&amp;gt; 57 —&amp;gt; -54
如果二进制补码全是零，则表示这个数字是 0。
原码 原码不能直接参加运算
首位是 0 表示这个数是正整数，首位是 1 表示这个数是负整数，
其余二进制位是该数字的绝对值的二进制位。
（+35）00100011，就是 35 的二进制，不足位补零，0 表示负；
（-35）10100011，最高位放符号位，1 表示负。
反码 在计算机中不常用。
（+35）—&amp;gt; 00100011，和原码补码都相同
（-35）—&amp;gt; 11011100，+ 35 的原码全部取反即可求出 -35 的反码。或者 35 的补码最低位减去 1 获得。</description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 17 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/sort/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>冒泡排序 流程   比较相邻的两个元素，升序则交换两个数的位置，降序则位置不变。
  对每一对相邻元素作同样的操作，从开始第一对到结尾的最后一对。直到产生一个最大或者最小的数（这取决于你是升序还是降序）。升序是产生最大的数，降序是产生最小的数。
  重新开始下一轮遍历，但无需遍历上轮遍历时所产生的最大数。
  实现升序 # include &amp;lt;stdio.h&amp;gt;  // *arr 数组 // len 数组长度 void BubbleSort(int * arr, int len){   // 整体比较轮数  int i;   // 元素与元素的比较次数  int j;   // 媒介变量，用于交换两个元素的位置  int t;   // 整体比较轮数  // 需要b len-1 轮，每轮整体比较都需要进行元素与元素的比较。  for (i = 0; i &amp;lt; len-1;i ++){   // 元素与元素的比较次数  // 每进行一轮比较，都会在数组末尾产生一个最大元素。  // 下次比较时，这个最大元素将不再参与和其他元素的比较，因此，元素与元素的比较次数为 j &amp;lt; len - 1 - i。  for(j = 0;j &amp;lt; len - 1- i;j++){   // 元素与元素的比较 	// 从第一个元素 a[j] 与第二个元素 a[j+1] 开始依次比较。  if (arr[j] &amp;gt; arr[j+1]){   // 交换两个元素的位置。  t = arr[j];  arr[j] = arr[j+1];  arr[j + 1] = t;  }  }  } }  int main(void) {  int arr[] = {10,2,8,-8,11,0};  BubbleSort(arr,6);  for(int i = 0; i &amp;lt; 6;i++){  printf(&amp;#34;%d &amp;#34;,arr[i]);  }  printf(&amp;#34;\n&amp;#34;); </description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 17 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/sort/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序 流程  在未排序的元素中找到最小（或最大）元素，将其存放到该数组的起始位置， 跳过已排序数，从剩余未排序的元素中继续寻找最小（或最大）元素，放到已排序数组的末尾。 以此类推，直到所有元素均排序完毕。  实现升序 #include &amp;lt;stdio.h&amp;gt; void SelectionSort(int *arr,int len) {   // 已排序元素的末尾位置  int i;   // 未排序元素的起始位置  int j;   int k;   // 媒介变量，用于交换两个元素的位置  int t;   // 整体比较轮数  // 需要比较 len 轮  for(i = 0; i &amp;lt; len; i++)  {   // 跳过已排序的数  int k = i;   // 忽略已排序的数，直接从未排序的数开始比较，找出未排序数中的最小数  for(j = i; j &amp;lt; len; j++)  {  printf(&amp;#34;%d\n&amp;#34;,i);  if(arr[j] &amp;lt; arr[k])  {  // 将一对数中较小的数的索引赋给 k  k = j;  }  }   // 将最小的那个数移到数组最前面  t = arr[k];  arr[k] = arr[i];  arr[i] = t;  } }  int main() {  int arr[] = {5,7,1,3,8,12,2,9};  SelectionSort(arr,8);  for(int j = 0; j &amp;lt; 8; j++)  {  printf(&amp;#34;%d &amp;#34;,arr[j]);  } } </description>
    </item>
    
    <item>
      <title>进制</title>
      <link>https://yxzi.xyz/blog/technology/computer/%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Sun, 17 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/computer/%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6/</guid>
      <description>进制 进制也是进位计数制，是人为定义的带进位的计数方法。
十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，N 进制就是逢 N 进位。
用不同的进制表示同一个数，虽然使用的进制不一样，但内部依旧表示的同一个数，只是外部所表现形式不一样而已。
进制的表示  B 表示二进制 O 表示八进制 D 表示十进制 H 表示十六进制  二进制的规律  1 = 1 10 = 21 100 = 22 1000 = 23 10000 = 24  </description>
    </item>
    
    <item>
      <title>进制转换</title>
      <link>https://yxzi.xyz/blog/technology/computer/%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 17 Apr 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/computer/%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <description>进制转换 二进制与八进制的转换 二进制转八进制 从右向左，三位一段，分别转换，不够三位补零。
0101110 —&amp;gt; 000, 101, 110，三位一段。
（000 = 0）（101 = 5）（110 = 6），则最后得到八进制数56。
八进制转二进制 将每一个八进制位转换为 3 个二进制位。
27 —&amp;gt; （010）（111），最后得到二进制数10111。
二进制与十六进制的转换 二进制转十六进制 从右向左，四位一段，分别转换，不够四位补零。
因为一个十六进制位有 16 种状态，所以需要 4 个二进制位的排列组合来表示，即每个 16 进制位，都需要用 4 个二进制位来表示，所以，我们可以将一串二进制位划分为好几段，四位为一段，不够四位的在前方补零，最后再一段一段的进行转换。
0101110 —&amp;gt; 0010, 1110，四位一段。
（0010 = 2）（1110 = 14 = E），则最后得到十六进制数2E
十六进制转二进制 将每一个十六进制位转换为 4 个二进制位。
2E —&amp;gt; （0010）（1110），一段四位则最后得到二进制数101110
十进制转 N 进制 **除 N 取余，直至商 0 ，余数倒序。**十六进制需要将余数转换
十进制转二进制 除以二取余，并将余数倒过来，即可得出结果。
比如 185：
 18 / 2 = 92， 余 1</description>
    </item>
    
    <item>
      <title>冻疮的康复之路</title>
      <link>https://yxzi.xyz/blog/essay/%E5%86%BB%E7%96%AE%E7%9A%84%E5%BA%B7%E5%A4%8D%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Tue, 01 Feb 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/%E5%86%BB%E7%96%AE%E7%9A%84%E5%BA%B7%E5%A4%8D%E4%B9%8B%E8%B7%AF/</guid>
      <description>冻疮的康复之路 今年冬天也不知道是为什么，刚从贵州到重庆没几天，手上居然还是长冻疮了&amp;hellip;
白萝卜叶治疗法   找一些的白萝卜（圆的和长的白萝卜都可以）叶子，用清水洗干净；
  在锅中放入适量清水，烧开即可；
  向锅中放入刚洗好的白萝卜叶子，沸水煮 10 分钟左右即可；
  等水温降到合适的温度后，将双手或双脚放入水中浸泡即可。
  我当时是早晚各一次，三天左右基本就好的差不多了。
  预防冻疮  接触冷水时（比如洗碗）佩戴加绒的橡胶手套。 不要让易长冻疮的地方忽冷忽热（刚接触热水，立马又接触冷水）。 耳罩、手套。 厚袜子，保护手、耳朵以及脚。 晚上睡觉时穿袜子入睡。  </description>
    </item>
    
    <item>
      <title>贵阳哪些地方值得一玩</title>
      <link>https://yxzi.xyz/blog/essay/%E8%B4%B5%E5%B7%9E%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E5%80%BC%E5%BE%97%E4%B8%80%E7%8E%A9/</link>
      <pubDate>Sun, 16 Jan 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/%E8%B4%B5%E5%B7%9E%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E5%80%BC%E5%BE%97%E4%B8%80%E7%8E%A9/</guid>
      <description>贵州哪些地方值得一玩 贵阳区域  花溪 青岩 天河潭  老城区  黔灵山公园 甲秀楼  市郊  乌当偏坡 渔洞峡 情人谷 阿栗杨梅园 香纸沟水上乐园 白云欢乐世界 金阳喀斯特公园 贵安新区森哒星生态度假公园 云漫湖 瑞士小镇 多彩贵州城 1958 多彩贵州海洋世界  贵阳三县一市 贵阳三县一市分别是修文县息烽县，开阳县，清镇市，距离贵阳市较近，非常适合自驾。
修文县  贵阳野生动物园 阳明洞 苏格兰牧场 桃源河峡谷生态旅游区 珍珠岛度假休闲中心  息烽县  息烽温泉 息烽集中营 乌江峡  开阳县  南江大峡谷 白马峪温泉 云山茶海 十里画廊 白果生态农业观光园  清镇市  时光贵州 红枫湖  安顺区域  黄果树风景区 龙宫风景区  探秘历史 天龙
 云峰屯堡（保留 600 年明朝军屯历史原样，老汉人） 紫云格凸河（悬棺、蜘蛛人） 关岭红崖天书 关岭海百合化石群 普定穿洞遗址  青山秀水  平坝农场（赏樱花） 普定秀水（农家乐） 小河湾（摘果） 黄果树石头寨（烧烤）  有句话是：“玩在贵阳，吃在安顺”。很多贵阳的朋友都会周末到安顺去吃小吃再返程，因此就算是边逛边吃也可以玩一天。</description>
    </item>
    
    <item>
      <title>进厂后</title>
      <link>https://yxzi.xyz/blog/essay/%E8%BF%9B%E5%8E%82%E5%90%8E/</link>
      <pubDate>Sat, 18 Dec 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/%E8%BF%9B%E5%8E%82%E5%90%8E/</guid>
      <description>进厂后 每天做着重复且机械的工作，好不容易熬到下班，
换上了自己喜欢的衣服，吃完饭便回到宿舍，
推开门，扑面而来的是一股浓浓的烟味，让你不得不捂住鼻子，
你望着昏暗腐朽的宿舍，想开灯，但却怕打扰舍友休息。
角落里的两个室友，一个对着手机痴迷的笑着，跟着魔了似的，
另一个正在睡觉，睡得像死猪一般。
你想跟那个玩手机的舍友打个招呼，但却不知什么原因止住了。
你太累了，躺在床上，
望着脏兮兮的天花板，不禁开始怀念曾经在学校的生活&amp;hellip;</description>
    </item>
    
    <item>
      <title>为什么会写博客</title>
      <link>https://yxzi.xyz/blog/essay/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%86%99%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 27 Nov 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%86%99%E5%8D%9A%E5%AE%A2/</guid>
      <description>为什么会写博客 技术总结 码代码嘛，肯定是会遇到各种 bug 的，之后肯定得通过某些渠道来解决这些 bug，比如 Google、各种论坛&amp;hellip;
最终，你花了大半天的时间找到了解决办法，但你并没有记录解决这个问题的过程。
过了一段时间，当你再遇到同样的问题，你还得再花上大半天的时间去 Google。
这时候你就会想，要是当时自己记录了这个问题的解决过程就好了。
换句话说，第一次接触某个新知识或新问题，你通过各种方式进行学习+实践+总结。
完成过后，再把这些过程都记录下来，如果未来需要用到，看你自己的笔记就行了，哪还需要去搜索引擎中大海捞针？
将笔记公开，成为博客，能帮助到需要的人。
生活感悟 每个人不免会在生活中产生一些对人生的一些感触和觉悟。
我也一样，很多时候，我可能会因一篇文章、一本书、一部电影、一个人、或生活中的某个细节，而触动我。
我珍惜这些东西，想把这些东西用文字表述出来。并愿意分享。
最后用在其他博客上看到的一句话来总结一下：
 对任何渴望进步的人来说，写博客/文章/回答，对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。因为在开始写作的那一刻起，你就已经开始受益。”
 </description>
    </item>
    
    <item>
      <title>递归</title>
      <link>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 21 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/technology/datastructure/algorithm/%E9%80%92%E5%BD%92/</guid>
      <description>递归 简单地说，就是如果在函数中存在着调用函数本身的情况，这种现象就叫递归。
从所需结果出发不断回溯前一运算直到回到初值再递推得到所需结果。从未知到已知，从大到小，再从小到大。
用计算阶乘函数举例，factorial()中存在着factorial(n - 1)的调用，所以此函数就是递归函数。
var n = 5; function factorial(n) { 	if (n == 1) { 	return 1; 	} 	return (n = n * factorial(n - 1));  } console.log(factorial(n)); 使用递归的思路   找规律（符合人的思维过程）。
  找出口（用已知的条件当做终止条件，用实际性的数去返回结果），避免无限递归（即无限循环），导致浏览器崩溃。
  递归的一般格式为 return + 有规律公式。
   递归优缺点 优点
 使代码更加简洁。  缺点
 影响程序的效率与性能，因此，复杂的程序一定不要使用递归。  </description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://yxzi.xyz/blog/essay/hello-world/</link>
      <pubDate>Fri, 01 Oct 2021 06:00:00 +0000</pubDate>
      
      <guid>https://yxzi.xyz/blog/essay/hello-world/</guid>
      <description>Hello World 2021 年 10 月 1 日，
我的站点正式发布。
愿你被世界温柔以待。</description>
    </item>
    
    
    
  </channel>
</rss>
